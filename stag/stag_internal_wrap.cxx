/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIG_PYTHON_CAST_MODE



#define SWIG_VERSION 0x040201
#define SWIGPYTHON
#define SWIG_DIRECTORS
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#if defined(__GNUC__) && defined(_WIN32) && !defined(SWIG_PYTHON_NO_HYPOT_WORKAROUND)
/* Workaround for '::hypot' has not been declared', see https://bugs.python.org/issue11566 */
# include <math.h>
#endif

#if !defined(PY_SSIZE_T_CLEAN) && !defined(SWIG_NO_PY_SSIZE_T_CLEAN)
#define PY_SSIZE_T_CLEAN
#endif

#if __GNUC__ >= 7
#pragma GCC diagnostic push
#if defined(__cplusplus) && __cplusplus >=201703L
#pragma GCC diagnostic ignored "-Wregister" /* For python-2.7 headers that use register */
#endif
#endif

#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */

#if defined(_MSC_VER) && _MSC_VER >= 1929
/* Workaround compilation errors when redefining _DEBUG in MSVC 2019 version 16.10 and later
 * See https://github.com/swig/swig/issues/2090 */
# include <corecrt.h>
#endif

# undef _DEBUG
# include <Python.h>
# define _DEBUG 1
#else
# include <Python.h>
#endif

#if __GNUC__ >= 7
#pragma GCC diagnostic pop
#endif

#include <stdio.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4
#define SWIG_POINTER_CLEAR         0x8
#define SWIG_POINTER_RELEASE       (SWIG_POINTER_CLEAR | SWIG_POINTER_DISOWN)

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
/* Runtime errors are < 0 */
#define SWIG_ERROR                 (-1)
/* Errors in range -1 to -99 are in swigerrors.swg (errors for all languages including those not using the runtime) */
/* Errors in range -100 to -199 are language specific errors defined in *errors.swg */
/* Errors < -200 are generic runtime specific errors */
#define SWIG_ERROR_RELEASE_NOT_OWNED (-200)

#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporary objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del object mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  Choose the last
     name. It should be the most specific; a fully resolved name
     but not necessarily with default template parameters expanded. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13


/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Wrapper around PyUnicode_AsUTF8AndSize - call Py_XDECREF on the returned pbytes when finished with the returned string */
SWIGINTERN const char *
SWIG_PyUnicode_AsUTF8AndSize(PyObject *str, Py_ssize_t *psize, PyObject **pbytes)
{
#if PY_VERSION_HEX >= 0x03030000
# if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030A0000
  *pbytes = NULL;
  return PyUnicode_AsUTF8AndSize(str, psize);
# else
   *pbytes = PyUnicode_AsUTF8String(str);
   const char *chars = *pbytes ? PyBytes_AsString(*pbytes) : NULL;
   if (chars && psize)
     *psize = PyBytes_Size(*pbytes);
  return chars;
# endif
#else
  char *chars = NULL;
  *pbytes = NULL;
  PyString_AsStringAndSize(str, &chars, psize);
  return chars;
#endif
}

SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* SWIGPY_USE_CAPSULE is no longer used within SWIG itself, but some user interface files check for it. */
# define SWIGPY_USE_CAPSULE
#ifdef SWIGPYTHON_BUILTIN
# define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule_builtin" SWIG_TYPE_TABLE_NAME
#else
# define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule" SWIG_TYPE_TABLE_NAME
#endif
# define SWIGPY_CAPSULE_NAME ("swig_runtime_data" SWIG_RUNTIME_VERSION "." SWIGPY_CAPSULE_ATTR_NAME)

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

#ifdef Py_LIMITED_API
# define PyTuple_GET_ITEM PyTuple_GetItem
/* Note that PyTuple_SetItem() has different semantics from PyTuple_SET_ITEM as it decref's the original tuple item, so in general they cannot be used
  interchangeably. However in SWIG-generated code PyTuple_SET_ITEM is only used with newly initialized tuples without any items and for them this does work. */
# define PyTuple_SET_ITEM PyTuple_SetItem
# define PyTuple_GET_SIZE PyTuple_Size
# define PyCFunction_GET_FLAGS PyCFunction_GetFlags
# define PyCFunction_GET_FUNCTION PyCFunction_GetFunction
# define PyCFunction_GET_SELF PyCFunction_GetSelf
# define PyList_GET_ITEM PyList_GetItem
# define PyList_SET_ITEM PyList_SetItem
# define PySliceObject PyObject
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred())
    PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    PyObject *bytes = NULL;
    const char *tmp = SWIG_PyUnicode_AsUTF8AndSize(old_str, NULL, &bytes);
    PyErr_Clear();
    Py_XINCREF(type);
    if (tmp)
      PyErr_Format(type, "%s %s", tmp, mesg);
    else
      PyErr_Format(type, "%s", mesg);
    Py_XDECREF(bytes);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

SWIGRUNTIME int
SWIG_Python_TypeErrorOccurred(PyObject *obj)
{
  PyObject *error;
  if (obj)
    return 0;
  error = PyErr_Occurred();
  return error && PyErr_GivenExceptionMatches(error, PyExc_TypeError);
}

SWIGRUNTIME void
SWIG_Python_RaiseOrModifyTypeError(const char *message)
{
  if (SWIG_Python_TypeErrorOccurred(NULL)) {
    /* Use existing TypeError to preserve stacktrace and enhance with given message */
    PyObject *newvalue;
    PyObject *type = NULL, *value = NULL, *traceback = NULL;
    PyErr_Fetch(&type, &value, &traceback);
#if PY_VERSION_HEX >= 0x03000000
    newvalue = PyUnicode_FromFormat("%S\nAdditional information:\n%s", value, message);
#else
    newvalue = PyString_FromFormat("%s\nAdditional information:\n%s", PyString_AsString(value), message);
#endif
    if (newvalue) {
      Py_XDECREF(value);
      PyErr_Restore(type, newvalue, traceback);
    } else {
      PyErr_Restore(type, value, traceback);
    }
  } else {
    /* Raise TypeError using given message */
    PyErr_SetString(PyExc_TypeError, message);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    define SWIG_PYTHON_USE_GIL
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      if PY_VERSION_HEX < 0x03070000
#        define SWIG_PYTHON_INITIALIZE_THREADS PyEval_InitThreads()
#      else
#        define SWIG_PYTHON_INITIALIZE_THREADS
#      endif
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { status = false; PyEval_RestoreThread(save); }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  const char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

#if PY_VERSION_HEX < 0x02070000 /* 2.7.0 */
# error "This version of SWIG only supports Python >= 2.7"
#endif

#if PY_VERSION_HEX >= 0x03000000 && PY_VERSION_HEX < 0x03030000
# error "This version of SWIG only supports Python 3 >= 3.3"
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      if (result) {
        PyList_SET_ITEM(result, 0, o2);
      } else {
        Py_DECREF(obj);
        return o2;
      }
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

SWIGINTERN int
SWIG_Python_CheckNoKeywords(PyObject *kwargs, const char *name) {
  int no_kwargs = 1;
  if (kwargs) {
    assert(PyDict_Check(kwargs));
    if (PyDict_Size(kwargs) > 0) {
      PyErr_Format(PyExc_TypeError, "%s() does not take keyword arguments", name);
      no_kwargs = 0;
    }
  }
  return no_kwargs;
}

/* A functor is a function object with one single object argument */
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
 
/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */
 
typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

SWIGINTERN PyObject *
swig_varlink_repr(PyObject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_InternFromString("<Swig global variables>");
#else
  return PyString_FromString("<Swig global variables>");
#endif
}

SWIGINTERN PyObject *
swig_varlink_str(PyObject *o) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
#if PY_VERSION_HEX >= 0x03000000
  PyObject *str = PyUnicode_InternFromString("(");
  PyObject *tail;
  PyObject *joined;
  swig_globalvar *var;
  for (var = v->vars; var; var=var->next) {
    tail = PyUnicode_FromString(var->name);
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
    if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
    }
  }
  tail = PyUnicode_InternFromString(")");
  joined = PyUnicode_Concat(str, tail);
  Py_DecRef(str);
  Py_DecRef(tail);
  str = joined;
#else
  PyObject *str = PyString_FromString("(");
  swig_globalvar *var;
  for (var = v->vars; var; var=var->next) {
    PyString_ConcatAndDel(&str,PyString_FromString(var->name));
    if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
  }
  PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
  return str;
}

SWIGINTERN void
swig_varlink_dealloc(PyObject *o) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  swig_globalvar *var = v->vars;
  while (var) {
    swig_globalvar *n = var->next;
    free(var->name);
    free(var);
    var = n;
  }
}

SWIGINTERN PyObject *
swig_varlink_getattr(PyObject *o, char *n) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  PyObject *res = NULL;
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      res = (*var->get_attr)();
      break;
    }
    var = var->next;
  }
  if (res == NULL && !PyErr_Occurred()) {
    PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
  }
  return res;
}

SWIGINTERN int
swig_varlink_setattr(PyObject *o, char *n, PyObject *p) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  int res = 1;
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      res = (*var->set_attr)(p);
      break;
    }
    var = var->next;
  }
  if (res == 1 && !PyErr_Occurred()) {
    PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
  }
  return res;
}

SWIGINTERN PyTypeObject*
swig_varlink_type(void) {
  static char varlink__doc__[] = "Swig var link object";
#ifndef Py_LIMITED_API
  static PyTypeObject varlink_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                  /* ob_size */
#endif
      "swigvarlink",                      /* tp_name */
      sizeof(swig_varlinkobject),         /* tp_basicsize */
      0,                                  /* tp_itemsize */
      (destructor) swig_varlink_dealloc,  /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                       /*tp_print*/
#else
      (Py_ssize_t)0,                      /*tp_vectorcall_offset*/
#endif
      (getattrfunc) swig_varlink_getattr, /* tp_getattr */
      (setattrfunc) swig_varlink_setattr, /* tp_setattr */
      0,                                  /* tp_compare */
      (reprfunc) swig_varlink_repr,       /* tp_repr */
      0,                                  /* tp_as_number */
      0,                                  /* tp_as_sequence */
      0,                                  /* tp_as_mapping */
      0,                                  /* tp_hash */
      0,                                  /* tp_call */
      (reprfunc) swig_varlink_str,        /* tp_str */
      0,                                  /* tp_getattro */
      0,                                  /* tp_setattro */
      0,                                  /* tp_as_buffer */
      0,                                  /* tp_flags */
      varlink__doc__,                     /* tp_doc */
      0,                                  /* tp_traverse */
      0,                                  /* tp_clear */
      0,                                  /* tp_richcompare */
      0,                                  /* tp_weaklistoffset */
      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
      0,                                  /* tp_del */
      0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                  /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                  /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                  /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030C0000
      0,                                  /* tp_watched */
#endif
#ifdef COUNT_ALLOCS
      0,                                  /* tp_allocs */
      0,                                  /* tp_frees */
      0,                                  /* tp_maxalloc */
      0,                                  /* tp_prev */
      0                                   /* tp_next */
#endif
    };
    varlink_type = tmp;
    type_init = 1;
    if (PyType_Ready(&varlink_type) < 0)
      return NULL;
  }
  return &varlink_type;
#else
  PyType_Slot slots[] = {
    { Py_tp_dealloc, (void *)swig_varlink_dealloc },
    { Py_tp_repr, (void *)swig_varlink_repr },
    { Py_tp_getattr, (void *)swig_varlink_getattr },
    { Py_tp_setattr, (void *)swig_varlink_setattr },
    { Py_tp_str, (void *)swig_varlink_str },
    { Py_tp_doc, (void *)varlink__doc__ },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "swigvarlink",
    sizeof(swig_varlinkobject),
    0,
    Py_TPFLAGS_DEFAULT,
    slots
  };
  return (PyTypeObject *)PyType_FromSpec(&spec);
#endif
}

/* Create a variable linking object for use later */
SWIGINTERN PyObject *
SWIG_Python_newvarlink(void) {
  swig_varlinkobject *result = PyObject_New(swig_varlinkobject, swig_varlink_type());
  if (result) {
    result->vars = 0;
  }
  return ((PyObject*) result);
}

SWIGINTERN void 
SWIG_Python_addvarlink(PyObject *p, const char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v = (swig_varlinkobject *) p;
  swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  if (gv) {
    size_t size = strlen(name)+1;
    gv->name = (char *)malloc(size);
    if (gv->name) {
      memcpy(gv->name, name, size);
      gv->get_attr = get_attr;
      gv->set_attr = set_attr;
      gv->next = v->vars;
    }
  }
  v->vars = gv;
}


static PyObject *Swig_Globals_global = NULL;
  
SWIGINTERN PyObject *
SWIG_globals(void) {
  if (Swig_Globals_global == NULL) {
    Swig_Globals_global = SWIG_newvarlink();
  }
  return Swig_Globals_global;
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  int fail = data ? data->implicitconv : 0;
  if (fail)
    PyErr_SetString(PyExc_TypeError, "Implicit conversion is prohibited for explicit constructors.");
  return fail;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      Py_INCREF(obj);
      data->newargs = obj;
    } else {
      data->newraw = PyObject_GetAttrString(data->klass, "__new__");
      if (data->newraw) {
        data->newargs = PyTuple_New(1);
        if (data->newargs) {
          Py_INCREF(obj);
          PyTuple_SET_ITEM(data->newargs, 0, obj);
        } else {
          Py_DECREF(data->newraw);
          Py_DECREF(data->klass);
          free(data);
          return 0;
        }
      } else {
        Py_INCREF(obj);
        data->newargs = obj;
      }
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, "__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      data->delargs = !(PyCFunction_GET_FLAGS(data->destroy) & METH_O);
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data)
{
  Py_XDECREF(data->klass);
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
  free(data);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_XINCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    PyObject *val = SwigPyObject_long(v);
    if (val) {
      PyObject *ofmt;
      PyTuple_SET_ITEM(args, 0, val);
      ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
        res = PyUnicode_Format(ofmt,args);
#else
        res = PyString_Format(ofmt,args);
#endif
        Py_DECREF(ofmt);
      }
    }
    Py_DECREF(args);
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_repr(SwigPyObject *v)
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (repr && v->next) {
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
    if (nrep) {
# if PY_VERSION_HEX >= 0x03000000
      PyObject *joined = PyUnicode_Concat(repr, nrep);
      Py_DecRef(repr);
      Py_DecRef(nrep);
      repr = joined;
# else
      PyString_ConcatAndDel(&repr,nrep);
# endif
    } else {
      Py_DecRef(repr);
      repr = NULL;
    }
  }
  return repr;
}

/* We need a version taking two PyObject* parameters so it's a valid
 * PyCFunction to use in swigobject_methods[]. */
SWIGRUNTIME PyObject *
SwigPyObject_repr2(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  return SwigPyObject_repr((SwigPyObject*)v);
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res = NULL;
  if (!PyErr_Occurred()) {
    if (op != Py_EQ && op != Py_NE) {
      Py_INCREF(Py_NotImplemented);
      return Py_NotImplemented;
    }
    res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  }
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
  PyTypeObject *target_tp = SwigPyObject_type();
  PyTypeObject *op_type = Py_TYPE(op);
#ifdef SWIGPYTHON_BUILTIN
  if (PyType_IsSubtype(op_type, target_tp))
    return 1;
  return (strcmp(op_type->tp_name, "SwigPyObject") == 0);
#else
  if (op_type == target_tp)
    return 1;
# ifdef Py_LIMITED_API
  int cmp;
  PyObject *tp_name = PyObject_GetAttrString((PyObject *)op_type, "__name__");
  if (!tp_name)
    return 0;
  cmp = PyUnicode_CompareWithASCIIString(tp_name, "SwigPyObject");
  Py_DECREF(tp_name);
  return cmp == 0;
# else
  return (strcmp(op_type->tp_name, "SwigPyObject") == 0);
# endif
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

static PyObject* Swig_Capsule_global = NULL;

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *type = NULL, *value = NULL, *traceback = NULL;
      PyErr_Fetch(&type, &value, &traceback);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        if (tmp) {
          res = SWIG_Python_CallFunctor(destroy, tmp);
        } else {
          res = 0;
        }
        Py_XDECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(type, value, traceback);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
    Py_XDECREF(Swig_Capsule_global);
  }
  Py_XDECREF(next);
#ifdef SWIGPYTHON_BUILTIN
  Py_XDECREF(sobj->dict);
#endif
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  ((SwigPyObject *)next)->next = sobj->next;
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) {
    return NULL;
  } else {
    SwigPyObject *sobj = (SwigPyObject *)v;
    PyObject *obj = PyBool_FromLong(sobj->own);
    if (val) {
      if (PyObject_IsTrue(val)) {
        Py_DECREF(SwigPyObject_acquire(v,args));
      } else {
        Py_DECREF(SwigPyObject_disown(v,args));
      }
    } 
    return obj;
  }
}

static PyMethodDef
swigobject_methods[] = {
  {"disown",  SwigPyObject_disown,  METH_NOARGS,  "releases ownership of the pointer"},
  {"acquire", SwigPyObject_acquire, METH_NOARGS,  "acquires ownership of the pointer"},
  {"own",     SwigPyObject_own,     METH_VARARGS, "returns/sets ownership of the pointer"},
  {"append",  SwigPyObject_append,  METH_O,       "appends another 'this' object"},
  {"next",    SwigPyObject_next,    METH_NOARGS,  "returns the next 'this' object"},
  {"__repr__",SwigPyObject_repr2,   METH_NOARGS,  "returns object representation"},
  {0, 0, 0, 0}  
};

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";
#ifndef Py_LIMITED_API
  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#else
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyObject",                       /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                         /*tp_print*/
#else
      (Py_ssize_t)0,                        /*tp_vectorcall_offset*/
#endif
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030C0000
      0,                                    /* tp_watched */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpyobject_type) != 0)
      return NULL;
  }
  return &swigpyobject_type;
#else
  PyType_Slot slots[] = {
    { Py_tp_dealloc, (void *)SwigPyObject_dealloc },
    { Py_tp_repr, (void *)SwigPyObject_repr },
    { Py_tp_getattro, (void *)PyObject_GenericGetAttr },
    { Py_tp_doc, (void *)swigobject_doc },
    { Py_tp_richcompare, (void *)SwigPyObject_richcompare },
    { Py_tp_methods, (void *)swigobject_methods },
    { Py_nb_int, (void *)SwigPyObject_long },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "SwigPyObject",
    sizeof(SwigPyObject),
    0,
    Py_TPFLAGS_DEFAULT,
    slots
  };
  return (PyTypeObject *)PyType_FromSpec(&spec);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_New(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
    sobj->dict = 0;
#endif
    if (own == SWIG_POINTER_OWN) {
      /* Obtain a reference to the Python capsule wrapping the module information, so that the
       * module information is correctly destroyed after all SWIG python objects have been freed
       * by the GC (and corresponding destructors invoked) */
      Py_XINCREF(Swig_Capsule_global);
    }
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((const char *)v->pack, (const char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  PyTypeObject* op_type = Py_TYPE(op);
  if (op_type == SwigPyPacked_TypeOnce())
    return 1;
#ifdef Py_LIMITED_API
  int cmp;
  PyObject *tp_name = PyObject_GetAttrString((PyObject *)op_type, "__name__");
  if (!tp_name)
    return 0;
  cmp = PyUnicode_CompareWithASCIIString(tp_name, "SwigPyPacked");
  Py_DECREF(tp_name);
  return cmp == 0;
#else
  return (strcmp(op_type->tp_name, "SwigPyPacked") == 0);
#endif
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
#ifndef Py_LIMITED_API
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyPacked",                       /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                         /*tp_print*/
#else
      (Py_ssize_t)0,                        /*tp_vectorcall_offset*/
#endif
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030C0000
      0,                                    /* tp_watched */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpypacked_type) != 0)
      return NULL;
  }
  return &swigpypacked_type;
#else
  PyType_Slot slots[] = {
    { Py_tp_dealloc, (void *)SwigPyPacked_dealloc },
    { Py_tp_repr, (void *)SwigPyPacked_repr },
    { Py_tp_str, (void *)SwigPyPacked_str },
    { Py_tp_getattro, (void *)PyObject_GenericGetAttr },
    { Py_tp_doc, (void *)swigpacked_doc },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "SwigPyPacked",
    sizeof(SwigPyPacked),
    0,
    Py_TPFLAGS_DEFAULT,
    slots
  };
  return (PyTypeObject *)PyType_FromSpec(&spec);
#endif
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_New(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

static PyObject *Swig_This_global = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (Swig_This_global == NULL)
    Swig_This_global = SWIG_Python_str_FromChar("this");
  return Swig_This_global;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (((flags & SWIG_POINTER_RELEASE) == SWIG_POINTER_RELEASE) && !sobj->own) {
      res = SWIG_ERROR_RELEASE_NOT_OWNED;
    } else {
      if (own)
        *own = *own | sobj->own;
      if (flags & SWIG_POINTER_DISOWN) {
        sobj->own = 0;
      }
      if (flags & SWIG_POINTER_CLEAR) {
        sobj->ptr = 0;
      }
      res = SWIG_OK;
    }
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
      if (!SWIG_IsOK(res) && obj == Py_None) {
        if (ptr)
          *ptr = 0;
        if (PyErr_Occurred())
          PyErr_Clear();
        res = SWIG_OK;
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    swig_cast_info *tc;

    /* here we get the method pointer for callbacks */
#ifndef Py_LIMITED_API
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
#else
    PyObject* pystr_doc = PyObject_GetAttrString(obj, "__doc__");
    PyObject *bytes = NULL;
    const char *doc = pystr_doc ? SWIG_PyUnicode_AsUTF8AndSize(pystr_doc, NULL, &bytes) : 0;
#endif
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
#ifdef Py_LIMITED_API
    Py_XDECREF(bytes);
    Py_XDECREF(pystr_doc);
#endif
    if (!desc)
      return SWIG_ERROR;
    tc = SWIG_TypeCheck(desc,ty);
    if (tc) {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    } else {
      return SWIG_ERROR;
    }
    return SWIG_OK;
  }
}

/* Convert a packed pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
        PyObject *dict = *dictptr;
        if (dict == NULL) {
          dict = PyDict_New();
          *dictptr = dict;
        }
        if (dict) {
          PyDict_SetItem(dict, SWIG_This(), swig_this);
        } else{
          Py_DECREF(inst);
          inst = 0;
        }
      }
#else
      if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
        Py_DECREF(inst);
        inst = 0;
      }
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *empty_args = PyTuple_New(0);
    if (empty_args) {
      PyObject *empty_kwargs = PyDict_New();
      if (empty_kwargs) {
#ifndef Py_LIMITED_API
        newfunc newfn = ((PyTypeObject *)data->newargs)->tp_new;
#else
        newfunc newfn = (newfunc)PyType_GetSlot((PyTypeObject *)data->newargs, Py_tp_new);
#endif
        inst = newfn((PyTypeObject *)data->newargs, empty_args, empty_kwargs);
        Py_DECREF(empty_kwargs);
        if (inst) {
          if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
            Py_DECREF(inst);
            inst = 0;
          } else {
            PyType_Modified(Py_TYPE(inst));
          }
        }
      }
      Py_DECREF(empty_args);
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
}

SWIGRUNTIME int
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  PyObject **dictptr = _PyObject_GetDictPtr(inst);
  if (dictptr != NULL) {
    PyObject *dict = *dictptr;
    if (dict == NULL) {
      dict = PyDict_New();
      *dictptr = dict;
    }
    if (dict) {
      return PyDict_SetItem(dict, SWIG_This(), swig_this);
    } else{
      return -1;
    }
  }
#endif
  return PyObject_SetAttr(inst, SWIG_This(), swig_this);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      Py_DECREF(SwigPyObject_append((PyObject*) sthis, obj[1]));
    } else {
      if (SWIG_Python_SetSwigThis(obj[0], obj[1]) != 0)
        return NULL;
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
#ifndef Py_LIMITED_API
        allocfunc alloc = clientdata->pytype->tp_alloc;
#else
        allocfunc alloc = (allocfunc)PyType_GetSlot(clientdata->pytype, Py_tp_alloc);
#endif
        PyObject *next_self = alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      if (newobj) {
        newobj->dict = 0;
      }
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

static PyObject *Swig_TypeCache_global = NULL;

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  if (Swig_TypeCache_global == NULL) {
    Swig_TypeCache_global = PyDict_New();
  }
  return Swig_TypeCache_global;
}

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
#ifdef SWIG_LINK_RUNTIME
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
  }
#else
  void *type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
  if (PyErr_Occurred()) {
    PyErr_Clear();
    type_pointer = (void *)0;
  }
#endif
  return (swig_module_info *) type_pointer;
}


static int interpreter_counter = 0; /* how many (sub-)interpreters are using swig_module's types */

SWIGRUNTIME void
SWIG_Python_DestroyModule(PyObject *obj)
{
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
  swig_type_info **types = swig_module->types;
  size_t i;
  if (--interpreter_counter != 0) /* another sub-interpreter may still be using the swig_module's types */
    return;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      ty->clientdata = 0;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  Swig_This_global = NULL;
  Py_DECREF(SWIG_globals());
  Swig_Globals_global = NULL;
  Py_DECREF(SWIG_Python_TypeCache());
  Swig_TypeCache_global = NULL;
  Swig_Capsule_global = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule("swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule("swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    if (PyModule_AddObject(module, SWIGPY_CAPSULE_ATTR_NAME, pointer) == 0) {
      ++interpreter_counter;
      Swig_Capsule_global = pointer;
    } else {
      Py_DECREF(pointer);
    }
  } else {
    Py_XDECREF(pointer);
  }
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
      if (obj) {
        PyDict_SetItem(cache, key, obj);
        Py_DECREF(obj);
      }
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      PyObject *bytes = NULL;
      const char *tmp = SWIG_PyUnicode_AsUTF8AndSize(old_str, NULL, &bytes);
      const char *errmesg = tmp ? tmp : "Invalid error message";
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, errmesg);
      } else {
	PyErr_Format(type, "%s %s", errmesg, mesg);
      }
      Py_XDECREF(bytes);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
#ifndef Py_LIMITED_API
      /* tp_name is not accessible */
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	PyObject *bytes = NULL;
	const char *cstr = str ? SWIG_PyUnicode_AsUTF8AndSize(str, NULL, &bytes) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(bytes);
	Py_XDECREF(str);
	return;
      }
#endif
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) != 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
      if (!encoded_name)
        goto done;
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) do { if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } } while (0) 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Python proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DIRECTOR_PYTHON_HEADER_
#define SWIG_DIRECTOR_PYTHON_HEADER_

#include <string>
#include <iostream>
#include <exception>
#include <vector>
#include <map>

#if defined(SWIG_PYTHON_THREADS)
/*  __THREAD__ is the old macro to activate some thread support */
# if !defined(__THREAD__)
#   define __THREAD__ 1
# endif
#endif

#ifdef __THREAD__
#ifndef Py_LIMITED_API
# include "pythread.h"
#else
# if defined(_WIN32)
#   include <windows.h>
# else
#   include <pthread.h>
# endif
#endif
#endif

/*
  Use -DSWIG_PYTHON_DIRECTOR_NO_VTABLE if you don't want to generate a 'virtual
  table', and avoid multiple GetAttr calls to retrieve the python
  methods.
*/

#ifndef SWIG_PYTHON_DIRECTOR_NO_VTABLE
#ifndef SWIG_PYTHON_DIRECTOR_VTABLE
#define SWIG_PYTHON_DIRECTOR_VTABLE
#endif
#endif



/*
  Use -DSWIG_DIRECTOR_NO_UEH if you prefer to avoid the use of the
  Undefined Exception Handler provided by swig.
*/
#ifndef SWIG_DIRECTOR_NO_UEH
#ifndef SWIG_DIRECTOR_UEH
#define SWIG_DIRECTOR_UEH
#endif
#endif


/*
  Use -DSWIG_DIRECTOR_NORTTI if you prefer to avoid the use of the
  native C++ RTTI and dynamic_cast<>. But be aware that directors
  could stop working when using this option.
*/
#ifdef SWIG_DIRECTOR_NORTTI
/*
   When we don't use the native C++ RTTI, we implement a minimal one
   only for Directors.
*/
# ifndef SWIG_DIRECTOR_RTDIR
# define SWIG_DIRECTOR_RTDIR

namespace Swig {
  class Director;
  SWIGINTERN std::map<void *, Director *>& get_rtdir_map() {
    static std::map<void *, Director *> rtdir_map;
    return rtdir_map;
  }

  SWIGINTERNINLINE void set_rtdir(void *vptr, Director *rtdir) {
    get_rtdir_map()[vptr] = rtdir;
  }

  SWIGINTERNINLINE Director *get_rtdir(void *vptr) {
    std::map<void *, Director *>::const_iterator pos = get_rtdir_map().find(vptr);
    Director *rtdir = (pos != get_rtdir_map().end()) ? pos->second : 0;
    return rtdir;
  }
}
# endif /* SWIG_DIRECTOR_RTDIR */

# define SWIG_DIRECTOR_CAST(ARG) Swig::get_rtdir(static_cast<void *>(ARG))
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2) Swig::set_rtdir(static_cast<void *>(ARG1), ARG2)

#else

# define SWIG_DIRECTOR_CAST(ARG) dynamic_cast<Swig::Director *>(ARG)
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2)

#endif /* SWIG_DIRECTOR_NORTTI */

extern "C" {
  struct swig_type_info;
}

namespace Swig {

  /* memory handler */
  struct GCItem {
    virtual ~GCItem() {}

    virtual int get_own() const {
      return 0;
    }
  };

  struct GCItem_var {
    GCItem_var(GCItem *item = 0) : _item(item) {
    }

    GCItem_var& operator=(GCItem *item) {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() {
      delete _item;
    }

    GCItem * operator->() const {
      return _item;
    }

  private:
    GCItem *_item;
  };

  struct GCItem_Object : GCItem {
    GCItem_Object(int own) : _own(own) {
    }

    virtual ~GCItem_Object() {
    }

    int get_own() const {
      return _own;
    }

  private:
    int _own;
  };

  template <typename Type>
  struct GCItem_T : GCItem {
    GCItem_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCItem_T() {
      delete _ptr;
    }

  private:
    Type *_ptr;
  };

  template <typename Type>
  struct GCArray_T : GCItem {
    GCArray_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCArray_T() {
      delete[] _ptr;
    }

  private:
    Type *_ptr;
  };

  /* base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;
  public:
    DirectorException(PyObject *error, const char *hdr ="", const char *msg ="") : swig_msg(hdr) {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (msg[0]) {
        swig_msg += " ";
        swig_msg += msg;
      }
      if (!PyErr_Occurred()) {
        PyErr_SetString(error, swig_msg.c_str());
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
    }

    virtual ~DirectorException() throw() {
    }

    /* Deprecated, use what() instead */
    const char *getMessage() const {
      return what();
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorException(error, msg);
    }

    static void raise(const char *msg) {
      raise(PyExc_RuntimeError, msg);
    }
  };

  /* type mismatch in the return value from a python method call */
  class DirectorTypeMismatchException : public DirectorException {
  public:
    DirectorTypeMismatchException(PyObject *error, const char *msg="")
      : DirectorException(error, "SWIG director type mismatch", msg) {
    }

    DirectorTypeMismatchException(const char *msg="")
      : DirectorException(PyExc_TypeError, "SWIG director type mismatch", msg) {
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorTypeMismatchException(error, msg);
    }

    static void raise(const char *msg) {
      throw DirectorTypeMismatchException(msg);
    }
  };

  /* any python exception that occurs during a director method call */
  class DirectorMethodException : public DirectorException {
  public:
    DirectorMethodException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director method error.", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorMethodException(msg);
    }
  };

  /* attempt to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director pure virtual method called", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };


#ifdef __THREAD__
#ifndef Py_LIMITED_API
   class Mutex
   {
   public:
       Mutex() {
           mutex_ = PyThread_allocate_lock();
       }

       ~Mutex() {
           PyThread_release_lock(mutex_);
       }

   private:
       void Lock() {
           PyThread_acquire_lock(mutex_, WAIT_LOCK);
       }

       void Unlock() {
           PyThread_free_lock(mutex_);
       }

       PyThread_type_lock mutex_;

       friend class Guard;
   };
#elif defined(_WIN32)
    class Mutex : private CRITICAL_SECTION {
    public:
        Mutex() {
            InitializeCriticalSection(this);
        }

        ~Mutex() {
            DeleteCriticalSection(this);
        }

    private:
        void Lock() {
            EnterCriticalSection(this);
        }

        void Unlock() {
            LeaveCriticalSection(this);
        }

        friend class Guard;
    };
#else
    class Mutex {
    public:
        Mutex() {
            pthread_mutex_init(&mutex_, NULL);
        }

        ~Mutex() {
            pthread_mutex_destroy(&mutex_);
        }

    private:
        void Lock() {
            pthread_mutex_lock(&mutex_);
        }

        void Unlock() {
            pthread_mutex_unlock(&mutex_);
        }

        friend class Guard;

        pthread_mutex_t mutex_;
    };
#endif
  class Guard {
    Mutex &mutex_;

  public:
    Guard(Mutex & mutex) : mutex_(mutex) {
      mutex_.Lock();
    }

    ~Guard() {
      mutex_.Unlock();
    }
  };
# define SWIG_GUARD(mutex) Guard _guard(mutex)
#else
# define SWIG_GUARD(mutex)
#endif

  /* director base class */
  class Director {
  private:
    /* pointer to the wrapped python object */
    PyObject *swig_self;
    /* flag indicating whether the object is owned by python or c++ */
    mutable bool swig_disown_flag;

    /* decrement the reference count of the wrapped python object */
    void swig_decref() const {
      if (swig_disown_flag) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_DECREF(swig_self);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }

  public:
    /* wrap a python object. */
    Director(PyObject *self) : swig_self(self), swig_disown_flag(false) {
    }

    /* discard our reference at destruction */
    virtual ~Director() {
      swig_decref();
    }

    /* return a pointer to the wrapped python object */
    PyObject *swig_get_self() const {
      return swig_self;
    }

    /* acquire ownership of the wrapped python object (the sense of "disown" is from python) */
    void swig_disown() const {
      if (!swig_disown_flag) {
        swig_disown_flag=true;
        swig_incref();
      }
    }

    /* increase the reference count of the wrapped python object */
    void swig_incref() const {
      if (swig_disown_flag) {
        Py_INCREF(swig_self);
      }
    }

    /* methods to implement pseudo protected director members */
    virtual bool swig_get_inner(const char * /* swig_protected_method_name */) const {
      return true;
    }

    virtual void swig_set_inner(const char * /* swig_protected_method_name */, bool /* swig_val */) const {
    }

  /* ownership management */
  private:
    typedef std::map<void *, GCItem_var> swig_ownership_map;
    mutable swig_ownership_map swig_owner;
#ifdef __THREAD__
    static Mutex swig_mutex_own;
#endif

  public:
    template <typename Type>
    void swig_acquire_ownership_array(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCArray_T<Type>(vptr);
      }
    }

    template <typename Type>
    void swig_acquire_ownership(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_T<Type>(vptr);
      }
    }

    void swig_acquire_ownership_obj(void *vptr, int own) const {
      if (vptr && own) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_Object(own);
      }
    }

    int swig_release_ownership(void *vptr) const {
      int own = 0;
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_ownership_map::iterator iter = swig_owner.find(vptr);
        if (iter != swig_owner.end()) {
          own = iter->second->get_own();
          swig_owner.erase(iter);
        }
      }
      return own;
    }

    template <typename Type>
    static PyObject *swig_pyobj_disown(PyObject *pyobj, PyObject *SWIGUNUSEDPARM(args)) {
      SwigPyObject *sobj = (SwigPyObject *)pyobj;
      sobj->own = 0;
      Director *d = SWIG_DIRECTOR_CAST(reinterpret_cast<Type *>(sobj->ptr));
      if (d)
        d->swig_disown();
      return PyWeakref_NewProxy(pyobj, NULL);
    }
  };

#ifdef __THREAD__
  Mutex Director::swig_mutex_own;
#endif
}

#endif

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t swig_types[0]
#define SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t swig_types[1]
#define SWIGTYPE_p_Eigen__TripletT_StagReal_StagInt_t swig_types[2]
#define SWIGTYPE_p_Spectra__SparseSymMatProdT_StagReal_Eigen__Upper_Eigen__ColMajor_StagInt_t swig_types[3]
#define SWIGTYPE_p_Spectra__SparseSymShiftSolveT_StagReal_Eigen__Upper_Eigen__ColMajor_StagInt_t swig_types[4]
#define SWIGTYPE_p_char swig_types[5]
#define SWIGTYPE_p_double swig_types[6]
#define SWIGTYPE_p_int64_t swig_types[7]
#define SWIGTYPE_p_size_t swig_types[8]
#define SWIGTYPE_p_stag__AdjacencyListLocalGraph swig_types[9]
#define SWIGTYPE_p_stag__CKNSGaussianKDE swig_types[10]
#define SWIGTYPE_p_stag__CKNSGaussianKDEHashUnit swig_types[11]
#define SWIGTYPE_p_stag__DataPoint swig_types[12]
#define SWIGTYPE_p_stag__E2LSH swig_types[13]
#define SWIGTYPE_p_stag__ExactGaussianKDE swig_types[14]
#define SWIGTYPE_p_stag__Graph swig_types[15]
#define SWIGTYPE_p_stag__LSHFunction swig_types[16]
#define SWIGTYPE_p_stag__LocalGraph swig_types[17]
#define SWIGTYPE_p_stag__MultiLSHFunction swig_types[18]
#define SWIGTYPE_p_stag__edge swig_types[19]
#define SWIGTYPE_p_std__istream swig_types[20]
#define SWIGTYPE_p_std__mt19937_64 swig_types[21]
#define SWIGTYPE_p_std__ofstream swig_types[22]
#define SWIGTYPE_p_std__string swig_types[23]
#define SWIGTYPE_p_std__tupleT_Eigen__VectorXd_Eigen__MatrixXd_t swig_types[24]
#define SWIGTYPE_p_std__tupleT_SprsMat_SprsMat_t swig_types[25]
#define SWIGTYPE_p_std__tupleT_StagInt_StagInt_t swig_types[26]
#define SWIGTYPE_p_std__vectorT_double_t swig_types[27]
#define SWIGTYPE_p_std__vectorT_int64_t_t swig_types[28]
#define SWIGTYPE_p_std__vectorT_stag__edge_t swig_types[29]
static swig_type_info *swig_types[31];
static swig_module_info swig_module = {swig_types, 30, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#ifdef SWIG_TypeQuery
# undef SWIG_TypeQuery
#endif
#define SWIG_TypeQuery SWIG_Python_TypeQuery

/*-----------------------------------------------
              @(target):= _stag_internal.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__stag_internal

#else
#  define SWIG_init    init_stag_internal

#endif
#define SWIG_name    "_stag_internal"

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


  #define SWIG_FILE_WITH_INIT
  #include <Eigen/Core>


#ifndef SWIG_FILE_WITH_INIT
#define NO_IMPORT_ARRAY
#endif
#include "stdio.h"
#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
#include <numpy/arrayobject.h>


    #include "stag_lib/stag.h"
    #include "stag_lib/graph.h"
    #include "stag_lib/utility.h"
    #include "stag_lib/cluster.h"
    #include "stag_lib/graphio.h"
    #include "stag_lib/random.h"
    #include "stag_lib/spectrum.h"
    #include "stag_lib/data.h"
    #include "stag_lib/definitions.h"
    #include "stag_lib/lsh.h"
    #include "stag_lib/kde.h"


#include <tuple>
#include <utility>

SWIGINTERN SprsMat const &std_tuple_Sl_SprsMat_Sc_SprsMat_Sg__get0(std::tuple< SprsMat,SprsMat > const *self){ return std::get<0>(*self); }
SWIGINTERN SprsMat const &std_tuple_Sl_SprsMat_Sc_SprsMat_Sg__get1(std::tuple< SprsMat,SprsMat > const *self){ return std::get<1>(*self); }
SWIGINTERN void std_tuple_Sl_SprsMat_Sc_SprsMat_Sg__set0(std::tuple< SprsMat,SprsMat > *self,SprsMat const &val){ std::get<0>(*self) = val; }
SWIGINTERN void std_tuple_Sl_SprsMat_Sc_SprsMat_Sg__set1(std::tuple< SprsMat,SprsMat > *self,SprsMat const &val){ std::get<1>(*self) = val; }
SWIGINTERN size_t std_tuple_Sl_SprsMat_Sc_SprsMat_Sg____len__(std::tuple< SprsMat,SprsMat > const *self){ return std::tuple_size<std::decay_t<decltype(*self)>>{}; }

  #define SWIG_From_long   PyInt_FromLong 


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value));
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}

SWIGINTERN StagInt const &std_tuple_Sl_StagInt_Sc_StagInt_Sg__get0(std::tuple< StagInt,StagInt > const *self){ return std::get<0>(*self); }
SWIGINTERN StagInt const &std_tuple_Sl_StagInt_Sc_StagInt_Sg__get1(std::tuple< StagInt,StagInt > const *self){ return std::get<1>(*self); }
SWIGINTERN void std_tuple_Sl_StagInt_Sc_StagInt_Sg__set0(std::tuple< StagInt,StagInt > *self,StagInt const &val){ std::get<0>(*self) = val; }
SWIGINTERN void std_tuple_Sl_StagInt_Sc_StagInt_Sg__set1(std::tuple< StagInt,StagInt > *self,StagInt const &val){ std::get<1>(*self) = val; }
SWIGINTERN size_t std_tuple_Sl_StagInt_Sc_StagInt_Sg____len__(std::tuple< StagInt,StagInt > const *self){ return std::tuple_size<std::decay_t<decltype(*self)>>{}; }

#if NPY_API_VERSION < 0x00000007
#define NPY_ARRAY_DEFAULT NPY_DEFAULT
#define NPY_ARRAY_FARRAY  NPY_FARRAY
#define NPY_FORTRANORDER  NPY_FORTRAN
#endif


/* Macros to extract array attributes.
 */
#if NPY_API_VERSION < 0x00000007
#define is_array(a)            ((a) && PyArray_Check((PyArrayObject*)a))
#define array_type(a)          (int)(PyArray_TYPE((PyArrayObject*)a))
#define array_numdims(a)       (((PyArrayObject*)a)->nd)
#define array_dimensions(a)    (((PyArrayObject*)a)->dimensions)
#define array_size(a,i)        (((PyArrayObject*)a)->dimensions[i])
#define array_strides(a)       (((PyArrayObject*)a)->strides)
#define array_stride(a,i)      (((PyArrayObject*)a)->strides[i])
#define array_data(a)          (((PyArrayObject*)a)->data)
#define array_descr(a)         (((PyArrayObject*)a)->descr)
#define array_flags(a)         (((PyArrayObject*)a)->flags)
#define array_enableflags(a,f) (((PyArrayObject*)a)->flags) = f
#else
#define is_array(a)            ((a) && PyArray_Check(a))
#define array_type(a)          PyArray_TYPE((PyArrayObject*)a)
#define array_numdims(a)       PyArray_NDIM((PyArrayObject*)a)
#define array_dimensions(a)    PyArray_DIMS((PyArrayObject*)a)
#define array_strides(a)       PyArray_STRIDES((PyArrayObject*)a)
#define array_stride(a,i)      PyArray_STRIDE((PyArrayObject*)a,i)
#define array_size(a,i)        PyArray_DIM((PyArrayObject*)a,i)
#define array_data(a)          PyArray_DATA((PyArrayObject*)a)
#define array_descr(a)         PyArray_DESCR((PyArrayObject*)a)
#define array_flags(a)         PyArray_FLAGS((PyArrayObject*)a)
#define array_enableflags(a,f) PyArray_ENABLEFLAGS((PyArrayObject*)a,f)
#endif
#define array_is_contiguous(a) (PyArray_ISCONTIGUOUS((PyArrayObject*)a))
#define array_is_native(a)     (PyArray_ISNOTSWAPPED((PyArrayObject*)a))
#define array_is_fortran(a)    (PyArray_ISFORTRAN((PyArrayObject*)a))


  /* Given a PyObject, return a string describing its type.
   */
  const char* pytype_string(PyObject* py_obj)
  {
    if (py_obj == NULL          ) return "C NULL value";
    if (py_obj == Py_None       ) return "Python None" ;
    if (PyCallable_Check(py_obj)) return "callable"    ;
    if (PyString_Check(  py_obj)) return "string"      ;
    if (PyInt_Check(     py_obj)) return "int"         ;
    if (PyFloat_Check(   py_obj)) return "float"       ;
    if (PyDict_Check(    py_obj)) return "dict"        ;
    if (PyList_Check(    py_obj)) return "list"        ;
    if (PyTuple_Check(   py_obj)) return "tuple"       ;
#if PY_MAJOR_VERSION < 3
    if (PyFile_Check(    py_obj)) return "file"        ;
    if (PyModule_Check(  py_obj)) return "module"      ;
    if (PyInstance_Check(py_obj)) return "instance"    ;
#endif

    return "unkown type";
  }

  /* Given a NumPy typecode, return a string describing the type.
   */
  const char* typecode_string(int typecode)
  {
    static const char* type_names[25] = {"bool",
                                         "byte",
                                         "unsigned byte",
                                         "short",
                                         "unsigned short",
                                         "int",
                                         "unsigned int",
                                         "long",
                                         "unsigned long",
                                         "long long",
                                         "unsigned long long",
                                         "float",
                                         "double",
                                         "long double",
                                         "complex float",
                                         "complex double",
                                         "complex long double",
                                         "object",
                                         "string",
                                         "unicode",
                                         "void",
                                         "ntypes",
                                         "notype",
                                         "char",
                                         "unknown"};
    return typecode < 24 ? type_names[typecode] : type_names[24];
  }

  /* Make sure input has correct numpy type.  This now just calls
     PyArray_EquivTypenums().
   */
  int type_match(int actual_type,
                 int desired_type)
  {
    return PyArray_EquivTypenums(actual_type, desired_type);
  }

#ifdef SWIGPY_USE_CAPSULE
  void free_cap(PyObject * cap)
  {
    void* array = (void*) PyCapsule_GetPointer(cap,SWIGPY_CAPSULE_NAME);
    if (array != NULL) free(array);
  }
#endif




  /* Given a PyObject pointer, cast it to a PyArrayObject pointer if
   * legal.  If not, set the python error string appropriately and
   * return NULL.
   */
  PyArrayObject* obj_to_array_no_conversion(PyObject* input,
                                            int        typecode)
  {
    PyArrayObject* ary = NULL;
    if (is_array(input) && (typecode == NPY_NOTYPE ||
                            PyArray_EquivTypenums(array_type(input), typecode)))
    {
      ary = (PyArrayObject*) input;
    }
    else if is_array(input)
    {
      const char* desired_type = typecode_string(typecode);
      const char* actual_type  = typecode_string(array_type(input));
      PyErr_Format(PyExc_TypeError,
                   "Array of type '%s' required.  Array of type '%s' given",
                   desired_type, actual_type);
      ary = NULL;
    }
    else
    {
      const char* desired_type = typecode_string(typecode);
      const char* actual_type  = pytype_string(input);
      PyErr_Format(PyExc_TypeError,
                   "Array of type '%s' required.  A '%s' was given",
                   desired_type,
                   actual_type);
      ary = NULL;
    }
    return ary;
  }

  /* Convert the given PyObject to a NumPy array with the given
   * typecode.  On success, return a valid PyArrayObject* with the
   * correct type.  On failure, the python error string will be set and
   * the routine returns NULL.
   */
  PyArrayObject* obj_to_array_allow_conversion(PyObject* input,
                                               int       typecode,
                                               int*      is_new_object)
  {
    PyArrayObject* ary = NULL;
    PyObject*      py_obj;
    if (is_array(input) && (typecode == NPY_NOTYPE ||
                            PyArray_EquivTypenums(array_type(input),typecode)))
    {
      ary = (PyArrayObject*) input;
      *is_new_object = 0;
    }
    else
    {
      py_obj = PyArray_FROMANY(input, typecode, 0, 0, NPY_ARRAY_DEFAULT);
      /* If NULL, PyArray_FromObject will have set python error value.*/
      ary = (PyArrayObject*) py_obj;
      *is_new_object = 1;
    }
    return ary;
  }

  /* Given a PyArrayObject, check to see if it is contiguous.  If so,
   * return the input pointer and flag it as not a new object.  If it is
   * not contiguous, create a new PyArrayObject using the original data,
   * flag it as a new object and return the pointer.
   */
  PyArrayObject* make_contiguous(PyArrayObject* ary,
                                 int*           is_new_object,
                                 int            min_dims,
                                 int            max_dims)
  {
    PyArrayObject* result;
    if (array_is_contiguous(ary))
    {
      result = ary;
      *is_new_object = 0;
    }
    else
    {
      result = (PyArrayObject*) PyArray_ContiguousFromObject((PyObject*)ary,
                                                              array_type(ary),
                                                              min_dims,
                                                              max_dims);
      *is_new_object = 1;
    }
    return result;
  }

  /* Given a PyArrayObject, check to see if it is Fortran-contiguous.
   * If so, return the input pointer, but do not flag it as not a new
   * object.  If it is not Fortran-contiguous, create a new
   * PyArrayObject using the original data, flag it as a new object
   * and return the pointer.
   */
  PyArrayObject* make_fortran(PyArrayObject* ary,
                              int*           is_new_object)
  {
    PyArrayObject* result;
    if (array_is_fortran(ary))
    {
      result = ary;
      *is_new_object = 0;
    }
    else
    {
      Py_INCREF(array_descr(ary));
      result = (PyArrayObject*) PyArray_FromArray(ary,
                                                  array_descr(ary),
                                                  NPY_FORTRANORDER);
      *is_new_object = 1;
    }
    return result;
  }

  /* Convert a given PyObject to a contiguous PyArrayObject of the
   * specified type.  If the input object is not a contiguous
   * PyArrayObject, a new one will be created and the new object flag
   * will be set.
   */
  PyArrayObject* obj_to_array_contiguous_allow_conversion(PyObject* input,
                                                          int       typecode,
                                                          int*      is_new_object)
  {
    int is_new1 = 0;
    int is_new2 = 0;
    PyArrayObject* ary2;
    PyArrayObject* ary1 = obj_to_array_allow_conversion(input,
                                                        typecode,
                                                        &is_new1);
    if (ary1)
    {
      ary2 = make_contiguous(ary1, &is_new2, 0, 0);
      if ( is_new1 && is_new2)
      {
        Py_DECREF(ary1);
      }
      ary1 = ary2;
    }
    *is_new_object = is_new1 || is_new2;
    return ary1;
  }

  /* Convert a given PyObject to a Fortran-ordered PyArrayObject of the
   * specified type.  If the input object is not a Fortran-ordered
   * PyArrayObject, a new one will be created and the new object flag
   * will be set.
   */
  PyArrayObject* obj_to_array_fortran_allow_conversion(PyObject* input,
                                                       int       typecode,
                                                       int*      is_new_object)
  {
    int is_new1 = 0;
    int is_new2 = 0;
    PyArrayObject* ary2;
    PyArrayObject* ary1 = obj_to_array_allow_conversion(input,
                                                        typecode,
                                                        &is_new1);
    if (ary1)
    {
      ary2 = make_fortran(ary1, &is_new2);
      if (is_new1 && is_new2)
      {
        Py_DECREF(ary1);
      }
      ary1 = ary2;
    }
    *is_new_object = is_new1 || is_new2;
    return ary1;
  }


  /* Test whether a python object is contiguous.  If array is
   * contiguous, return 1.  Otherwise, set the python error string and
   * return 0.
   */
  int require_contiguous(PyArrayObject* ary)
  {
    int contiguous = 1;
    if (!array_is_contiguous(ary))
    {
      PyErr_SetString(PyExc_TypeError,
                      "Array must be contiguous.  A non-contiguous array was given");
      contiguous = 0;
    }
    return contiguous;
  }

  /* Require that a numpy array is not byte-swapped.  If the array is
   * not byte-swapped, return 1.  Otherwise, set the python error string
   * and return 0.
   */
  int require_native(PyArrayObject* ary)
  {
    int native = 1;
    if (!array_is_native(ary))
    {
      PyErr_SetString(PyExc_TypeError,
                      "Array must have native byteorder.  "
                      "A byte-swapped array was given");
      native = 0;
    }
    return native;
  }

  /* Require the given PyArrayObject to have a specified number of
   * dimensions.  If the array has the specified number of dimensions,
   * return 1.  Otherwise, set the python error string and return 0.
   */
  int require_dimensions(PyArrayObject* ary,
                         int            exact_dimensions)
  {
    int success = 1;
    if (array_numdims(ary) != exact_dimensions)
    {
      PyErr_Format(PyExc_TypeError,
                   "Array must have %d dimensions.  Given array has %d dimensions",
                   exact_dimensions,
                   array_numdims(ary));
      success = 0;
    }
    return success;
  }

  /* Require the given PyArrayObject to have one of a list of specified
   * number of dimensions.  If the array has one of the specified number
   * of dimensions, return 1.  Otherwise, set the python error string
   * and return 0.
   */
  int require_dimensions_n(PyArrayObject* ary,
                           int*           exact_dimensions,
                           int            n)
  {
    int success = 0;
    int i;
    char dims_str[255] = "";
    char s[255];
    for (i = 0; i < n && !success; i++)
    {
      if (array_numdims(ary) == exact_dimensions[i])
      {
        success = 1;
      }
    }
    if (!success)
    {
      for (i = 0; i < n-1; i++)
      {
        sprintf(s, "%d, ", exact_dimensions[i]);
        strcat(dims_str,s);
      }
      sprintf(s, " or %d", exact_dimensions[n-1]);
      strcat(dims_str,s);
      PyErr_Format(PyExc_TypeError,
                   "Array must have %s dimensions.  Given array has %d dimensions",
                   dims_str,
                   array_numdims(ary));
    }
    return success;
  }

  /* Require the given PyArrayObject to have a specified shape.  If the
   * array has the specified shape, return 1.  Otherwise, set the python
   * error string and return 0.
   */
  int require_size(PyArrayObject* ary,
                   npy_intp*      size,
                   int            n)
  {
    int i;
    int success = 1;
    int len;
    char desired_dims[255] = "[";
    char s[255];
    char actual_dims[255] = "[";
    for(i=0; i < n;i++)
    {
      if (size[i] != -1 &&  size[i] != array_size(ary,i))
      {
        success = 0;
      }
    }
    if (!success)
    {
      for (i = 0; i < n; i++)
      {
        if (size[i] == -1)
        {
          sprintf(s, "*,");
        }
        else
        {
          sprintf(s, "%ld,", (long int)size[i]);
        }
        strcat(desired_dims,s);
      }
      len = strlen(desired_dims);
      desired_dims[len-1] = ']';
      for (i = 0; i < n; i++)
      {
        sprintf(s, "%ld,", (long int)array_size(ary,i));
        strcat(actual_dims,s);
      }
      len = strlen(actual_dims);
      actual_dims[len-1] = ']';
      PyErr_Format(PyExc_TypeError,
                   "Array must have shape of %s.  Given array has shape of %s",
                   desired_dims,
                   actual_dims);
    }
    return success;
  }

  /* Require the given PyArrayObject to to be Fortran ordered.  If the
   * the PyArrayObject is already Fortran ordered, do nothing.  Else,
   * set the Fortran ordering flag and recompute the strides.
   */
  int require_fortran(PyArrayObject* ary)
  {
    int success = 1;
    int nd = array_numdims(ary);
    int i;
    npy_intp * strides = array_strides(ary);
    if (array_is_fortran(ary)) return success;
    /* Set the Fortran ordered flag */
    array_enableflags(ary,NPY_ARRAY_FARRAY);
    /* Recompute the strides */
    strides[0] = strides[nd-1];
    for (i=1; i < nd; ++i)
      strides[i] = strides[i-1] * array_size(ary,i-1);
    return success;
  }




  template <typename T> int NumPyType() {return -1;};

  template <class Derived>
  int ConvertFromNumpyToEigenMatrix(Eigen::MatrixBase<Derived>* out, PyObject* in)
  {
    int rows = 0;
    int cols = 0;
    // Check object type
    if (!is_array(in))
    {
      PyErr_SetString(PyExc_ValueError, "The given input is not known as a NumPy array or matrix.");
      return -1;
    }
    // Check data type
    else if (array_type(in) != NumPyType<typename Derived::Scalar>())
    {
      PyErr_SetString(PyExc_ValueError, "Type mismatch between NumPy and Eigen objects.");
      return -1;
    }
    // Check dimensions
    else if (array_numdims(in) > 2)
    {
      PyErr_SetString(PyExc_ValueError, "Eigen only support 1D or 2D array.");
      return -1;
    }
    else if (array_numdims(in) == 1)
    {
      rows = array_size(in,0);
      cols = 1;
      if ((Derived::RowsAtCompileTime != Eigen::Dynamic) && (Derived::RowsAtCompileTime != rows))
      {
        PyErr_SetString(PyExc_ValueError, "Row dimension mismatch between NumPy and Eigen objects (1D).");
        return -1;
      }
      else if ((Derived::ColsAtCompileTime != Eigen::Dynamic) && (Derived::ColsAtCompileTime != 1))
      {
        PyErr_SetString(PyExc_ValueError, "Column dimension mismatch between NumPy and Eigen objects (1D).");
        return -1;
      }
    }
    else if (array_numdims(in) == 2)
    {
      rows = array_size(in,0);
      cols = array_size(in,1);
      if ((Derived::RowsAtCompileTime != Eigen::Dynamic) && (Derived::RowsAtCompileTime != array_size(in,0)))
      {
        PyErr_SetString(PyExc_ValueError, "Row dimension mismatch between NumPy and Eigen objects (2D).");
        return -1;
      }
      else if ((Derived::ColsAtCompileTime != Eigen::Dynamic) && (Derived::ColsAtCompileTime != array_size(in,1)))
      {
        PyErr_SetString(PyExc_ValueError, "Column dimension mismatch between NumPy and Eigen objects (2D).");
        return -1;
      }
    }

    // Extract data
    int isNewObject = 0;
    PyArrayObject* temp = obj_to_array_contiguous_allow_conversion(in, array_type(in), &isNewObject);
    if (temp == NULL)
    {
      PyErr_SetString(PyExc_ValueError, "Impossible to convert the input into a Python array object.");
      return -1;
    }
    out->derived().setZero(rows, cols);
    typename Derived::Scalar* data = static_cast<typename Derived::Scalar*>(PyArray_DATA(temp));
    for (int i = 0; i != rows; ++i){
      for (int j = 0; j != cols; ++j){
        out->coeffRef(i,j) = data[i*cols+j];
      }
    }

    return 0;
  };

  // Copies values from Eigen type into an existing NumPy type
  template <class Derived>
  int CopyFromEigenToNumPyMatrix(PyObject* out, Eigen::MatrixBase<Derived>* in)
  {
    int rows = 0;
    int cols = 0;
    // Check object type
    if (!is_array(out))
    {
      PyErr_SetString(PyExc_ValueError, "The given input is not known as a NumPy array or matrix.");
      return -1;
    }
    // Check data type
    else if (array_type(out) != NumPyType<typename Derived::Scalar>())
    {
      PyErr_SetString(PyExc_ValueError, "Type mismatch between NumPy and Eigen objects.");
      return -1;
    }
    // Check dimensions
    else if (array_numdims(out) > 2)
    {
      PyErr_SetString(PyExc_ValueError, "Eigen only support 1D or 2D array.");
      return -1;
    }
    else if (array_numdims(out) == 1)
    {
      rows = array_size(out,0);
      cols = 1;
      if ((Derived::RowsAtCompileTime != Eigen::Dynamic) && (Derived::RowsAtCompileTime != rows))
      {
        PyErr_SetString(PyExc_ValueError, "Row dimension mismatch between NumPy and Eigen objects (1D).");
        return -1;
      }
      else if ((Derived::ColsAtCompileTime != Eigen::Dynamic) && (Derived::ColsAtCompileTime != 1))
      {
        PyErr_SetString(PyExc_ValueError, "Column dimension mismatch between NumPy and Eigen objects (1D).");
        return -1;
      }
    }
    else if (array_numdims(out) == 2)
    {
      rows = array_size(out,0);
      cols = array_size(out,1);
    }

    if (in->cols() != cols || in->rows() != rows) {
      /// TODO: be forgiving and simply create or resize the array
      PyErr_SetString(PyExc_ValueError, "Dimension mismatch between NumPy and Eigen object (return argument).");
      return -1;
    }

    // Extract data
    int isNewObject = 0;
    PyArrayObject* temp = obj_to_array_contiguous_allow_conversion(out, array_type(out), &isNewObject);
    if (temp == NULL)
    {
      PyErr_SetString(PyExc_ValueError, "Impossible to convert the input into a Python array object.");
      return -1;
    }

    typename Derived::Scalar* data = static_cast<typename Derived::Scalar*>(PyArray_DATA(temp));

    for (int i = 0; i != in->rows(); ++i) {
      for (int j = 0; j != in->cols(); ++j) {
        data[i*in->cols()+j] = in->coeff(i,j);
      }
    }

    return 0;
  };

  template <class Derived>
  int ConvertFromEigenToNumPyMatrix(PyObject** out, Eigen::MatrixBase<Derived>* in)
  {
    npy_intp dims[2] = {in->rows(), in->cols()};
    *out = PyArray_SimpleNew(2, dims, NumPyType<typename Derived::Scalar>());
    typename Derived::Scalar* data = static_cast<typename Derived::Scalar*>(PyArray_DATA((PyArrayObject*)*out));
    for (int i = 0; i != dims[0]; ++i)
      for (int j = 0; j != dims[1]; ++j)
        data[i*dims[1]+j] = in->coeff(i,j);

    return 0;
  };

  template<> int NumPyType<double>() {return NPY_DOUBLE;};

SWIGINTERN Eigen::VectorXd const &std_tuple_Sl_Eigen_VectorXd_Sc_Eigen_MatrixXd_Sg__get0(std::tuple< Eigen::VectorXd,Eigen::MatrixXd > const *self){ return std::get<0>(*self); }
SWIGINTERN Eigen::MatrixXd const &std_tuple_Sl_Eigen_VectorXd_Sc_Eigen_MatrixXd_Sg__get1(std::tuple< Eigen::VectorXd,Eigen::MatrixXd > const *self){ return std::get<1>(*self); }
SWIGINTERN void std_tuple_Sl_Eigen_VectorXd_Sc_Eigen_MatrixXd_Sg__set0(std::tuple< Eigen::VectorXd,Eigen::MatrixXd > *self,Eigen::VectorXd const &val){ std::get<0>(*self) = val; }
SWIGINTERN void std_tuple_Sl_Eigen_VectorXd_Sc_Eigen_MatrixXd_Sg__set1(std::tuple< Eigen::VectorXd,Eigen::MatrixXd > *self,Eigen::MatrixXd const &val){ std::get<1>(*self) = val; }
SWIGINTERN size_t std_tuple_Sl_Eigen_VectorXd_Sc_Eigen_MatrixXd_Sg____len__(std::tuple< Eigen::VectorXd,Eigen::MatrixXd > const *self){ return std::tuple_size<std::decay_t<decltype(*self)>>{}; }

#include <string>


SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


  #define SWIG_From_double   PyFloat_FromDouble 


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx, cx, rd;
   errno = 0;
   fx = floor(x);
   cx = ceil(x);
   rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      // Largest double not larger than LONG_MAX (not portably calculated easily)
      // Note that double(LONG_MAX) is stored in a double rounded up by one (for 64-bit long)
      // 0x7ffffffffffffc00LL == (int64_t)std::nextafter(double(__uint128_t(LONG_MAX)+1), double(0))
      const double long_max = sizeof(long) == 8 ? 0x7ffffffffffffc00LL : LONG_MAX;
      // No equivalent needed for 64-bit double(LONG_MIN) is exactly LONG_MIN
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, long_max)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}

SWIGINTERN bool stag_Graph___eq__(stag::Graph *self,stag::Graph *other){
      return *self == *other;
    }

SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


/* Return string from Python obj. NOTE: obj must remain in scope in order
   to use the returned cptr (but only when alloc is set to SWIG_OLDOBJ) */
SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char **cptr, size_t *psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
    PyObject *bytes = NULL;
    int ret = SWIG_OK;
    if (alloc)
      *alloc = SWIG_OLDOBJ;
#if PY_VERSION_HEX>=0x03000000 && defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (PyBytes_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#else
    cstr = (char *)SWIG_PyUnicode_AsUTF8AndSize(obj, &len, &bytes);
    if (!cstr)
      return SWIG_TypeError;
    /* The returned string is only duplicated if the char * returned is not owned and memory managed by obj */
    if (bytes && cptr) {
      if (alloc) {
        cstr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        *alloc = SWIG_NEWOBJ;
      } else {
        /* alloc must be set in order to clean up allocated memory */
        return SWIG_RuntimeError;
      }
    }
#endif
    if (cptr) *cptr = cstr;
    if (psize) *psize = len + 1;
    Py_XDECREF(bytes);
    return ret;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (!obj)
        return SWIG_TypeError;
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      // Largest double not larger than ULONG_MAX (not portably calculated easily)
      // Note that double(ULONG_MAX) is stored in a double rounded up by one (for 64-bit unsigned long)
      // 0xfffffffffffff800ULL == (uint64_t)std::nextafter(double(__uint128_t(ULONG_MAX)+1), double(0))
      const double ulong_max = sizeof(unsigned long) == 8 ? 0xfffffffffffff800ULL : ULONG_MAX;
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ulong_max)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, 0, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}

SWIGINTERN StagInt DenseMat_get_rows(DenseMat *self){
        return self->rows();
    }
SWIGINTERN StagInt DenseMat_get_cols(DenseMat *self){
        return self->cols();
    }
SWIGINTERN DenseMat DenseMat___add__(DenseMat *self,DenseMat *other){
        return *self + *other;
    }
SWIGINTERN DenseMat DenseMat___sub__(DenseMat *self,DenseMat *other){
        return *self - *other;
    }
SWIGINTERN DenseMat DenseMat___mul__(DenseMat *self,DenseMat *other){
        return *self * *other;
    }
SWIGINTERN DenseMat DenseMat___mulfloat__(DenseMat *self,double other){
        return other * *self;
    }
SWIGINTERN DenseMat DenseMat___mulint__(DenseMat *self,StagInt other){
        return other * *self;
    }
SWIGINTERN DenseMat DenseMat___neg__(DenseMat *self){
        return - *self;
    }
SWIGINTERN bool DenseMat___eq__(DenseMat *self,DenseMat *other){
        return *self == *other;
    }
SWIGINTERN DenseMat DenseMat___truedivfloat__(DenseMat *self,double other){
        return *self / other;
    }
SWIGINTERN DenseMat DenseMat___truedivint__(DenseMat *self,StagInt other){
        return *self / other;
    }
SWIGINTERN DenseMat DenseMat___transpose__(DenseMat *self){
        return self->transpose();
    }
SWIGINTERN StagInt SprsMat_get_rows(SprsMat *self){
        return self->rows();
    }
SWIGINTERN StagInt SprsMat_get_cols(SprsMat *self){
        return self->cols();
    }
SWIGINTERN SprsMat SprsMat___add__(SprsMat *self,SprsMat *other){
        return *self + *other;
    }
SWIGINTERN SprsMat SprsMat___sub__(SprsMat *self,SprsMat *other){
        return *self - *other;
    }
SWIGINTERN SprsMat SprsMat___mul__(SprsMat *self,SprsMat *other){
        return *self * *other;
    }
SWIGINTERN SprsMat SprsMat___mulfloat__(SprsMat *self,double other){
        return other * *self;
    }
SWIGINTERN SprsMat SprsMat___mulint__(SprsMat *self,StagInt other){
        return other * *self;
    }
SWIGINTERN SprsMat SprsMat___neg__(SprsMat *self){
        return - *self;
    }
SWIGINTERN SprsMat SprsMat___truedivfloat__(SprsMat *self,double other){
        return *self / other;
    }
SWIGINTERN SprsMat SprsMat___truedivint__(SprsMat *self,StagInt other){
        return *self / other;
    }
SWIGINTERN SprsMat SprsMat___transpose__(SprsMat *self){
        return self->transpose();
    }

SprsMat sprsMatFromVectorsDims(long rows,
                               long cols,
                               std::vector<StagInt>& column_starts,
                               std::vector<StagInt>& row_indices,
                               std::vector<double>& values) {
  // The length of the row_indices and values vectors should be the same
  if (row_indices.size() != values.size()) {
    throw std::invalid_argument("Sparse matrix indices and values array length mismatch.");
  }

  // The last value in the column_starts vector should be equal to the length
  // of the data vectors.
  if (column_starts.back() != (StagInt) row_indices.size()) {
    throw std::invalid_argument("Final column starts entry should equal size of data vectors.");
  }

  if (column_starts.size() - 1 != cols) {
    throw std::invalid_argument("Number of columns should match length of column starts.");
  }

  SprsMat constructed_mat = Eigen::Map<SprsMat>(rows,
                                                cols,
                                                (StagInt) values.size(),
                                                column_starts.data(),
                                                row_indices.data(),
                                                values.data());
  constructed_mat.makeCompressed();
  return constructed_mat;
}



DenseMat denseMatFromNdarray(const Eigen::MatrixXd& mat) {
    DenseMat newDenseMat = mat;
    return newDenseMat;
}

Eigen::MatrixXd ndArrayFromDenseMat(const DenseMat& mat) {
    Eigen::MatrixXd new_mat = mat;
    return new_mat;
}


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "stag_internal_wrap.h"

SwigDirector_LocalGraph::SwigDirector_LocalGraph(PyObject *self): stag::LocalGraph(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((stag::LocalGraph *)this, this); 
}




StagReal SwigDirector_LocalGraph::degree(StagInt v) {
  StagReal c_result = SwigValueInit< StagReal >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj((new StagInt(SWIG_STD_MOVE(v))), SWIGTYPE_p_int64_t, SWIG_POINTER_OWN |  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call LocalGraph.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char *const swig_method_name = "degree";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("degree");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'LocalGraph.degree'");
    }
  }
  double swig_val;
  int swig_res = SWIG_AsVal_double(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""StagReal""'");
  }
  c_result = static_cast< StagReal >(swig_val);
  return (StagReal) c_result;
}


StagInt SwigDirector_LocalGraph::degree_unweighted(StagInt v) {
  StagInt c_result = SwigValueInit< StagInt >() ;
  void *swig_argp ;
  int swig_res = 0 ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj((new StagInt(SWIG_STD_MOVE(v))), SWIGTYPE_p_int64_t, SWIG_POINTER_OWN |  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call LocalGraph.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 1;
  const char *const swig_method_name = "degree_unweighted";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("degree_unweighted");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'LocalGraph.degree_unweighted'");
    }
  }
  swig_res = SWIG_ConvertPtr(result,&swig_argp,SWIGTYPE_p_int64_t,  0  | 0);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""StagInt""'");
  }
  c_result = *(reinterpret_cast< StagInt * >(swig_argp));
  if (SWIG_IsNewObj(swig_res)) delete reinterpret_cast< StagInt * >(swig_argp);
  return (StagInt) c_result;
}


std::vector< stag::edge > SwigDirector_LocalGraph::neighbors(StagInt v) {
  void *swig_argp ;
  int swig_res = 0 ;
  
  std::vector< stag::edge > c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj((new StagInt(SWIG_STD_MOVE(v))), SWIGTYPE_p_int64_t, SWIG_POINTER_OWN |  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call LocalGraph.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 2;
  const char *const swig_method_name = "neighbors";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("neighbors");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'LocalGraph.neighbors'");
    }
  }
  swig_res = SWIG_ConvertPtr(result,&swig_argp,SWIGTYPE_p_std__vectorT_stag__edge_t,  0  | 0);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""std::vector< stag::edge >""'");
  }
  c_result = *(reinterpret_cast< std::vector< stag::edge > * >(swig_argp));
  if (SWIG_IsNewObj(swig_res)) delete reinterpret_cast< std::vector< stag::edge > * >(swig_argp);
  return (std::vector< stag::edge >) c_result;
}


std::vector< StagInt > SwigDirector_LocalGraph::neighbors_unweighted(StagInt v) {
  std::vector< StagInt > c_result = SwigValueInit< std::vector< StagInt > >() ;
  void *swig_argp ;
  int swig_res = 0 ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj((new StagInt(SWIG_STD_MOVE(v))), SWIGTYPE_p_int64_t, SWIG_POINTER_OWN |  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call LocalGraph.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 3;
  const char *const swig_method_name = "neighbors_unweighted";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("neighbors_unweighted");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'LocalGraph.neighbors_unweighted'");
    }
  }
  swig_res = SWIG_ConvertPtr(result,&swig_argp,SWIGTYPE_p_std__vectorT_int64_t_t,  0  | 0);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""std::vector< StagInt >""'");
  }
  c_result = *(reinterpret_cast< std::vector< StagInt > * >(swig_argp));
  if (SWIG_IsNewObj(swig_res)) delete reinterpret_cast< std::vector< StagInt > * >(swig_argp);
  return (std::vector< StagInt >) c_result;
}


std::vector< StagReal > SwigDirector_LocalGraph::degrees(std::vector< StagInt > vertices) {
  std::vector< StagReal > c_result = SwigValueInit< std::vector< StagReal > >() ;
  void *swig_argp ;
  int swig_res = 0 ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj((new std::vector< StagInt >(SWIG_STD_MOVE(vertices))), SWIGTYPE_p_std__vectorT_int64_t_t, SWIG_POINTER_OWN |  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call LocalGraph.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 4;
  const char *const swig_method_name = "degrees";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("degrees");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'LocalGraph.degrees'");
    }
  }
  swig_res = SWIG_ConvertPtr(result,&swig_argp,SWIGTYPE_p_std__vectorT_double_t,  0  | 0);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""std::vector< StagReal >""'");
  }
  c_result = *(reinterpret_cast< std::vector< StagReal > * >(swig_argp));
  if (SWIG_IsNewObj(swig_res)) delete reinterpret_cast< std::vector< StagReal > * >(swig_argp);
  return (std::vector< StagReal >) c_result;
}


std::vector< StagInt > SwigDirector_LocalGraph::degrees_unweighted(std::vector< StagInt > vertices) {
  std::vector< StagInt > c_result = SwigValueInit< std::vector< StagInt > >() ;
  void *swig_argp ;
  int swig_res = 0 ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj((new std::vector< StagInt >(SWIG_STD_MOVE(vertices))), SWIGTYPE_p_std__vectorT_int64_t_t, SWIG_POINTER_OWN |  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call LocalGraph.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 5;
  const char *const swig_method_name = "degrees_unweighted";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("degrees_unweighted");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'LocalGraph.degrees_unweighted'");
    }
  }
  swig_res = SWIG_ConvertPtr(result,&swig_argp,SWIGTYPE_p_std__vectorT_int64_t_t,  0  | 0);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""std::vector< StagInt >""'");
  }
  c_result = *(reinterpret_cast< std::vector< StagInt > * >(swig_argp));
  if (SWIG_IsNewObj(swig_res)) delete reinterpret_cast< std::vector< StagInt > * >(swig_argp);
  return (std::vector< StagInt >) c_result;
}


bool SwigDirector_LocalGraph::vertex_exists(StagInt v) {
  bool c_result = SwigValueInit< bool >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj((new StagInt(SWIG_STD_MOVE(v))), SWIGTYPE_p_int64_t, SWIG_POINTER_OWN |  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call LocalGraph.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 6;
  const char *const swig_method_name = "vertex_exists";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("vertex_exists");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'LocalGraph.vertex_exists'");
    }
  }
  bool swig_val;
  int swig_res = SWIG_AsVal_bool(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""bool""'");
  }
  c_result = static_cast< bool >(swig_val);
  return (bool) c_result;
}


SwigDirector_LocalGraph::~SwigDirector_LocalGraph() {
}

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_new_TupleMM(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SprsMat *arg1 = 0 ;
  SprsMat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  std::tuple< SprsMat,SprsMat > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_TupleMM", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TupleMM" "', argument " "1"" of type '" "SprsMat const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TupleMM" "', argument " "1"" of type '" "SprsMat const &""'"); 
  }
  arg1 = reinterpret_cast< SprsMat * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TupleMM" "', argument " "2"" of type '" "SprsMat""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TupleMM" "', argument " "2"" of type '" "SprsMat""'");
    } else {
      SprsMat * temp = reinterpret_cast< SprsMat * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (std::tuple< SprsMat,SprsMat > *)new std::tuple< SprsMat,SprsMat >((SprsMat const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__tupleT_SprsMat_SprsMat_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TupleMM_get0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::tuple< SprsMat,SprsMat > *arg1 = (std::tuple< SprsMat,SprsMat > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SprsMat *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__tupleT_SprsMat_SprsMat_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TupleMM_get0" "', argument " "1"" of type '" "std::tuple< SprsMat,SprsMat > const *""'"); 
  }
  arg1 = reinterpret_cast< std::tuple< SprsMat,SprsMat > * >(argp1);
  result = (SprsMat *) &std_tuple_Sl_SprsMat_Sc_SprsMat_Sg__get0((std::tuple< SprsMat,SprsMat > const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TupleMM_get1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::tuple< SprsMat,SprsMat > *arg1 = (std::tuple< SprsMat,SprsMat > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SprsMat *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__tupleT_SprsMat_SprsMat_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TupleMM_get1" "', argument " "1"" of type '" "std::tuple< SprsMat,SprsMat > const *""'"); 
  }
  arg1 = reinterpret_cast< std::tuple< SprsMat,SprsMat > * >(argp1);
  result = (SprsMat *) &std_tuple_Sl_SprsMat_Sc_SprsMat_Sg__get1((std::tuple< SprsMat,SprsMat > const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TupleMM_set0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::tuple< SprsMat,SprsMat > *arg1 = (std::tuple< SprsMat,SprsMat > *) 0 ;
  SprsMat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TupleMM_set0", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__tupleT_SprsMat_SprsMat_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TupleMM_set0" "', argument " "1"" of type '" "std::tuple< SprsMat,SprsMat > *""'"); 
  }
  arg1 = reinterpret_cast< std::tuple< SprsMat,SprsMat > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TupleMM_set0" "', argument " "2"" of type '" "SprsMat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TupleMM_set0" "', argument " "2"" of type '" "SprsMat const &""'"); 
  }
  arg2 = reinterpret_cast< SprsMat * >(argp2);
  std_tuple_Sl_SprsMat_Sc_SprsMat_Sg__set0(arg1,(Eigen::SparseMatrix< StagReal,Eigen::ColMajor,StagInt > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TupleMM_set1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::tuple< SprsMat,SprsMat > *arg1 = (std::tuple< SprsMat,SprsMat > *) 0 ;
  SprsMat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TupleMM_set1", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__tupleT_SprsMat_SprsMat_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TupleMM_set1" "', argument " "1"" of type '" "std::tuple< SprsMat,SprsMat > *""'"); 
  }
  arg1 = reinterpret_cast< std::tuple< SprsMat,SprsMat > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TupleMM_set1" "', argument " "2"" of type '" "SprsMat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TupleMM_set1" "', argument " "2"" of type '" "SprsMat const &""'"); 
  }
  arg2 = reinterpret_cast< SprsMat * >(argp2);
  std_tuple_Sl_SprsMat_Sc_SprsMat_Sg__set1(arg1,(Eigen::SparseMatrix< StagReal,Eigen::ColMajor,StagInt > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TupleMM___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::tuple< SprsMat,SprsMat > *arg1 = (std::tuple< SprsMat,SprsMat > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__tupleT_SprsMat_SprsMat_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TupleMM___len__" "', argument " "1"" of type '" "std::tuple< SprsMat,SprsMat > const *""'"); 
  }
  arg1 = reinterpret_cast< std::tuple< SprsMat,SprsMat > * >(argp1);
  result = std_tuple_Sl_SprsMat_Sc_SprsMat_Sg____len__((std::tuple< SprsMat,SprsMat > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TupleMM(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::tuple< SprsMat,SprsMat > *arg1 = (std::tuple< SprsMat,SprsMat > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__tupleT_SprsMat_SprsMat_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TupleMM" "', argument " "1"" of type '" "std::tuple< SprsMat,SprsMat > *""'"); 
  }
  arg1 = reinterpret_cast< std::tuple< SprsMat,SprsMat > * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TupleMM_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__tupleT_SprsMat_SprsMat_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *TupleMM_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Tupleii(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  StagInt *arg1 = 0 ;
  StagInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  std::tuple< StagInt,StagInt > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_Tupleii", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_int64_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Tupleii" "', argument " "1"" of type '" "StagInt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Tupleii" "', argument " "1"" of type '" "StagInt const &""'"); 
  }
  arg1 = reinterpret_cast< StagInt * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_int64_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Tupleii" "', argument " "2"" of type '" "StagInt""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Tupleii" "', argument " "2"" of type '" "StagInt""'");
    } else {
      StagInt * temp = reinterpret_cast< StagInt * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (std::tuple< StagInt,StagInt > *)new std::tuple< StagInt,StagInt >((StagInt const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__tupleT_StagInt_StagInt_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tupleii_get0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::tuple< StagInt,StagInt > *arg1 = (std::tuple< StagInt,StagInt > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  StagInt *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__tupleT_StagInt_StagInt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tupleii_get0" "', argument " "1"" of type '" "std::tuple< StagInt,StagInt > const *""'"); 
  }
  arg1 = reinterpret_cast< std::tuple< StagInt,StagInt > * >(argp1);
  result = (StagInt *) &std_tuple_Sl_StagInt_Sc_StagInt_Sg__get0((std::tuple< StagInt,StagInt > const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int64_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tupleii_get1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::tuple< StagInt,StagInt > *arg1 = (std::tuple< StagInt,StagInt > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  StagInt *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__tupleT_StagInt_StagInt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tupleii_get1" "', argument " "1"" of type '" "std::tuple< StagInt,StagInt > const *""'"); 
  }
  arg1 = reinterpret_cast< std::tuple< StagInt,StagInt > * >(argp1);
  result = (StagInt *) &std_tuple_Sl_StagInt_Sc_StagInt_Sg__get1((std::tuple< StagInt,StagInt > const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int64_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tupleii_set0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::tuple< StagInt,StagInt > *arg1 = (std::tuple< StagInt,StagInt > *) 0 ;
  StagInt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Tupleii_set0", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__tupleT_StagInt_StagInt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tupleii_set0" "', argument " "1"" of type '" "std::tuple< StagInt,StagInt > *""'"); 
  }
  arg1 = reinterpret_cast< std::tuple< StagInt,StagInt > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_int64_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tupleii_set0" "', argument " "2"" of type '" "StagInt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tupleii_set0" "', argument " "2"" of type '" "StagInt const &""'"); 
  }
  arg2 = reinterpret_cast< StagInt * >(argp2);
  std_tuple_Sl_StagInt_Sc_StagInt_Sg__set0(arg1,(int64_t const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tupleii_set1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::tuple< StagInt,StagInt > *arg1 = (std::tuple< StagInt,StagInt > *) 0 ;
  StagInt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Tupleii_set1", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__tupleT_StagInt_StagInt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tupleii_set1" "', argument " "1"" of type '" "std::tuple< StagInt,StagInt > *""'"); 
  }
  arg1 = reinterpret_cast< std::tuple< StagInt,StagInt > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_int64_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tupleii_set1" "', argument " "2"" of type '" "StagInt const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tupleii_set1" "', argument " "2"" of type '" "StagInt const &""'"); 
  }
  arg2 = reinterpret_cast< StagInt * >(argp2);
  std_tuple_Sl_StagInt_Sc_StagInt_Sg__set1(arg1,(int64_t const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tupleii___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::tuple< StagInt,StagInt > *arg1 = (std::tuple< StagInt,StagInt > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__tupleT_StagInt_StagInt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tupleii___len__" "', argument " "1"" of type '" "std::tuple< StagInt,StagInt > const *""'"); 
  }
  arg1 = reinterpret_cast< std::tuple< StagInt,StagInt > * >(argp1);
  result = std_tuple_Sl_StagInt_Sc_StagInt_Sg____len__((std::tuple< StagInt,StagInt > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Tupleii(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::tuple< StagInt,StagInt > *arg1 = (std::tuple< StagInt,StagInt > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__tupleT_StagInt_StagInt_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Tupleii" "', argument " "1"" of type '" "std::tuple< StagInt,StagInt > *""'"); 
  }
  arg1 = reinterpret_cast< std::tuple< StagInt,StagInt > * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Tupleii_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__tupleT_StagInt_StagInt_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Tupleii_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_TupleEigensystem(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Eigen::VectorXd *arg1 = 0 ;
  Eigen::MatrixXd arg2 ;
  Eigen::VectorXd temp1 ;
  Eigen::MatrixXd temp2 ;
  PyObject *swig_obj[2] ;
  std::tuple< Eigen::VectorXd,Eigen::MatrixXd > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_TupleEigensystem", 2, 2, swig_obj)) SWIG_fail;
  {
    // In: const&
    int res = ConvertFromNumpyToEigenMatrix<Eigen::VectorXd>(&temp1, swig_obj[0]);
    if (res < 0) return NULL;
    arg1 = &temp1;
  }
  {
    int res = ConvertFromNumpyToEigenMatrix<Eigen::MatrixXd>(&temp2, swig_obj[1]);
    if (res < 0) return NULL;
    arg2 = temp2;
  }
  result = (std::tuple< Eigen::VectorXd,Eigen::MatrixXd > *)new std::tuple< Eigen::VectorXd,Eigen::MatrixXd >((Eigen::VectorXd const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__tupleT_Eigen__VectorXd_Eigen__MatrixXd_t, SWIG_POINTER_NEW |  0 );
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TupleEigensystem_get0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::tuple< Eigen::VectorXd,Eigen::MatrixXd > *arg1 = (std::tuple< Eigen::VectorXd,Eigen::MatrixXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Eigen::VectorXd *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__tupleT_Eigen__VectorXd_Eigen__MatrixXd_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TupleEigensystem_get0" "', argument " "1"" of type '" "std::tuple< Eigen::VectorXd,Eigen::MatrixXd > const *""'"); 
  }
  arg1 = reinterpret_cast< std::tuple< Eigen::VectorXd,Eigen::MatrixXd > * >(argp1);
  result = (Eigen::VectorXd *) &std_tuple_Sl_Eigen_VectorXd_Sc_Eigen_MatrixXd_Sg__get0((std::tuple< Eigen::VectorXd,Eigen::MatrixXd > const *)arg1);
  {
    int res = ConvertFromEigenToNumPyMatrix<Eigen::VectorXd>(&resultobj, result);
    if (res < 0) return NULL;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TupleEigensystem_get1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::tuple< Eigen::VectorXd,Eigen::MatrixXd > *arg1 = (std::tuple< Eigen::VectorXd,Eigen::MatrixXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Eigen::MatrixXd *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__tupleT_Eigen__VectorXd_Eigen__MatrixXd_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TupleEigensystem_get1" "', argument " "1"" of type '" "std::tuple< Eigen::VectorXd,Eigen::MatrixXd > const *""'"); 
  }
  arg1 = reinterpret_cast< std::tuple< Eigen::VectorXd,Eigen::MatrixXd > * >(argp1);
  result = (Eigen::MatrixXd *) &std_tuple_Sl_Eigen_VectorXd_Sc_Eigen_MatrixXd_Sg__get1((std::tuple< Eigen::VectorXd,Eigen::MatrixXd > const *)arg1);
  {
    int res = ConvertFromEigenToNumPyMatrix<Eigen::MatrixXd>(&resultobj, result);
    if (res < 0) return NULL;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TupleEigensystem_set0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::tuple< Eigen::VectorXd,Eigen::MatrixXd > *arg1 = (std::tuple< Eigen::VectorXd,Eigen::MatrixXd > *) 0 ;
  Eigen::VectorXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::VectorXd temp2 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TupleEigensystem_set0", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__tupleT_Eigen__VectorXd_Eigen__MatrixXd_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TupleEigensystem_set0" "', argument " "1"" of type '" "std::tuple< Eigen::VectorXd,Eigen::MatrixXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::tuple< Eigen::VectorXd,Eigen::MatrixXd > * >(argp1);
  {
    // In: const&
    int res = ConvertFromNumpyToEigenMatrix<Eigen::VectorXd>(&temp2, swig_obj[1]);
    if (res < 0) return NULL;
    arg2 = &temp2;
  }
  std_tuple_Sl_Eigen_VectorXd_Sc_Eigen_MatrixXd_Sg__set0(arg1,(Eigen::VectorXd const &)*arg2);
  resultobj = SWIG_Py_Void();
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TupleEigensystem_set1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::tuple< Eigen::VectorXd,Eigen::MatrixXd > *arg1 = (std::tuple< Eigen::VectorXd,Eigen::MatrixXd > *) 0 ;
  Eigen::MatrixXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::MatrixXd temp2 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TupleEigensystem_set1", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__tupleT_Eigen__VectorXd_Eigen__MatrixXd_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TupleEigensystem_set1" "', argument " "1"" of type '" "std::tuple< Eigen::VectorXd,Eigen::MatrixXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::tuple< Eigen::VectorXd,Eigen::MatrixXd > * >(argp1);
  {
    // In: const&
    int res = ConvertFromNumpyToEigenMatrix<Eigen::MatrixXd>(&temp2, swig_obj[1]);
    if (res < 0) return NULL;
    arg2 = &temp2;
  }
  std_tuple_Sl_Eigen_VectorXd_Sc_Eigen_MatrixXd_Sg__set1(arg1,(Eigen::MatrixXd const &)*arg2);
  resultobj = SWIG_Py_Void();
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TupleEigensystem___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::tuple< Eigen::VectorXd,Eigen::MatrixXd > *arg1 = (std::tuple< Eigen::VectorXd,Eigen::MatrixXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__tupleT_Eigen__VectorXd_Eigen__MatrixXd_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TupleEigensystem___len__" "', argument " "1"" of type '" "std::tuple< Eigen::VectorXd,Eigen::MatrixXd > const *""'"); 
  }
  arg1 = reinterpret_cast< std::tuple< Eigen::VectorXd,Eigen::MatrixXd > * >(argp1);
  result = std_tuple_Sl_Eigen_VectorXd_Sc_Eigen_MatrixXd_Sg____len__((std::tuple< Eigen::VectorXd,Eigen::MatrixXd > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TupleEigensystem(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::tuple< Eigen::VectorXd,Eigen::MatrixXd > *arg1 = (std::tuple< Eigen::VectorXd,Eigen::MatrixXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__tupleT_Eigen__VectorXd_Eigen__MatrixXd_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TupleEigensystem" "', argument " "1"" of type '" "std::tuple< Eigen::VectorXd,Eigen::MatrixXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::tuple< Eigen::VectorXd,Eigen::MatrixXd > * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TupleEigensystem_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__tupleT_Eigen__VectorXd_Eigen__MatrixXd_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *TupleEigensystem_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN int Swig_var_VERSION_MAJOR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable VERSION_MAJOR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_VERSION_MAJOR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(stag::VERSION_MAJOR));
  return pyobj;
}


SWIGINTERN int Swig_var_VERSION_MINOR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable VERSION_MINOR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_VERSION_MINOR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(stag::VERSION_MINOR));
  return pyobj;
}


SWIGINTERN int Swig_var_VERSION_PATCH_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable VERSION_PATCH is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_VERSION_PATCH_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(stag::VERSION_PATCH));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_edge_v1_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::edge *arg1 = (stag::edge *) 0 ;
  StagInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "edge_v1_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__edge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "edge_v1_set" "', argument " "1"" of type '" "stag::edge *""'"); 
  }
  arg1 = reinterpret_cast< stag::edge * >(argp1);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg2 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[1]);
  }
  if (arg1) (arg1)->v1 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_edge_v1_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::edge *arg1 = (stag::edge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  StagInt result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__edge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "edge_v1_get" "', argument " "1"" of type '" "stag::edge *""'"); 
  }
  arg1 = reinterpret_cast< stag::edge * >(argp1);
  result =  ((arg1)->v1);
  {
    // StagInt typemap (out)
    resultobj = PyLong_FromLongLong((long long) result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_edge_v2_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::edge *arg1 = (stag::edge *) 0 ;
  StagInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "edge_v2_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__edge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "edge_v2_set" "', argument " "1"" of type '" "stag::edge *""'"); 
  }
  arg1 = reinterpret_cast< stag::edge * >(argp1);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg2 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[1]);
  }
  if (arg1) (arg1)->v2 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_edge_v2_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::edge *arg1 = (stag::edge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  StagInt result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__edge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "edge_v2_get" "', argument " "1"" of type '" "stag::edge *""'"); 
  }
  arg1 = reinterpret_cast< stag::edge * >(argp1);
  result =  ((arg1)->v2);
  {
    // StagInt typemap (out)
    resultobj = PyLong_FromLongLong((long long) result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_edge_weight_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::edge *arg1 = (stag::edge *) 0 ;
  StagReal arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "edge_weight_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__edge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "edge_weight_set" "', argument " "1"" of type '" "stag::edge *""'"); 
  }
  arg1 = reinterpret_cast< stag::edge * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "edge_weight_set" "', argument " "2"" of type '" "StagReal""'");
  } 
  arg2 = static_cast< StagReal >(val2);
  if (arg1) (arg1)->weight = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_edge_weight_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::edge *arg1 = (stag::edge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  StagReal result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__edge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "edge_weight_get" "', argument " "1"" of type '" "stag::edge *""'"); 
  }
  arg1 = reinterpret_cast< stag::edge * >(argp1);
  result = (StagReal) ((arg1)->weight);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_edge(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::edge *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_edge", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (stag::edge *)new stag::edge();
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stag__edge, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_edge(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::edge *arg1 = (stag::edge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__edge, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_edge" "', argument " "1"" of type '" "stag::edge *""'"); 
  }
  arg1 = reinterpret_cast< stag::edge * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *edge_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_stag__edge, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *edge_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_LocalGraph_degree(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::LocalGraph *arg1 = (stag::LocalGraph *) 0 ;
  StagInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  StagReal result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LocalGraph_degree", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__LocalGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalGraph_degree" "', argument " "1"" of type '" "stag::LocalGraph *""'"); 
  }
  arg1 = reinterpret_cast< stag::LocalGraph * >(argp1);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg2 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[1]);
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try {
        if (upcall) {
          Swig::DirectorPureVirtualException::raise("stag::LocalGraph::degree");
        } else {
          result = (StagReal)(arg1)->degree(arg2);
        }
      } catch (std::invalid_argument &e) {
        PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
        return NULL;
      } catch (std::runtime_error &e) {
        PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
        return NULL;
      } catch (std::domain_error &e) {
        PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
        return NULL;
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalGraph_degree_unweighted(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::LocalGraph *arg1 = (stag::LocalGraph *) 0 ;
  StagInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  StagInt result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LocalGraph_degree_unweighted", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__LocalGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalGraph_degree_unweighted" "', argument " "1"" of type '" "stag::LocalGraph *""'"); 
  }
  arg1 = reinterpret_cast< stag::LocalGraph * >(argp1);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg2 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[1]);
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try {
        if (upcall) {
          Swig::DirectorPureVirtualException::raise("stag::LocalGraph::degree_unweighted");
        } else {
          result = (arg1)->degree_unweighted(arg2);
        }
      } catch (std::invalid_argument &e) {
        PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
        return NULL;
      } catch (std::runtime_error &e) {
        PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
        return NULL;
      } catch (std::domain_error &e) {
        PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
        return NULL;
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  {
    // StagInt typemap (out)
    resultobj = PyLong_FromLongLong((long long) result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalGraph_neighbors(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::LocalGraph *arg1 = (stag::LocalGraph *) 0 ;
  StagInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  SwigValueWrapper< std::vector< stag::edge > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LocalGraph_neighbors", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__LocalGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalGraph_neighbors" "', argument " "1"" of type '" "stag::LocalGraph *""'"); 
  }
  arg1 = reinterpret_cast< stag::LocalGraph * >(argp1);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg2 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[1]);
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try {
        if (upcall) {
          Swig::DirectorPureVirtualException::raise("stag::LocalGraph::neighbors");
        } else {
          result = (arg1)->neighbors(arg2);
        }
      } catch (std::invalid_argument &e) {
        PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
        return NULL;
      } catch (std::runtime_error &e) {
        PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
        return NULL;
      } catch (std::domain_error &e) {
        PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
        return NULL;
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  {
    // Return a vector of edges as a list of tuples
    StagInt outer_length = (&result)->size();
    resultobj = PyList_New(outer_length);
    
    // Construct a new 3-tuple for each inner object, and add to the list.
    for (StagInt i = 0; i < outer_length; i++) {
      PyObject* new_tuple_object = PyTuple_Pack(
        3,
        PyLong_FromLongLong((&result)->at(i).v1),
        PyLong_FromLongLong((&result)->at(i).v2),
        PyFloat_FromDouble((&result)->at(i).weight));
      
      PyList_SET_ITEM(resultobj, i, new_tuple_object);
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalGraph_neighbors_unweighted(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::LocalGraph *arg1 = (stag::LocalGraph *) 0 ;
  StagInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  std::vector< StagInt > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LocalGraph_neighbors_unweighted", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__LocalGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalGraph_neighbors_unweighted" "', argument " "1"" of type '" "stag::LocalGraph *""'"); 
  }
  arg1 = reinterpret_cast< stag::LocalGraph * >(argp1);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg2 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[1]);
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try {
        if (upcall) {
          Swig::DirectorPureVirtualException::raise("stag::LocalGraph::neighbors_unweighted");
        } else {
          result = (arg1)->neighbors_unweighted(arg2);
        }
      } catch (std::invalid_argument &e) {
        PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
        return NULL;
      } catch (std::runtime_error &e) {
        PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
        return NULL;
      } catch (std::domain_error &e) {
        PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
        return NULL;
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  {
    // For non-pointer output vectors, we just copy the data into a numpy array.
    // The copying at least happens still on the C++ side so will be relatively
    // fast and optimised by the compiler.
    //
    // This adds a small 'constant factor' to the running time of the algorithm
    // in STAGPy over C++ STAG.
    npy_intp length = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &length, NPY_INT64);
    memcpy(PyArray_DATA((PyArrayObject*) resultobj),
      (&result)->data(),
      sizeof(int64_t) * length);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalGraph_degrees(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::LocalGraph *arg1 = (stag::LocalGraph *) 0 ;
  std::vector< StagInt > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  std::vector< int64_t > temp_vec2 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  std::vector< StagReal > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LocalGraph_degrees", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__LocalGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalGraph_degrees" "', argument " "1"" of type '" "stag::LocalGraph *""'"); 
  }
  arg1 = reinterpret_cast< stag::LocalGraph * >(argp1);
  {
    // Get the number of elements in the numpy array2
    npy_intp size[1] = {
      PyArray_DIMS((PyArrayObject*) swig_obj[1])[0] 
    };
    
    // Check that the dimensions of the array2 are correct
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_INT64,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    
    // Get a pointer to the data in the numpy array2
    int64_t* data_ptr = (int64_t*) array_data(array2);
    
    // Copy the numpy data into the new vector.
    temp_vec2.reserve(size[0]);
    for (int i = 0; i < size[0]; i++) {
      temp_vec2.push_back(data_ptr[i]);
    }
    arg2 = temp_vec2;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try {
        if (upcall) {
          Swig::DirectorPureVirtualException::raise("stag::LocalGraph::degrees");
        } else {
          result = (arg1)->degrees(arg2);
        }
      } catch (std::invalid_argument &e) {
        PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
        return NULL;
      } catch (std::runtime_error &e) {
        PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
        return NULL;
      } catch (std::domain_error &e) {
        PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
        return NULL;
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  {
    // For non-pointer output vectors, we just copy the data into a numpy array.
    // The copying at least happens still on the C++ side so will be relatively
    // fast and optimised by the compiler.
    //
    // This adds a small 'constant factor' to the running time of the algorithm
    // in STAGPy over C++ STAG.
    npy_intp length = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &length, NPY_DOUBLE);
    memcpy(PyArray_DATA((PyArrayObject*) resultobj),
      (&result)->data(),
      sizeof(double) * length);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalGraph_degrees_unweighted(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::LocalGraph *arg1 = (stag::LocalGraph *) 0 ;
  std::vector< StagInt > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  std::vector< int64_t > temp_vec2 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  std::vector< StagInt > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LocalGraph_degrees_unweighted", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__LocalGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalGraph_degrees_unweighted" "', argument " "1"" of type '" "stag::LocalGraph *""'"); 
  }
  arg1 = reinterpret_cast< stag::LocalGraph * >(argp1);
  {
    // Get the number of elements in the numpy array2
    npy_intp size[1] = {
      PyArray_DIMS((PyArrayObject*) swig_obj[1])[0] 
    };
    
    // Check that the dimensions of the array2 are correct
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_INT64,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    
    // Get a pointer to the data in the numpy array2
    int64_t* data_ptr = (int64_t*) array_data(array2);
    
    // Copy the numpy data into the new vector.
    temp_vec2.reserve(size[0]);
    for (int i = 0; i < size[0]; i++) {
      temp_vec2.push_back(data_ptr[i]);
    }
    arg2 = temp_vec2;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try {
        if (upcall) {
          Swig::DirectorPureVirtualException::raise("stag::LocalGraph::degrees_unweighted");
        } else {
          result = (arg1)->degrees_unweighted(arg2);
        }
      } catch (std::invalid_argument &e) {
        PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
        return NULL;
      } catch (std::runtime_error &e) {
        PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
        return NULL;
      } catch (std::domain_error &e) {
        PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
        return NULL;
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  {
    // For non-pointer output vectors, we just copy the data into a numpy array.
    // The copying at least happens still on the C++ side so will be relatively
    // fast and optimised by the compiler.
    //
    // This adds a small 'constant factor' to the running time of the algorithm
    // in STAGPy over C++ STAG.
    npy_intp length = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &length, NPY_INT64);
    memcpy(PyArray_DATA((PyArrayObject*) resultobj),
      (&result)->data(),
      sizeof(int64_t) * length);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalGraph_vertex_exists(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::LocalGraph *arg1 = (stag::LocalGraph *) 0 ;
  StagInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LocalGraph_vertex_exists", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__LocalGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalGraph_vertex_exists" "', argument " "1"" of type '" "stag::LocalGraph *""'"); 
  }
  arg1 = reinterpret_cast< stag::LocalGraph * >(argp1);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg2 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[1]);
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try {
        if (upcall) {
          Swig::DirectorPureVirtualException::raise("stag::LocalGraph::vertex_exists");
        } else {
          result = (bool)(arg1)->vertex_exists(arg2);
        }
      } catch (std::invalid_argument &e) {
        PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
        return NULL;
      } catch (std::runtime_error &e) {
        PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
        return NULL;
      } catch (std::domain_error &e) {
        PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
        return NULL;
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LocalGraph(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::LocalGraph *arg1 = (stag::LocalGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__LocalGraph, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LocalGraph" "', argument " "1"" of type '" "stag::LocalGraph *""'"); 
  }
  arg1 = reinterpret_cast< stag::LocalGraph * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LocalGraph(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  stag::LocalGraph *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try {
      if ( arg1 != Py_None ) {
        /* subclassed */
        result = (stag::LocalGraph *)new SwigDirector_LocalGraph(arg1); 
      } else {
        SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor"); 
        SWIG_fail;
      }
      
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stag__LocalGraph, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_LocalGraph(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::LocalGraph *arg1 = (stag::LocalGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__LocalGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_LocalGraph" "', argument " "1"" of type '" "stag::LocalGraph *""'"); 
  }
  arg1 = reinterpret_cast< stag::LocalGraph * >(argp1);
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LocalGraph_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_stag__LocalGraph, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LocalGraph_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Graph__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SprsMat *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  stag::Graph *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Graph" "', argument " "1"" of type '" "SprsMat const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Graph" "', argument " "1"" of type '" "SprsMat const &""'"); 
  }
  arg1 = reinterpret_cast< SprsMat * >(argp1);
  {
    try {
      result = (stag::Graph *)new stag::Graph((SprsMat const &)*arg1);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stag__Graph, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Graph__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< StagInt > *arg1 = 0 ;
  std::vector< StagInt > *arg2 = 0 ;
  std::vector< StagReal > *arg3 = 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  std::vector< int64_t > temp_vec1 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  std::vector< int64_t > temp_vec2 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  std::vector< double > temp_vec3 ;
  stag::Graph *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    // Get the number of elements in the numpy array1
    npy_intp size[1] = {
      PyArray_DIMS((PyArrayObject*) swig_obj[0])[0] 
    };
    
    // Check that the dimensions of the array1 are correct
    array1 = obj_to_array_contiguous_allow_conversion(swig_obj[0],
      NPY_INT64,
      &is_new_object1);
    if (!array1 || !require_dimensions(array1, 1) ||
      !require_size(array1, size, 1)) SWIG_fail;
    
    // Get a pointer to the data in the numpy array1
    int64_t* data_ptr = (int64_t*) array_data(array1);
    
    // Copy the numpy data into the new vector.
    temp_vec1.reserve(size[0]);
    for (int i = 0; i < size[0]; i++) {
      temp_vec1.push_back(data_ptr[i]);
    }
    arg1 = &temp_vec1;
  }
  {
    // Get the number of elements in the numpy array2
    npy_intp size[1] = {
      PyArray_DIMS((PyArrayObject*) swig_obj[1])[0] 
    };
    
    // Check that the dimensions of the array2 are correct
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_INT64,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    
    // Get a pointer to the data in the numpy array2
    int64_t* data_ptr = (int64_t*) array_data(array2);
    
    // Copy the numpy data into the new vector.
    temp_vec2.reserve(size[0]);
    for (int i = 0; i < size[0]; i++) {
      temp_vec2.push_back(data_ptr[i]);
    }
    arg2 = &temp_vec2;
  }
  {
    // Get the number of elements in the numpy array3
    npy_intp size[1] = {
      PyArray_DIMS((PyArrayObject*) swig_obj[2])[0] 
    };
    
    // Check that the dimensions of the array3 are correct
    array3 = obj_to_array_contiguous_allow_conversion(swig_obj[2],
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    
    // Get a pointer to the data in the numpy array3
    double* data_ptr = (double*) array_data(array3);
    
    // Copy the numpy data into the new vector.
    temp_vec3.reserve(size[0]);
    for (int i = 0; i < size[0]; i++) {
      temp_vec3.push_back(data_ptr[i]);
    }
    arg3 = &temp_vec3;
  }
  {
    try {
      result = (stag::Graph *)new stag::Graph(*arg1,*arg2,*arg3);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stag__Graph, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Graph(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Graph", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Graph__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = is_array((PyObject *) argv[0]) ? 1 : 0;
    }
    if (_v) {
      {
        _v = is_array((PyObject *) argv[1]) ? 1 : 0;
      }
      if (_v) {
        {
          _v = is_array((PyObject *) argv[2]) ? 1 : 0;
        }
        if (_v) {
          return _wrap_new_Graph__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Graph'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    stag::Graph::Graph(SprsMat const &)\n"
    "    stag::Graph::Graph(std::vector< StagInt > &,std::vector< StagInt > &,std::vector< StagReal > &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Graph_adjacency(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = (stag::Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SprsMat *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_adjacency" "', argument " "1"" of type '" "stag::Graph const *""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  {
    try {
      result = (SprsMat *)((stag::Graph const *)arg1)->adjacency();
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_laplacian(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = (stag::Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SprsMat *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_laplacian" "', argument " "1"" of type '" "stag::Graph *""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  {
    try {
      result = (SprsMat *)(arg1)->laplacian();
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_normalised_laplacian(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = (stag::Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SprsMat *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_normalised_laplacian" "', argument " "1"" of type '" "stag::Graph *""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  {
    try {
      result = (SprsMat *)(arg1)->normalised_laplacian();
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_signless_laplacian(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = (stag::Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SprsMat *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_signless_laplacian" "', argument " "1"" of type '" "stag::Graph *""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  {
    try {
      result = (SprsMat *)(arg1)->signless_laplacian();
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_normalised_signless_laplacian(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = (stag::Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SprsMat *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_normalised_signless_laplacian" "', argument " "1"" of type '" "stag::Graph *""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  {
    try {
      result = (SprsMat *)(arg1)->normalised_signless_laplacian();
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_degree_matrix(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = (stag::Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SprsMat *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_degree_matrix" "', argument " "1"" of type '" "stag::Graph *""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  {
    try {
      result = (SprsMat *)(arg1)->degree_matrix();
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_inverse_degree_matrix(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = (stag::Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SprsMat *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_inverse_degree_matrix" "', argument " "1"" of type '" "stag::Graph *""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  {
    try {
      result = (SprsMat *)(arg1)->inverse_degree_matrix();
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_lazy_random_walk_matrix(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = (stag::Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SprsMat *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_lazy_random_walk_matrix" "', argument " "1"" of type '" "stag::Graph *""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  {
    try {
      result = (SprsMat *)(arg1)->lazy_random_walk_matrix();
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_total_volume(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = (stag::Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  StagReal result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_total_volume" "', argument " "1"" of type '" "stag::Graph *""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  {
    try {
      result = (StagReal)(arg1)->total_volume();
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_average_degree(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = (stag::Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  StagReal result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_average_degree" "', argument " "1"" of type '" "stag::Graph *""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  {
    try {
      result = (StagReal)(arg1)->average_degree();
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_number_of_vertices(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = (stag::Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  StagInt result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_number_of_vertices" "', argument " "1"" of type '" "stag::Graph const *""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  {
    try {
      result = ((stag::Graph const *)arg1)->number_of_vertices();
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // StagInt typemap (out)
    resultobj = PyLong_FromLongLong((long long) result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_number_of_edges(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = (stag::Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  StagInt result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_number_of_edges" "', argument " "1"" of type '" "stag::Graph const *""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  {
    try {
      result = ((stag::Graph const *)arg1)->number_of_edges();
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // StagInt typemap (out)
    resultobj = PyLong_FromLongLong((long long) result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_add_edge(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = (stag::Graph *) 0 ;
  StagInt arg2 ;
  StagInt arg3 ;
  StagReal arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Graph_add_edge", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_add_edge" "', argument " "1"" of type '" "stag::Graph *""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg2 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[1]);
  }
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[2])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg3 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[2]);
  }
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Graph_add_edge" "', argument " "4"" of type '" "StagReal""'");
  } 
  arg4 = static_cast< StagReal >(val4);
  {
    try {
      (arg1)->add_edge(arg2,arg3,arg4);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_remove_edge(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = (stag::Graph *) 0 ;
  StagInt arg2 ;
  StagInt arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Graph_remove_edge", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_remove_edge" "', argument " "1"" of type '" "stag::Graph *""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg2 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[1]);
  }
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[2])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg3 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[2]);
  }
  {
    try {
      (arg1)->remove_edge(arg2,arg3);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_has_self_loops(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = (stag::Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_has_self_loops" "', argument " "1"" of type '" "stag::Graph const *""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  {
    try {
      result = (bool)((stag::Graph const *)arg1)->has_self_loops();
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_is_connected(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = (stag::Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_is_connected" "', argument " "1"" of type '" "stag::Graph *""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  {
    try {
      result = (bool)(arg1)->is_connected();
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_subgraph(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = (stag::Graph *) 0 ;
  std::vector< StagInt > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  std::vector< int64_t > temp_vec2 ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< stag::Graph > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Graph_subgraph", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_subgraph" "', argument " "1"" of type '" "stag::Graph *""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  {
    // Get the number of elements in the numpy array2
    npy_intp size[1] = {
      PyArray_DIMS((PyArrayObject*) swig_obj[1])[0] 
    };
    
    // Check that the dimensions of the array2 are correct
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_INT64,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    
    // Get a pointer to the data in the numpy array2
    int64_t* data_ptr = (int64_t*) array_data(array2);
    
    // Copy the numpy data into the new vector.
    temp_vec2.reserve(size[0]);
    for (int i = 0; i < size[0]; i++) {
      temp_vec2.push_back(data_ptr[i]);
    }
    arg2 = &temp_vec2;
  }
  {
    try {
      result = (arg1)->subgraph(*arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new stag::Graph(result)), SWIGTYPE_p_stag__Graph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_disjoint_union(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = (stag::Graph *) 0 ;
  stag::Graph *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< stag::Graph > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Graph_disjoint_union", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_disjoint_union" "', argument " "1"" of type '" "stag::Graph *""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_stag__Graph,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Graph_disjoint_union" "', argument " "2"" of type '" "stag::Graph &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Graph_disjoint_union" "', argument " "2"" of type '" "stag::Graph &""'"); 
  }
  arg2 = reinterpret_cast< stag::Graph * >(argp2);
  {
    try {
      result = (arg1)->disjoint_union(*arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new stag::Graph(result)), SWIGTYPE_p_stag__Graph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_degree(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = (stag::Graph *) 0 ;
  StagInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  StagReal result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Graph_degree", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_degree" "', argument " "1"" of type '" "stag::Graph *""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg2 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[1]);
  }
  {
    try {
      result = (StagReal)(arg1)->degree(arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_degree_unweighted(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = (stag::Graph *) 0 ;
  StagInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  StagInt result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Graph_degree_unweighted", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_degree_unweighted" "', argument " "1"" of type '" "stag::Graph *""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg2 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[1]);
  }
  {
    try {
      result = (arg1)->degree_unweighted(arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // StagInt typemap (out)
    resultobj = PyLong_FromLongLong((long long) result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_neighbors(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = (stag::Graph *) 0 ;
  StagInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< std::vector< stag::edge > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Graph_neighbors", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_neighbors" "', argument " "1"" of type '" "stag::Graph *""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg2 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[1]);
  }
  {
    try {
      result = (arg1)->neighbors(arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // Return a vector of edges as a list of tuples
    StagInt outer_length = (&result)->size();
    resultobj = PyList_New(outer_length);
    
    // Construct a new 3-tuple for each inner object, and add to the list.
    for (StagInt i = 0; i < outer_length; i++) {
      PyObject* new_tuple_object = PyTuple_Pack(
        3,
        PyLong_FromLongLong((&result)->at(i).v1),
        PyLong_FromLongLong((&result)->at(i).v2),
        PyFloat_FromDouble((&result)->at(i).weight));
      
      PyList_SET_ITEM(resultobj, i, new_tuple_object);
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_neighbors_unweighted(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = (stag::Graph *) 0 ;
  StagInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  std::vector< StagInt > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Graph_neighbors_unweighted", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_neighbors_unweighted" "', argument " "1"" of type '" "stag::Graph *""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg2 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[1]);
  }
  {
    try {
      result = (arg1)->neighbors_unweighted(arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // For non-pointer output vectors, we just copy the data into a numpy array.
    // The copying at least happens still on the C++ side so will be relatively
    // fast and optimised by the compiler.
    //
    // This adds a small 'constant factor' to the running time of the algorithm
    // in STAGPy over C++ STAG.
    npy_intp length = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &length, NPY_INT64);
    memcpy(PyArray_DATA((PyArrayObject*) resultobj),
      (&result)->data(),
      sizeof(int64_t) * length);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_degrees(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = (stag::Graph *) 0 ;
  std::vector< StagInt > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  std::vector< int64_t > temp_vec2 ;
  PyObject *swig_obj[2] ;
  std::vector< StagReal > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Graph_degrees", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_degrees" "', argument " "1"" of type '" "stag::Graph *""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  {
    // Get the number of elements in the numpy array2
    npy_intp size[1] = {
      PyArray_DIMS((PyArrayObject*) swig_obj[1])[0] 
    };
    
    // Check that the dimensions of the array2 are correct
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_INT64,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    
    // Get a pointer to the data in the numpy array2
    int64_t* data_ptr = (int64_t*) array_data(array2);
    
    // Copy the numpy data into the new vector.
    temp_vec2.reserve(size[0]);
    for (int i = 0; i < size[0]; i++) {
      temp_vec2.push_back(data_ptr[i]);
    }
    arg2 = temp_vec2;
  }
  {
    try {
      result = (arg1)->degrees(arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // For non-pointer output vectors, we just copy the data into a numpy array.
    // The copying at least happens still on the C++ side so will be relatively
    // fast and optimised by the compiler.
    //
    // This adds a small 'constant factor' to the running time of the algorithm
    // in STAGPy over C++ STAG.
    npy_intp length = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &length, NPY_DOUBLE);
    memcpy(PyArray_DATA((PyArrayObject*) resultobj),
      (&result)->data(),
      sizeof(double) * length);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_degrees_unweighted(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = (stag::Graph *) 0 ;
  std::vector< StagInt > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  std::vector< int64_t > temp_vec2 ;
  PyObject *swig_obj[2] ;
  std::vector< StagInt > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Graph_degrees_unweighted", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_degrees_unweighted" "', argument " "1"" of type '" "stag::Graph *""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  {
    // Get the number of elements in the numpy array2
    npy_intp size[1] = {
      PyArray_DIMS((PyArrayObject*) swig_obj[1])[0] 
    };
    
    // Check that the dimensions of the array2 are correct
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_INT64,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    
    // Get a pointer to the data in the numpy array2
    int64_t* data_ptr = (int64_t*) array_data(array2);
    
    // Copy the numpy data into the new vector.
    temp_vec2.reserve(size[0]);
    for (int i = 0; i < size[0]; i++) {
      temp_vec2.push_back(data_ptr[i]);
    }
    arg2 = temp_vec2;
  }
  {
    try {
      result = (arg1)->degrees_unweighted(arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // For non-pointer output vectors, we just copy the data into a numpy array.
    // The copying at least happens still on the C++ side so will be relatively
    // fast and optimised by the compiler.
    //
    // This adds a small 'constant factor' to the running time of the algorithm
    // in STAGPy over C++ STAG.
    npy_intp length = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &length, NPY_INT64);
    memcpy(PyArray_DATA((PyArrayObject*) resultobj),
      (&result)->data(),
      sizeof(int64_t) * length);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph_vertex_exists(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = (stag::Graph *) 0 ;
  StagInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Graph_vertex_exists", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_vertex_exists" "', argument " "1"" of type '" "stag::Graph *""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg2 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[1]);
  }
  {
    try {
      result = (bool)(arg1)->vertex_exists(arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Graph(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = (stag::Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__Graph, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Graph" "', argument " "1"" of type '" "stag::Graph *""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Graph___eq__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = (stag::Graph *) 0 ;
  stag::Graph *arg2 = (stag::Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Graph___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph___eq__" "', argument " "1"" of type '" "stag::Graph *""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_stag__Graph, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Graph___eq__" "', argument " "2"" of type '" "stag::Graph *""'"); 
  }
  arg2 = reinterpret_cast< stag::Graph * >(argp2);
  {
    try {
      result = (bool)stag_Graph___eq__(arg1,arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *Graph_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_stag__Graph, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Graph_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_AdjacencyListLocalGraph(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject *swig_obj[1] ;
  stag::AdjacencyListLocalGraph *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AdjacencyListLocalGraph" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AdjacencyListLocalGraph" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (stag::AdjacencyListLocalGraph *)new stag::AdjacencyListLocalGraph((std::string const &)*arg1);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stag__AdjacencyListLocalGraph, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdjacencyListLocalGraph_degree(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::AdjacencyListLocalGraph *arg1 = (stag::AdjacencyListLocalGraph *) 0 ;
  StagInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  StagReal result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "AdjacencyListLocalGraph_degree", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__AdjacencyListLocalGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdjacencyListLocalGraph_degree" "', argument " "1"" of type '" "stag::AdjacencyListLocalGraph *""'"); 
  }
  arg1 = reinterpret_cast< stag::AdjacencyListLocalGraph * >(argp1);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg2 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[1]);
  }
  {
    try {
      result = (StagReal)(arg1)->degree(arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdjacencyListLocalGraph_degree_unweighted(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::AdjacencyListLocalGraph *arg1 = (stag::AdjacencyListLocalGraph *) 0 ;
  StagInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  StagInt result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "AdjacencyListLocalGraph_degree_unweighted", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__AdjacencyListLocalGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdjacencyListLocalGraph_degree_unweighted" "', argument " "1"" of type '" "stag::AdjacencyListLocalGraph *""'"); 
  }
  arg1 = reinterpret_cast< stag::AdjacencyListLocalGraph * >(argp1);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg2 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[1]);
  }
  {
    try {
      result = (arg1)->degree_unweighted(arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // StagInt typemap (out)
    resultobj = PyLong_FromLongLong((long long) result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdjacencyListLocalGraph_neighbors(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::AdjacencyListLocalGraph *arg1 = (stag::AdjacencyListLocalGraph *) 0 ;
  StagInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< std::vector< stag::edge > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "AdjacencyListLocalGraph_neighbors", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__AdjacencyListLocalGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdjacencyListLocalGraph_neighbors" "', argument " "1"" of type '" "stag::AdjacencyListLocalGraph *""'"); 
  }
  arg1 = reinterpret_cast< stag::AdjacencyListLocalGraph * >(argp1);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg2 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[1]);
  }
  {
    try {
      result = (arg1)->neighbors(arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // Return a vector of edges as a list of tuples
    StagInt outer_length = (&result)->size();
    resultobj = PyList_New(outer_length);
    
    // Construct a new 3-tuple for each inner object, and add to the list.
    for (StagInt i = 0; i < outer_length; i++) {
      PyObject* new_tuple_object = PyTuple_Pack(
        3,
        PyLong_FromLongLong((&result)->at(i).v1),
        PyLong_FromLongLong((&result)->at(i).v2),
        PyFloat_FromDouble((&result)->at(i).weight));
      
      PyList_SET_ITEM(resultobj, i, new_tuple_object);
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdjacencyListLocalGraph_neighbors_unweighted(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::AdjacencyListLocalGraph *arg1 = (stag::AdjacencyListLocalGraph *) 0 ;
  StagInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  std::vector< StagInt > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "AdjacencyListLocalGraph_neighbors_unweighted", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__AdjacencyListLocalGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdjacencyListLocalGraph_neighbors_unweighted" "', argument " "1"" of type '" "stag::AdjacencyListLocalGraph *""'"); 
  }
  arg1 = reinterpret_cast< stag::AdjacencyListLocalGraph * >(argp1);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg2 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[1]);
  }
  {
    try {
      result = (arg1)->neighbors_unweighted(arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // For non-pointer output vectors, we just copy the data into a numpy array.
    // The copying at least happens still on the C++ side so will be relatively
    // fast and optimised by the compiler.
    //
    // This adds a small 'constant factor' to the running time of the algorithm
    // in STAGPy over C++ STAG.
    npy_intp length = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &length, NPY_INT64);
    memcpy(PyArray_DATA((PyArrayObject*) resultobj),
      (&result)->data(),
      sizeof(int64_t) * length);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdjacencyListLocalGraph_degrees(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::AdjacencyListLocalGraph *arg1 = (stag::AdjacencyListLocalGraph *) 0 ;
  std::vector< StagInt > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  std::vector< int64_t > temp_vec2 ;
  PyObject *swig_obj[2] ;
  std::vector< StagReal > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "AdjacencyListLocalGraph_degrees", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__AdjacencyListLocalGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdjacencyListLocalGraph_degrees" "', argument " "1"" of type '" "stag::AdjacencyListLocalGraph *""'"); 
  }
  arg1 = reinterpret_cast< stag::AdjacencyListLocalGraph * >(argp1);
  {
    // Get the number of elements in the numpy array2
    npy_intp size[1] = {
      PyArray_DIMS((PyArrayObject*) swig_obj[1])[0] 
    };
    
    // Check that the dimensions of the array2 are correct
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_INT64,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    
    // Get a pointer to the data in the numpy array2
    int64_t* data_ptr = (int64_t*) array_data(array2);
    
    // Copy the numpy data into the new vector.
    temp_vec2.reserve(size[0]);
    for (int i = 0; i < size[0]; i++) {
      temp_vec2.push_back(data_ptr[i]);
    }
    arg2 = temp_vec2;
  }
  {
    try {
      result = (arg1)->degrees(arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // For non-pointer output vectors, we just copy the data into a numpy array.
    // The copying at least happens still on the C++ side so will be relatively
    // fast and optimised by the compiler.
    //
    // This adds a small 'constant factor' to the running time of the algorithm
    // in STAGPy over C++ STAG.
    npy_intp length = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &length, NPY_DOUBLE);
    memcpy(PyArray_DATA((PyArrayObject*) resultobj),
      (&result)->data(),
      sizeof(double) * length);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdjacencyListLocalGraph_degrees_unweighted(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::AdjacencyListLocalGraph *arg1 = (stag::AdjacencyListLocalGraph *) 0 ;
  std::vector< StagInt > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  std::vector< int64_t > temp_vec2 ;
  PyObject *swig_obj[2] ;
  std::vector< StagInt > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "AdjacencyListLocalGraph_degrees_unweighted", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__AdjacencyListLocalGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdjacencyListLocalGraph_degrees_unweighted" "', argument " "1"" of type '" "stag::AdjacencyListLocalGraph *""'"); 
  }
  arg1 = reinterpret_cast< stag::AdjacencyListLocalGraph * >(argp1);
  {
    // Get the number of elements in the numpy array2
    npy_intp size[1] = {
      PyArray_DIMS((PyArrayObject*) swig_obj[1])[0] 
    };
    
    // Check that the dimensions of the array2 are correct
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_INT64,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    
    // Get a pointer to the data in the numpy array2
    int64_t* data_ptr = (int64_t*) array_data(array2);
    
    // Copy the numpy data into the new vector.
    temp_vec2.reserve(size[0]);
    for (int i = 0; i < size[0]; i++) {
      temp_vec2.push_back(data_ptr[i]);
    }
    arg2 = temp_vec2;
  }
  {
    try {
      result = (arg1)->degrees_unweighted(arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // For non-pointer output vectors, we just copy the data into a numpy array.
    // The copying at least happens still on the C++ side so will be relatively
    // fast and optimised by the compiler.
    //
    // This adds a small 'constant factor' to the running time of the algorithm
    // in STAGPy over C++ STAG.
    npy_intp length = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &length, NPY_INT64);
    memcpy(PyArray_DATA((PyArrayObject*) resultobj),
      (&result)->data(),
      sizeof(int64_t) * length);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdjacencyListLocalGraph_vertex_exists(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::AdjacencyListLocalGraph *arg1 = (stag::AdjacencyListLocalGraph *) 0 ;
  StagInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "AdjacencyListLocalGraph_vertex_exists", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__AdjacencyListLocalGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdjacencyListLocalGraph_vertex_exists" "', argument " "1"" of type '" "stag::AdjacencyListLocalGraph *""'"); 
  }
  arg1 = reinterpret_cast< stag::AdjacencyListLocalGraph * >(argp1);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg2 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[1]);
  }
  {
    try {
      result = (bool)(arg1)->vertex_exists(arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AdjacencyListLocalGraph(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::AdjacencyListLocalGraph *arg1 = (stag::AdjacencyListLocalGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__AdjacencyListLocalGraph, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AdjacencyListLocalGraph" "', argument " "1"" of type '" "stag::AdjacencyListLocalGraph *""'"); 
  }
  arg1 = reinterpret_cast< stag::AdjacencyListLocalGraph * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AdjacencyListLocalGraph_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_stag__AdjacencyListLocalGraph, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *AdjacencyListLocalGraph_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_cycle_graph(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  StagInt arg1 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< stag::Graph > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[0])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg1 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[0]);
  }
  {
    try {
      result = stag::cycle_graph(SWIG_STD_MOVE(arg1));
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new stag::Graph(result)), SWIGTYPE_p_stag__Graph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_complete_graph(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  StagInt arg1 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< stag::Graph > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[0])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg1 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[0]);
  }
  {
    try {
      result = stag::complete_graph(SWIG_STD_MOVE(arg1));
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new stag::Graph(result)), SWIGTYPE_p_stag__Graph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_barbell_graph(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  StagInt arg1 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< stag::Graph > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[0])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg1 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[0]);
  }
  {
    try {
      result = stag::barbell_graph(SWIG_STD_MOVE(arg1));
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new stag::Graph(result)), SWIGTYPE_p_stag__Graph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_star_graph(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  StagInt arg1 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< stag::Graph > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[0])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg1 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[0]);
  }
  {
    try {
      result = stag::star_graph(SWIG_STD_MOVE(arg1));
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new stag::Graph(result)), SWIGTYPE_p_stag__Graph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_identity_graph(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  StagInt arg1 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< stag::Graph > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[0])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg1 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[0]);
  }
  {
    try {
      result = stag::identity_graph(SWIG_STD_MOVE(arg1));
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new stag::Graph(result)), SWIGTYPE_p_stag__Graph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___eq____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = 0 ;
  stag::Graph *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_stag__Graph,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__eq__" "', argument " "1"" of type '" "stag::Graph const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__eq__" "', argument " "1"" of type '" "stag::Graph const &""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_stag__Graph,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__eq__" "', argument " "2"" of type '" "stag::Graph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__eq__" "', argument " "2"" of type '" "stag::Graph const &""'"); 
  }
  arg2 = reinterpret_cast< stag::Graph * >(argp2);
  {
    try {
      result = (bool)stag::operator ==((stag::Graph const &)*arg1,(stag::Graph const &)*arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap___ne____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = 0 ;
  stag::Graph *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_stag__Graph,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__ne__" "', argument " "1"" of type '" "stag::Graph const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__ne__" "', argument " "1"" of type '" "stag::Graph const &""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_stag__Graph,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__ne__" "', argument " "2"" of type '" "stag::Graph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__ne__" "', argument " "2"" of type '" "stag::Graph const &""'"); 
  }
  arg2 = reinterpret_cast< stag::Graph * >(argp2);
  {
    try {
      result = (bool)stag::operator !=((stag::Graph const &)*arg1,(stag::Graph const &)*arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap___eq____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stag::edge *arg1 = 0 ;
  stag::edge *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_stag__edge,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__eq__" "', argument " "1"" of type '" "stag::edge const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__eq__" "', argument " "1"" of type '" "stag::edge const &""'"); 
  }
  arg1 = reinterpret_cast< stag::edge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_stag__edge,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__eq__" "', argument " "2"" of type '" "stag::edge const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__eq__" "', argument " "2"" of type '" "stag::edge const &""'"); 
  }
  arg2 = reinterpret_cast< stag::edge * >(argp2);
  {
    try {
      result = (bool)stag::operator ==((stag::edge const &)*arg1,(stag::edge const &)*arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap___eq__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "__eq__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_stag__Graph, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_stag__Graph, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___eq____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_stag__edge, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_stag__edge, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___eq____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap___ne____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stag::edge *arg1 = 0 ;
  stag::edge *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_stag__edge,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__ne__" "', argument " "1"" of type '" "stag::edge const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__ne__" "', argument " "1"" of type '" "stag::edge const &""'"); 
  }
  arg1 = reinterpret_cast< stag::edge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_stag__edge,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__ne__" "', argument " "2"" of type '" "stag::edge const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__ne__" "', argument " "2"" of type '" "stag::edge const &""'"); 
  }
  arg2 = reinterpret_cast< stag::edge * >(argp2);
  {
    try {
      result = (bool)stag::operator !=((stag::edge const &)*arg1,(stag::edge const &)*arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap___ne__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "__ne__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_stag__Graph, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_stag__Graph, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___ne____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_stag__edge, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_stag__edge, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___ne____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap___add__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = 0 ;
  stag::Graph *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< stag::Graph > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "__add__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_stag__Graph,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__add__" "', argument " "1"" of type '" "stag::Graph const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__add__" "', argument " "1"" of type '" "stag::Graph const &""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_stag__Graph,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__add__" "', argument " "2"" of type '" "stag::Graph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__add__" "', argument " "2"" of type '" "stag::Graph const &""'"); 
  }
  arg2 = reinterpret_cast< stag::Graph * >(argp2);
  {
    try {
      result = stag::operator +((stag::Graph const &)*arg1,(stag::Graph const &)*arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new stag::Graph(result)), SWIGTYPE_p_stag__Graph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_sprsMatValues(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SprsMat *arg1 = (SprsMat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< StagReal > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sprsMatValues" "', argument " "1"" of type '" "SprsMat const *""'"); 
  }
  arg1 = reinterpret_cast< SprsMat * >(argp1);
  {
    try {
      result = stag::sprsMatValues((Eigen::SparseMatrix< StagReal,Eigen::ColMajor,StagInt > const *)arg1);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // For non-pointer output vectors, we just copy the data into a numpy array.
    // The copying at least happens still on the C++ side so will be relatively
    // fast and optimised by the compiler.
    //
    // This adds a small 'constant factor' to the running time of the algorithm
    // in STAGPy over C++ STAG.
    npy_intp length = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &length, NPY_DOUBLE);
    memcpy(PyArray_DATA((PyArrayObject*) resultobj),
      (&result)->data(),
      sizeof(double) * length);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sprsMatInnerIndices(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SprsMat *arg1 = (SprsMat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< StagInt > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sprsMatInnerIndices" "', argument " "1"" of type '" "SprsMat const *""'"); 
  }
  arg1 = reinterpret_cast< SprsMat * >(argp1);
  {
    try {
      result = stag::sprsMatInnerIndices((Eigen::SparseMatrix< StagReal,Eigen::ColMajor,StagInt > const *)arg1);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // For non-pointer output vectors, we just copy the data into a numpy array.
    // The copying at least happens still on the C++ side so will be relatively
    // fast and optimised by the compiler.
    //
    // This adds a small 'constant factor' to the running time of the algorithm
    // in STAGPy over C++ STAG.
    npy_intp length = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &length, NPY_INT64);
    memcpy(PyArray_DATA((PyArrayObject*) resultobj),
      (&result)->data(),
      sizeof(int64_t) * length);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sprsMatOuterStarts(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SprsMat *arg1 = (SprsMat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< StagInt > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sprsMatOuterStarts" "', argument " "1"" of type '" "SprsMat const *""'"); 
  }
  arg1 = reinterpret_cast< SprsMat * >(argp1);
  {
    try {
      result = stag::sprsMatOuterStarts((Eigen::SparseMatrix< StagReal,Eigen::ColMajor,StagInt > const *)arg1);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // For non-pointer output vectors, we just copy the data into a numpy array.
    // The copying at least happens still on the C++ side so will be relatively
    // fast and optimised by the compiler.
    //
    // This adds a small 'constant factor' to the running time of the algorithm
    // in STAGPy over C++ STAG.
    npy_intp length = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &length, NPY_INT64);
    memcpy(PyArray_DATA((PyArrayObject*) resultobj),
      (&result)->data(),
      sizeof(int64_t) * length);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sprsMatToVec__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SprsMat *arg1 = (SprsMat *) 0 ;
  StagInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< StagReal > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sprsMatToVec" "', argument " "1"" of type '" "SprsMat const *""'"); 
  }
  arg1 = reinterpret_cast< SprsMat * >(argp1);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg2 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[1]);
  }
  {
    try {
      result = stag::sprsMatToVec((Eigen::SparseMatrix< StagReal,Eigen::ColMajor,StagInt > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // For non-pointer output vectors, we just copy the data into a numpy array.
    // The copying at least happens still on the C++ side so will be relatively
    // fast and optimised by the compiler.
    //
    // This adds a small 'constant factor' to the running time of the algorithm
    // in STAGPy over C++ STAG.
    npy_intp length = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &length, NPY_DOUBLE);
    memcpy(PyArray_DATA((PyArrayObject*) resultobj),
      (&result)->data(),
      sizeof(double) * length);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sprsMatToVec__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SprsMat *arg1 = (SprsMat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< StagReal > result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sprsMatToVec" "', argument " "1"" of type '" "SprsMat const *""'"); 
  }
  arg1 = reinterpret_cast< SprsMat * >(argp1);
  {
    try {
      result = stag::sprsMatToVec((Eigen::SparseMatrix< StagReal,Eigen::ColMajor,StagInt > const *)arg1);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // For non-pointer output vectors, we just copy the data into a numpy array.
    // The copying at least happens still on the C++ side so will be relatively
    // fast and optimised by the compiler.
    //
    // This adds a small 'constant factor' to the running time of the algorithm
    // in STAGPy over C++ STAG.
    npy_intp length = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &length, NPY_DOUBLE);
    memcpy(PyArray_DATA((PyArrayObject*) resultobj),
      (&result)->data(),
      sizeof(double) * length);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sprsMatToVec(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "sprsMatToVec", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_sprsMatToVec__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        // Typecheck for StagInt
        _v = PyLong_Check((PyObject*) argv[1]);
      }
      if (_v) {
        return _wrap_sprsMatToVec__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'sprsMatToVec'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    stag::sprsMatToVec(SprsMat const *,StagInt)\n"
    "    stag::sprsMatToVec(SprsMat const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_sprsMatFromVectors(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< StagInt > *arg1 = 0 ;
  std::vector< StagInt > *arg2 = 0 ;
  std::vector< StagReal > *arg3 = 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  std::vector< int64_t > temp_vec1 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  std::vector< int64_t > temp_vec2 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  std::vector< double > temp_vec3 ;
  PyObject *swig_obj[3] ;
  SprsMat result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "sprsMatFromVectors", 3, 3, swig_obj)) SWIG_fail;
  {
    // Get the number of elements in the numpy array1
    npy_intp size[1] = {
      PyArray_DIMS((PyArrayObject*) swig_obj[0])[0] 
    };
    
    // Check that the dimensions of the array1 are correct
    array1 = obj_to_array_contiguous_allow_conversion(swig_obj[0],
      NPY_INT64,
      &is_new_object1);
    if (!array1 || !require_dimensions(array1, 1) ||
      !require_size(array1, size, 1)) SWIG_fail;
    
    // Get a pointer to the data in the numpy array1
    int64_t* data_ptr = (int64_t*) array_data(array1);
    
    // Copy the numpy data into the new vector.
    temp_vec1.reserve(size[0]);
    for (int i = 0; i < size[0]; i++) {
      temp_vec1.push_back(data_ptr[i]);
    }
    arg1 = &temp_vec1;
  }
  {
    // Get the number of elements in the numpy array2
    npy_intp size[1] = {
      PyArray_DIMS((PyArrayObject*) swig_obj[1])[0] 
    };
    
    // Check that the dimensions of the array2 are correct
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_INT64,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    
    // Get a pointer to the data in the numpy array2
    int64_t* data_ptr = (int64_t*) array_data(array2);
    
    // Copy the numpy data into the new vector.
    temp_vec2.reserve(size[0]);
    for (int i = 0; i < size[0]; i++) {
      temp_vec2.push_back(data_ptr[i]);
    }
    arg2 = &temp_vec2;
  }
  {
    // Get the number of elements in the numpy array3
    npy_intp size[1] = {
      PyArray_DIMS((PyArrayObject*) swig_obj[2])[0] 
    };
    
    // Check that the dimensions of the array3 are correct
    array3 = obj_to_array_contiguous_allow_conversion(swig_obj[2],
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    
    // Get a pointer to the data in the numpy array3
    double* data_ptr = (double*) array_data(array3);
    
    // Copy the numpy data into the new vector.
    temp_vec3.reserve(size[0]);
    for (int i = 0; i < size[0]; i++) {
      temp_vec3.push_back(data_ptr[i]);
    }
    arg3 = &temp_vec3;
  }
  {
    try {
      result = stag::sprsMatFromVectors(*arg1,*arg2,*arg3);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new SprsMat(result)), SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_isSymmetric(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SprsMat *arg1 = (SprsMat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "isSymmetric" "', argument " "1"" of type '" "SprsMat const *""'"); 
  }
  arg1 = reinterpret_cast< SprsMat * >(argp1);
  {
    try {
      result = (bool)stag::isSymmetric((Eigen::SparseMatrix< StagReal,Eigen::ColMajor,StagInt > const *)arg1);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_safeGetline(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::istream *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  std::istream *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "safeGetline", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__istream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "safeGetline" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "safeGetline" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  arg1 = reinterpret_cast< std::istream * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "safeGetline" "', argument " "2"" of type '" "std::string &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "safeGetline" "', argument " "2"" of type '" "std::string &""'"); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  {
    try {
      result = (std::istream *) &stag::safeGetline(*arg1,*arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__istream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getTempFilename(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "getTempFilename", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = stag::getTempFilename();
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_openTempFile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::ofstream *arg1 = (std::ofstream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__ofstream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "openTempFile" "', argument " "1"" of type '" "std::ofstream *""'"); 
  }
  arg1 = reinterpret_cast< std::ofstream * >(argp1);
  {
    try {
      result = stag::openTempFile(arg1);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_spectral_cluster(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = (stag::Graph *) 0 ;
  StagInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  std::vector< StagInt > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "spectral_cluster", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spectral_cluster" "', argument " "1"" of type '" "stag::Graph *""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg2 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[1]);
  }
  {
    try {
      result = stag::spectral_cluster(arg1,SWIG_STD_MOVE(arg2));
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // For non-pointer output vectors, we just copy the data into a numpy array.
    // The copying at least happens still on the C++ side so will be relatively
    // fast and optimised by the compiler.
    //
    // This adds a small 'constant factor' to the running time of the algorithm
    // in STAGPy over C++ STAG.
    npy_intp length = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &length, NPY_INT64);
    memcpy(PyArray_DATA((PyArrayObject*) resultobj),
      (&result)->data(),
      sizeof(int64_t) * length);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cheeger_cut(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = (stag::Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< StagInt > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cheeger_cut" "', argument " "1"" of type '" "stag::Graph *""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  {
    try {
      result = stag::cheeger_cut(arg1);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // For non-pointer output vectors, we just copy the data into a numpy array.
    // The copying at least happens still on the C++ side so will be relatively
    // fast and optimised by the compiler.
    //
    // This adds a small 'constant factor' to the running time of the algorithm
    // in STAGPy over C++ STAG.
    npy_intp length = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &length, NPY_INT64);
    memcpy(PyArray_DATA((PyArrayObject*) resultobj),
      (&result)->data(),
      sizeof(int64_t) * length);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_local_cluster(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::LocalGraph *arg1 = (stag::LocalGraph *) 0 ;
  StagInt arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< StagInt > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "local_cluster", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__LocalGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "local_cluster" "', argument " "1"" of type '" "stag::LocalGraph *""'"); 
  }
  arg1 = reinterpret_cast< stag::LocalGraph * >(argp1);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg2 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[1]);
  }
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "local_cluster" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = stag::local_cluster(arg1,SWIG_STD_MOVE(arg2),arg3);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // For non-pointer output vectors, we just copy the data into a numpy array.
    // The copying at least happens still on the C++ side so will be relatively
    // fast and optimised by the compiler.
    //
    // This adds a small 'constant factor' to the running time of the algorithm
    // in STAGPy over C++ STAG.
    npy_intp length = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &length, NPY_INT64);
    memcpy(PyArray_DATA((PyArrayObject*) resultobj),
      (&result)->data(),
      sizeof(int64_t) * length);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_local_cluster_acl__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stag::LocalGraph *arg1 = (stag::LocalGraph *) 0 ;
  StagInt arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  std::vector< StagInt > result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__LocalGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "local_cluster_acl" "', argument " "1"" of type '" "stag::LocalGraph *""'"); 
  }
  arg1 = reinterpret_cast< stag::LocalGraph * >(argp1);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg2 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[1]);
  }
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "local_cluster_acl" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "local_cluster_acl" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = stag::local_cluster_acl(arg1,SWIG_STD_MOVE(arg2),arg3,arg4);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // For non-pointer output vectors, we just copy the data into a numpy array.
    // The copying at least happens still on the C++ side so will be relatively
    // fast and optimised by the compiler.
    //
    // This adds a small 'constant factor' to the running time of the algorithm
    // in STAGPy over C++ STAG.
    npy_intp length = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &length, NPY_INT64);
    memcpy(PyArray_DATA((PyArrayObject*) resultobj),
      (&result)->data(),
      sizeof(int64_t) * length);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_local_cluster_acl__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stag::LocalGraph *arg1 = (stag::LocalGraph *) 0 ;
  StagInt arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  std::vector< StagInt > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__LocalGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "local_cluster_acl" "', argument " "1"" of type '" "stag::LocalGraph *""'"); 
  }
  arg1 = reinterpret_cast< stag::LocalGraph * >(argp1);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg2 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[1]);
  }
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "local_cluster_acl" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = stag::local_cluster_acl(arg1,SWIG_STD_MOVE(arg2),arg3);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // For non-pointer output vectors, we just copy the data into a numpy array.
    // The copying at least happens still on the C++ side so will be relatively
    // fast and optimised by the compiler.
    //
    // This adds a small 'constant factor' to the running time of the algorithm
    // in STAGPy over C++ STAG.
    npy_intp length = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &length, NPY_INT64);
    memcpy(PyArray_DATA((PyArrayObject*) resultobj),
      (&result)->data(),
      sizeof(int64_t) * length);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_local_cluster_acl(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "local_cluster_acl", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stag__LocalGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        // Typecheck for StagInt
        _v = PyLong_Check((PyObject*) argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_local_cluster_acl__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stag__LocalGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        // Typecheck for StagInt
        _v = PyLong_Check((PyObject*) argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_local_cluster_acl__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'local_cluster_acl'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    stag::local_cluster_acl(stag::LocalGraph *,StagInt,double,double)\n"
    "    stag::local_cluster_acl(stag::LocalGraph *,StagInt,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_approximate_pagerank(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::LocalGraph *arg1 = (stag::LocalGraph *) 0 ;
  SprsMat *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  SwigValueWrapper< std::tuple< SprsMat,SprsMat > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "approximate_pagerank", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__LocalGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "approximate_pagerank" "', argument " "1"" of type '" "stag::LocalGraph *""'"); 
  }
  arg1 = reinterpret_cast< stag::LocalGraph * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "approximate_pagerank" "', argument " "2"" of type '" "SprsMat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "approximate_pagerank" "', argument " "2"" of type '" "SprsMat &""'"); 
  }
  arg2 = reinterpret_cast< SprsMat * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "approximate_pagerank" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "approximate_pagerank" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = stag::approximate_pagerank(arg1,*arg2,arg3,arg4);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::tuple< SprsMat,SprsMat >(result)), SWIGTYPE_p_std__tupleT_SprsMat_SprsMat_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sweep_set_conductance__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stag::LocalGraph *arg1 = (stag::LocalGraph *) 0 ;
  SprsMat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< StagInt > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__LocalGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sweep_set_conductance" "', argument " "1"" of type '" "stag::LocalGraph *""'"); 
  }
  arg1 = reinterpret_cast< stag::LocalGraph * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sweep_set_conductance" "', argument " "2"" of type '" "SprsMat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sweep_set_conductance" "', argument " "2"" of type '" "SprsMat &""'"); 
  }
  arg2 = reinterpret_cast< SprsMat * >(argp2);
  {
    try {
      result = stag::sweep_set_conductance(arg1,*arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // For non-pointer output vectors, we just copy the data into a numpy array.
    // The copying at least happens still on the C++ side so will be relatively
    // fast and optimised by the compiler.
    //
    // This adds a small 'constant factor' to the running time of the algorithm
    // in STAGPy over C++ STAG.
    npy_intp length = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &length, NPY_INT64);
    memcpy(PyArray_DATA((PyArrayObject*) resultobj),
      (&result)->data(),
      sizeof(int64_t) * length);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sweep_set_conductance__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = (stag::Graph *) 0 ;
  SprsMat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< StagInt > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sweep_set_conductance" "', argument " "1"" of type '" "stag::Graph *""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sweep_set_conductance" "', argument " "2"" of type '" "SprsMat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sweep_set_conductance" "', argument " "2"" of type '" "SprsMat &""'"); 
  }
  arg2 = reinterpret_cast< SprsMat * >(argp2);
  {
    try {
      result = stag::sweep_set_conductance(arg1,*arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // For non-pointer output vectors, we just copy the data into a numpy array.
    // The copying at least happens still on the C++ side so will be relatively
    // fast and optimised by the compiler.
    //
    // This adds a small 'constant factor' to the running time of the algorithm
    // in STAGPy over C++ STAG.
    npy_intp length = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &length, NPY_INT64);
    memcpy(PyArray_DATA((PyArrayObject*) resultobj),
      (&result)->data(),
      sizeof(int64_t) * length);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sweep_set_conductance(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "sweep_set_conductance", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stag__Graph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_sweep_set_conductance__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stag__LocalGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_sweep_set_conductance__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'sweep_set_conductance'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    stag::sweep_set_conductance(stag::LocalGraph *,SprsMat &)\n"
    "    stag::sweep_set_conductance(stag::Graph *,SprsMat &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_connected_component(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::LocalGraph *arg1 = (stag::LocalGraph *) 0 ;
  StagInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  std::vector< StagInt > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "connected_component", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__LocalGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connected_component" "', argument " "1"" of type '" "stag::LocalGraph *""'"); 
  }
  arg1 = reinterpret_cast< stag::LocalGraph * >(argp1);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg2 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[1]);
  }
  {
    try {
      result = stag::connected_component(arg1,SWIG_STD_MOVE(arg2));
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // For non-pointer output vectors, we just copy the data into a numpy array.
    // The copying at least happens still on the C++ side so will be relatively
    // fast and optimised by the compiler.
    //
    // This adds a small 'constant factor' to the running time of the algorithm
    // in STAGPy over C++ STAG.
    npy_intp length = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &length, NPY_INT64);
    memcpy(PyArray_DATA((PyArrayObject*) resultobj),
      (&result)->data(),
      sizeof(int64_t) * length);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_connected_components(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = (stag::Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< StagInt > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connected_components" "', argument " "1"" of type '" "stag::Graph *""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  {
    try {
      result = stag::connected_components(arg1);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // For a nested vector, we'd like to return a python list of numpy
    // arrays.
    StagInt outer_length = (&result)->size();
    resultobj = PyList_New(outer_length);
    
    // Construct a new numpy array for each inner object, and add to the list.
    for (StagInt i = 0; i < outer_length; i++) {
      npy_intp length = (&result)->at(i).size();
      PyObject* new_numpy_object = PyArray_SimpleNew(1, &length, NPY_INT64);
      memcpy(PyArray_DATA((PyArrayObject*) new_numpy_object),
        (&result)->at(i).data(),
        sizeof(int64_t) * length);
      
      PyList_SET_ITEM(resultobj, i, new_numpy_object);
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_adjusted_rand_index(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< StagInt > *arg1 = 0 ;
  std::vector< StagInt > *arg2 = 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  std::vector< int64_t > temp_vec1 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  std::vector< int64_t > temp_vec2 ;
  PyObject *swig_obj[2] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "adjusted_rand_index", 2, 2, swig_obj)) SWIG_fail;
  {
    // Get the number of elements in the numpy array1
    npy_intp size[1] = {
      PyArray_DIMS((PyArrayObject*) swig_obj[0])[0] 
    };
    
    // Check that the dimensions of the array1 are correct
    array1 = obj_to_array_contiguous_allow_conversion(swig_obj[0],
      NPY_INT64,
      &is_new_object1);
    if (!array1 || !require_dimensions(array1, 1) ||
      !require_size(array1, size, 1)) SWIG_fail;
    
    // Get a pointer to the data in the numpy array1
    int64_t* data_ptr = (int64_t*) array_data(array1);
    
    // Copy the numpy data into the new vector.
    temp_vec1.reserve(size[0]);
    for (int i = 0; i < size[0]; i++) {
      temp_vec1.push_back(data_ptr[i]);
    }
    arg1 = &temp_vec1;
  }
  {
    // Get the number of elements in the numpy array2
    npy_intp size[1] = {
      PyArray_DIMS((PyArrayObject*) swig_obj[1])[0] 
    };
    
    // Check that the dimensions of the array2 are correct
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_INT64,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    
    // Get a pointer to the data in the numpy array2
    int64_t* data_ptr = (int64_t*) array_data(array2);
    
    // Copy the numpy data into the new vector.
    temp_vec2.reserve(size[0]);
    for (int i = 0; i < size[0]; i++) {
      temp_vec2.push_back(data_ptr[i]);
    }
    arg2 = &temp_vec2;
  }
  {
    try {
      result = (double)stag::adjusted_rand_index(*arg1,*arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mutual_information(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< StagInt > *arg1 = 0 ;
  std::vector< StagInt > *arg2 = 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  std::vector< int64_t > temp_vec1 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  std::vector< int64_t > temp_vec2 ;
  PyObject *swig_obj[2] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "mutual_information", 2, 2, swig_obj)) SWIG_fail;
  {
    // Get the number of elements in the numpy array1
    npy_intp size[1] = {
      PyArray_DIMS((PyArrayObject*) swig_obj[0])[0] 
    };
    
    // Check that the dimensions of the array1 are correct
    array1 = obj_to_array_contiguous_allow_conversion(swig_obj[0],
      NPY_INT64,
      &is_new_object1);
    if (!array1 || !require_dimensions(array1, 1) ||
      !require_size(array1, size, 1)) SWIG_fail;
    
    // Get a pointer to the data in the numpy array1
    int64_t* data_ptr = (int64_t*) array_data(array1);
    
    // Copy the numpy data into the new vector.
    temp_vec1.reserve(size[0]);
    for (int i = 0; i < size[0]; i++) {
      temp_vec1.push_back(data_ptr[i]);
    }
    arg1 = &temp_vec1;
  }
  {
    // Get the number of elements in the numpy array2
    npy_intp size[1] = {
      PyArray_DIMS((PyArrayObject*) swig_obj[1])[0] 
    };
    
    // Check that the dimensions of the array2 are correct
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_INT64,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    
    // Get a pointer to the data in the numpy array2
    int64_t* data_ptr = (int64_t*) array_data(array2);
    
    // Copy the numpy data into the new vector.
    temp_vec2.reserve(size[0]);
    for (int i = 0; i < size[0]; i++) {
      temp_vec2.push_back(data_ptr[i]);
    }
    arg2 = &temp_vec2;
  }
  {
    try {
      result = (double)stag::mutual_information(*arg1,*arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_normalised_mutual_information(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< StagInt > *arg1 = 0 ;
  std::vector< StagInt > *arg2 = 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  std::vector< int64_t > temp_vec1 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  std::vector< int64_t > temp_vec2 ;
  PyObject *swig_obj[2] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "normalised_mutual_information", 2, 2, swig_obj)) SWIG_fail;
  {
    // Get the number of elements in the numpy array1
    npy_intp size[1] = {
      PyArray_DIMS((PyArrayObject*) swig_obj[0])[0] 
    };
    
    // Check that the dimensions of the array1 are correct
    array1 = obj_to_array_contiguous_allow_conversion(swig_obj[0],
      NPY_INT64,
      &is_new_object1);
    if (!array1 || !require_dimensions(array1, 1) ||
      !require_size(array1, size, 1)) SWIG_fail;
    
    // Get a pointer to the data in the numpy array1
    int64_t* data_ptr = (int64_t*) array_data(array1);
    
    // Copy the numpy data into the new vector.
    temp_vec1.reserve(size[0]);
    for (int i = 0; i < size[0]; i++) {
      temp_vec1.push_back(data_ptr[i]);
    }
    arg1 = &temp_vec1;
  }
  {
    // Get the number of elements in the numpy array2
    npy_intp size[1] = {
      PyArray_DIMS((PyArrayObject*) swig_obj[1])[0] 
    };
    
    // Check that the dimensions of the array2 are correct
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_INT64,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    
    // Get a pointer to the data in the numpy array2
    int64_t* data_ptr = (int64_t*) array_data(array2);
    
    // Copy the numpy data into the new vector.
    temp_vec2.reserve(size[0]);
    for (int i = 0; i < size[0]; i++) {
      temp_vec2.push_back(data_ptr[i]);
    }
    arg2 = &temp_vec2;
  }
  {
    try {
      result = (double)stag::normalised_mutual_information(*arg1,*arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conductance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::LocalGraph *arg1 = (stag::LocalGraph *) 0 ;
  std::vector< StagInt > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  std::vector< int64_t > temp_vec2 ;
  PyObject *swig_obj[2] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "conductance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__LocalGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conductance" "', argument " "1"" of type '" "stag::LocalGraph *""'"); 
  }
  arg1 = reinterpret_cast< stag::LocalGraph * >(argp1);
  {
    // Get the number of elements in the numpy array2
    npy_intp size[1] = {
      PyArray_DIMS((PyArrayObject*) swig_obj[1])[0] 
    };
    
    // Check that the dimensions of the array2 are correct
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_INT64,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    
    // Get a pointer to the data in the numpy array2
    int64_t* data_ptr = (int64_t*) array_data(array2);
    
    // Copy the numpy data into the new vector.
    temp_vec2.reserve(size[0]);
    for (int i = 0; i < size[0]; i++) {
      temp_vec2.push_back(data_ptr[i]);
    }
    arg2 = &temp_vec2;
  }
  {
    try {
      result = (double)stag::conductance(arg1,*arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_symmetric_difference(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< StagInt > *arg1 = 0 ;
  std::vector< StagInt > *arg2 = 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  std::vector< int64_t > temp_vec1 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  std::vector< int64_t > temp_vec2 ;
  PyObject *swig_obj[2] ;
  std::vector< StagInt > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "symmetric_difference", 2, 2, swig_obj)) SWIG_fail;
  {
    // Get the number of elements in the numpy array1
    npy_intp size[1] = {
      PyArray_DIMS((PyArrayObject*) swig_obj[0])[0] 
    };
    
    // Check that the dimensions of the array1 are correct
    array1 = obj_to_array_contiguous_allow_conversion(swig_obj[0],
      NPY_INT64,
      &is_new_object1);
    if (!array1 || !require_dimensions(array1, 1) ||
      !require_size(array1, size, 1)) SWIG_fail;
    
    // Get a pointer to the data in the numpy array1
    int64_t* data_ptr = (int64_t*) array_data(array1);
    
    // Copy the numpy data into the new vector.
    temp_vec1.reserve(size[0]);
    for (int i = 0; i < size[0]; i++) {
      temp_vec1.push_back(data_ptr[i]);
    }
    arg1 = &temp_vec1;
  }
  {
    // Get the number of elements in the numpy array2
    npy_intp size[1] = {
      PyArray_DIMS((PyArrayObject*) swig_obj[1])[0] 
    };
    
    // Check that the dimensions of the array2 are correct
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_INT64,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    
    // Get a pointer to the data in the numpy array2
    int64_t* data_ptr = (int64_t*) array_data(array2);
    
    // Copy the numpy data into the new vector.
    temp_vec2.reserve(size[0]);
    for (int i = 0; i < size[0]; i++) {
      temp_vec2.push_back(data_ptr[i]);
    }
    arg2 = &temp_vec2;
  }
  {
    try {
      result = stag::symmetric_difference(*arg1,*arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // For non-pointer output vectors, we just copy the data into a numpy array.
    // The copying at least happens still on the C++ side so will be relatively
    // fast and optimised by the compiler.
    //
    // This adds a small 'constant factor' to the running time of the algorithm
    // in STAGPy over C++ STAG.
    npy_intp length = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &length, NPY_INT64);
    memcpy(PyArray_DATA((PyArrayObject*) resultobj),
      (&result)->data(),
      sizeof(int64_t) * length);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_approximate_similarity_graph(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DenseMat *arg1 = (DenseMat *) 0 ;
  StagReal arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< stag::Graph > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "approximate_similarity_graph", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "approximate_similarity_graph" "', argument " "1"" of type '" "DenseMat *""'"); 
  }
  arg1 = reinterpret_cast< DenseMat * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "approximate_similarity_graph" "', argument " "2"" of type '" "StagReal""'");
  } 
  arg2 = static_cast< StagReal >(val2);
  {
    try {
      result = stag::approximate_similarity_graph(arg1,arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new stag::Graph(result)), SWIGTYPE_p_stag__Graph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_similarity_graph(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DenseMat *arg1 = (DenseMat *) 0 ;
  StagReal arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< stag::Graph > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "similarity_graph", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "similarity_graph" "', argument " "1"" of type '" "DenseMat *""'"); 
  }
  arg1 = reinterpret_cast< DenseMat * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "similarity_graph" "', argument " "2"" of type '" "StagReal""'");
  } 
  arg2 = static_cast< StagReal >(val2);
  {
    try {
      result = stag::similarity_graph(arg1,arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new stag::Graph(result)), SWIGTYPE_p_stag__Graph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_load_edgelist(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< stag::Graph > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsPtr_std_string(swig_obj[0], &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "load_edgelist" "', argument " "1"" of type '" "std::string &""'");
  }     
  if (!arg1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "load_edgelist" "', argument " "1"" of type '" "std::string &""'");
  }
  res1 = SWIG_AddTmpMask(res1);
  {
    try {
      result = stag::load_edgelist(*arg1);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new stag::Graph(result)), SWIGTYPE_p_stag__Graph, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_save_edgelist(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "save_edgelist", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_stag__Graph,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "save_edgelist" "', argument " "1"" of type '" "stag::Graph &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "save_edgelist" "', argument " "1"" of type '" "stag::Graph &""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  res2 = SWIG_AsPtr_std_string(swig_obj[1], &arg2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "save_edgelist" "', argument " "2"" of type '" "std::string &""'");
  }     
  if (!arg2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "save_edgelist" "', argument " "2"" of type '" "std::string &""'");
  }
  res2 = SWIG_AddTmpMask(res2);
  {
    try {
      stag::save_edgelist(*arg1,*arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse_adjacencylist_content_line(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::vector< stag::edge > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "parse_adjacencylist_content_line" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = stag::parse_adjacencylist_content_line(SWIG_STD_MOVE(arg1));
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // Return a vector of edges as a list of tuples
    StagInt outer_length = (&result)->size();
    resultobj = PyList_New(outer_length);
    
    // Construct a new 3-tuple for each inner object, and add to the list.
    for (StagInt i = 0; i < outer_length; i++) {
      PyObject* new_tuple_object = PyTuple_Pack(
        3,
        PyLong_FromLongLong((&result)->at(i).v1),
        PyLong_FromLongLong((&result)->at(i).v2),
        PyFloat_FromDouble((&result)->at(i).weight));
      
      PyList_SET_ITEM(resultobj, i, new_tuple_object);
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sort_edgelist(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsPtr_std_string(swig_obj[0], &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sort_edgelist" "', argument " "1"" of type '" "std::string &""'");
  }     
  if (!arg1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sort_edgelist" "', argument " "1"" of type '" "std::string &""'");
  }
  res1 = SWIG_AddTmpMask(res1);
  {
    try {
      stag::sort_edgelist(*arg1);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_copy_edgelist_duplicate_edges(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "copy_edgelist_duplicate_edges", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "copy_edgelist_duplicate_edges" "', argument " "1"" of type '" "std::string &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "copy_edgelist_duplicate_edges" "', argument " "1"" of type '" "std::string &""'"); 
  }
  arg1 = reinterpret_cast< std::string * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "copy_edgelist_duplicate_edges" "', argument " "2"" of type '" "std::string &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "copy_edgelist_duplicate_edges" "', argument " "2"" of type '" "std::string &""'"); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  {
    try {
      stag::copy_edgelist_duplicate_edges(*arg1,*arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_load_adjacencylist(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< stag::Graph > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsPtr_std_string(swig_obj[0], &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "load_adjacencylist" "', argument " "1"" of type '" "std::string &""'");
  }     
  if (!arg1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "load_adjacencylist" "', argument " "1"" of type '" "std::string &""'");
  }
  res1 = SWIG_AddTmpMask(res1);
  {
    try {
      result = stag::load_adjacencylist(*arg1);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new stag::Graph(result)), SWIGTYPE_p_stag__Graph, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_save_adjacencylist(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "save_adjacencylist", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_stag__Graph,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "save_adjacencylist" "', argument " "1"" of type '" "stag::Graph &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "save_adjacencylist" "', argument " "1"" of type '" "stag::Graph &""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  res2 = SWIG_AsPtr_std_string(swig_obj[1], &arg2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "save_adjacencylist" "', argument " "2"" of type '" "std::string &""'");
  }     
  if (!arg2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "save_adjacencylist" "', argument " "2"" of type '" "std::string &""'");
  }
  res2 = SWIG_AddTmpMask(res2);
  {
    try {
      stag::save_adjacencylist(*arg1,*arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_edgelist_to_adjacencylist(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int res1 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "edgelist_to_adjacencylist", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsPtr_std_string(swig_obj[0], &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "edgelist_to_adjacencylist" "', argument " "1"" of type '" "std::string &""'");
  }     
  if (!arg1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "edgelist_to_adjacencylist" "', argument " "1"" of type '" "std::string &""'");
  }
  res1 = SWIG_AddTmpMask(res1);
  res2 = SWIG_AsPtr_std_string(swig_obj[1], &arg2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "edgelist_to_adjacencylist" "', argument " "2"" of type '" "std::string &""'");
  }     
  if (!arg2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "edgelist_to_adjacencylist" "', argument " "2"" of type '" "std::string &""'");
  }
  res2 = SWIG_AddTmpMask(res2);
  {
    try {
      stag::edgelist_to_adjacencylist(*arg1,*arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_adjacencylist_to_edgelist(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int res1 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "adjacencylist_to_edgelist", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsPtr_std_string(swig_obj[0], &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adjacencylist_to_edgelist" "', argument " "1"" of type '" "std::string &""'");
  }     
  if (!arg1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "adjacencylist_to_edgelist" "', argument " "1"" of type '" "std::string &""'");
  }
  res1 = SWIG_AddTmpMask(res1);
  res2 = SWIG_AsPtr_std_string(swig_obj[1], &arg2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "adjacencylist_to_edgelist" "', argument " "2"" of type '" "std::string &""'");
  }     
  if (!arg2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "adjacencylist_to_edgelist" "', argument " "2"" of type '" "std::string &""'");
  }
  res2 = SWIG_AddTmpMask(res2);
  {
    try {
      stag::adjacencylist_to_edgelist(*arg1,*arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_global_rng(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::mt19937_64 *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "get_global_rng", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (std::mt19937_64 *)stag::get_global_rng();
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mt19937_64, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_create_rng(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::mt19937_64 result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "create_rng", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = stag::create_rng();
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::mt19937_64(result)), SWIGTYPE_p_std__mt19937_64, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sbm__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  StagInt arg1 ;
  StagInt arg2 ;
  StagReal arg3 ;
  StagReal arg4 ;
  bool arg5 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  SwigValueWrapper< stag::Graph > result;
  
  (void)self;
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[0])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg1 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[0]);
  }
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg2 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[1]);
  }
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sbm" "', argument " "3"" of type '" "StagReal""'");
  } 
  arg3 = static_cast< StagReal >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "sbm" "', argument " "4"" of type '" "StagReal""'");
  } 
  arg4 = static_cast< StagReal >(val4);
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "sbm" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    try {
      result = stag::sbm(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4,arg5);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new stag::Graph(result)), SWIGTYPE_p_stag__Graph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sbm__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  StagInt arg1 ;
  StagInt arg2 ;
  StagReal arg3 ;
  StagReal arg4 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  SwigValueWrapper< stag::Graph > result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[0])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg1 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[0]);
  }
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg2 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[1]);
  }
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sbm" "', argument " "3"" of type '" "StagReal""'");
  } 
  arg3 = static_cast< StagReal >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "sbm" "', argument " "4"" of type '" "StagReal""'");
  } 
  arg4 = static_cast< StagReal >(val4);
  {
    try {
      result = stag::sbm(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new stag::Graph(result)), SWIGTYPE_p_stag__Graph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sbm(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "sbm", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v = 0;
    {
      // Typecheck for StagInt
      _v = PyLong_Check((PyObject*) argv[0]);
    }
    if (_v) {
      {
        // Typecheck for StagInt
        _v = PyLong_Check((PyObject*) argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_sbm__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      // Typecheck for StagInt
      _v = PyLong_Check((PyObject*) argv[0]);
    }
    if (_v) {
      {
        // Typecheck for StagInt
        _v = PyLong_Check((PyObject*) argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_sbm__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'sbm'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    stag::sbm(StagInt,StagInt,StagReal,StagReal,bool)\n"
    "    stag::sbm(StagInt,StagInt,StagReal,StagReal)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_general_sbm__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< StagInt > *arg1 = 0 ;
  DenseMat *arg2 = 0 ;
  bool arg3 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  std::vector< int64_t > temp_vec1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  SwigValueWrapper< stag::Graph > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    // Get the number of elements in the numpy array1
    npy_intp size[1] = {
      PyArray_DIMS((PyArrayObject*) swig_obj[0])[0] 
    };
    
    // Check that the dimensions of the array1 are correct
    array1 = obj_to_array_contiguous_allow_conversion(swig_obj[0],
      NPY_INT64,
      &is_new_object1);
    if (!array1 || !require_dimensions(array1, 1) ||
      !require_size(array1, size, 1)) SWIG_fail;
    
    // Get a pointer to the data in the numpy array1
    int64_t* data_ptr = (int64_t*) array_data(array1);
    
    // Copy the numpy data into the new vector.
    temp_vec1.reserve(size[0]);
    for (int i = 0; i < size[0]; i++) {
      temp_vec1.push_back(data_ptr[i]);
    }
    arg1 = &temp_vec1;
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "general_sbm" "', argument " "2"" of type '" "DenseMat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "general_sbm" "', argument " "2"" of type '" "DenseMat &""'"); 
  }
  arg2 = reinterpret_cast< DenseMat * >(argp2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "general_sbm" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = stag::general_sbm(*arg1,*arg2,arg3);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new stag::Graph(result)), SWIGTYPE_p_stag__Graph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_general_sbm__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< StagInt > *arg1 = 0 ;
  DenseMat *arg2 = 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  std::vector< int64_t > temp_vec1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  SwigValueWrapper< stag::Graph > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    // Get the number of elements in the numpy array1
    npy_intp size[1] = {
      PyArray_DIMS((PyArrayObject*) swig_obj[0])[0] 
    };
    
    // Check that the dimensions of the array1 are correct
    array1 = obj_to_array_contiguous_allow_conversion(swig_obj[0],
      NPY_INT64,
      &is_new_object1);
    if (!array1 || !require_dimensions(array1, 1) ||
      !require_size(array1, size, 1)) SWIG_fail;
    
    // Get a pointer to the data in the numpy array1
    int64_t* data_ptr = (int64_t*) array_data(array1);
    
    // Copy the numpy data into the new vector.
    temp_vec1.reserve(size[0]);
    for (int i = 0; i < size[0]; i++) {
      temp_vec1.push_back(data_ptr[i]);
    }
    arg1 = &temp_vec1;
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "general_sbm" "', argument " "2"" of type '" "DenseMat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "general_sbm" "', argument " "2"" of type '" "DenseMat &""'"); 
  }
  arg2 = reinterpret_cast< DenseMat * >(argp2);
  {
    try {
      result = stag::general_sbm(*arg1,*arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new stag::Graph(result)), SWIGTYPE_p_stag__Graph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_general_sbm(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "general_sbm", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      _v = is_array((PyObject *) argv[0]) ? 1 : 0;
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_general_sbm__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = is_array((PyObject *) argv[0]) ? 1 : 0;
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_general_sbm__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'general_sbm'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    stag::general_sbm(std::vector< StagInt > &,DenseMat &,bool)\n"
    "    stag::general_sbm(std::vector< StagInt > &,DenseMat &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_general_sbm_edgelist__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::vector< StagInt > *arg2 = 0 ;
  DenseMat *arg3 = 0 ;
  bool arg4 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  std::vector< int64_t > temp_vec2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_AsPtr_std_string(swig_obj[0], &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "general_sbm_edgelist" "', argument " "1"" of type '" "std::string &""'");
  }     
  if (!arg1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "general_sbm_edgelist" "', argument " "1"" of type '" "std::string &""'");
  }
  res1 = SWIG_AddTmpMask(res1);
  {
    // Get the number of elements in the numpy array2
    npy_intp size[1] = {
      PyArray_DIMS((PyArrayObject*) swig_obj[1])[0] 
    };
    
    // Check that the dimensions of the array2 are correct
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_INT64,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    
    // Get a pointer to the data in the numpy array2
    int64_t* data_ptr = (int64_t*) array_data(array2);
    
    // Copy the numpy data into the new vector.
    temp_vec2.reserve(size[0]);
    for (int i = 0; i < size[0]; i++) {
      temp_vec2.push_back(data_ptr[i]);
    }
    arg2 = &temp_vec2;
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "general_sbm_edgelist" "', argument " "3"" of type '" "DenseMat &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "general_sbm_edgelist" "', argument " "3"" of type '" "DenseMat &""'"); 
  }
  arg3 = reinterpret_cast< DenseMat * >(argp3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "general_sbm_edgelist" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      stag::general_sbm_edgelist(*arg1,*arg2,*arg3,arg4);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_general_sbm_edgelist__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::vector< StagInt > *arg2 = 0 ;
  DenseMat *arg3 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  std::vector< int64_t > temp_vec2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_AsPtr_std_string(swig_obj[0], &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "general_sbm_edgelist" "', argument " "1"" of type '" "std::string &""'");
  }     
  if (!arg1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "general_sbm_edgelist" "', argument " "1"" of type '" "std::string &""'");
  }
  res1 = SWIG_AddTmpMask(res1);
  {
    // Get the number of elements in the numpy array2
    npy_intp size[1] = {
      PyArray_DIMS((PyArrayObject*) swig_obj[1])[0] 
    };
    
    // Check that the dimensions of the array2 are correct
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_INT64,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    
    // Get a pointer to the data in the numpy array2
    int64_t* data_ptr = (int64_t*) array_data(array2);
    
    // Copy the numpy data into the new vector.
    temp_vec2.reserve(size[0]);
    for (int i = 0; i < size[0]; i++) {
      temp_vec2.push_back(data_ptr[i]);
    }
    arg2 = &temp_vec2;
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "general_sbm_edgelist" "', argument " "3"" of type '" "DenseMat &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "general_sbm_edgelist" "', argument " "3"" of type '" "DenseMat &""'"); 
  }
  arg3 = reinterpret_cast< DenseMat * >(argp3);
  {
    try {
      stag::general_sbm_edgelist(*arg1,*arg2,*arg3);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_general_sbm_edgelist(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "general_sbm_edgelist", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array((PyObject *) argv[1]) ? 1 : 0;
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_general_sbm_edgelist__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array((PyObject *) argv[1]) ? 1 : 0;
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_general_sbm_edgelist__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'general_sbm_edgelist'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    stag::general_sbm_edgelist(std::string &,std::vector< StagInt > &,DenseMat &,bool)\n"
    "    stag::general_sbm_edgelist(std::string &,std::vector< StagInt > &,DenseMat &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_erdos_renyi__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  StagInt arg1 ;
  StagReal arg2 ;
  bool arg3 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  SwigValueWrapper< stag::Graph > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[0])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg1 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[0]);
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "erdos_renyi" "', argument " "2"" of type '" "StagReal""'");
  } 
  arg2 = static_cast< StagReal >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "erdos_renyi" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = stag::erdos_renyi(SWIG_STD_MOVE(arg1),arg2,arg3);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new stag::Graph(result)), SWIGTYPE_p_stag__Graph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_erdos_renyi__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  StagInt arg1 ;
  StagReal arg2 ;
  double val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< stag::Graph > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[0])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg1 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[0]);
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "erdos_renyi" "', argument " "2"" of type '" "StagReal""'");
  } 
  arg2 = static_cast< StagReal >(val2);
  {
    try {
      result = stag::erdos_renyi(SWIG_STD_MOVE(arg1),arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new stag::Graph(result)), SWIGTYPE_p_stag__Graph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_erdos_renyi(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "erdos_renyi", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      // Typecheck for StagInt
      _v = PyLong_Check((PyObject*) argv[0]);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_erdos_renyi__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      // Typecheck for StagInt
      _v = PyLong_Check((PyObject*) argv[0]);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_erdos_renyi__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'erdos_renyi'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    stag::erdos_renyi(StagInt,StagReal,bool)\n"
    "    stag::erdos_renyi(StagInt,StagReal)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_sbm_gt_labels(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  StagInt arg1 ;
  StagInt arg2 ;
  PyObject *swig_obj[2] ;
  std::vector< StagInt > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "sbm_gt_labels", 2, 2, swig_obj)) SWIG_fail;
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[0])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg1 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[0]);
  }
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg2 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[1]);
  }
  {
    try {
      result = stag::sbm_gt_labels(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // For non-pointer output vectors, we just copy the data into a numpy array.
    // The copying at least happens still on the C++ side so will be relatively
    // fast and optimised by the compiler.
    //
    // This adds a small 'constant factor' to the running time of the algorithm
    // in STAGPy over C++ STAG.
    npy_intp length = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &length, NPY_INT64);
    memcpy(PyArray_DATA((PyArrayObject*) resultobj),
      (&result)->data(),
      sizeof(int64_t) * length);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_general_sbm_gt_labels(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< StagInt > *arg1 = 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  std::vector< int64_t > temp_vec1 ;
  PyObject *swig_obj[1] ;
  std::vector< StagInt > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // Get the number of elements in the numpy array1
    npy_intp size[1] = {
      PyArray_DIMS((PyArrayObject*) swig_obj[0])[0] 
    };
    
    // Check that the dimensions of the array1 are correct
    array1 = obj_to_array_contiguous_allow_conversion(swig_obj[0],
      NPY_INT64,
      &is_new_object1);
    if (!array1 || !require_dimensions(array1, 1) ||
      !require_size(array1, size, 1)) SWIG_fail;
    
    // Get a pointer to the data in the numpy array1
    int64_t* data_ptr = (int64_t*) array_data(array1);
    
    // Copy the numpy data into the new vector.
    temp_vec1.reserve(size[0]);
    for (int i = 0; i < size[0]; i++) {
      temp_vec1.push_back(data_ptr[i]);
    }
    arg1 = &temp_vec1;
  }
  {
    try {
      result = stag::general_sbm_gt_labels(*arg1);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // For non-pointer output vectors, we just copy the data into a numpy array.
    // The copying at least happens still on the C++ side so will be relatively
    // fast and optimised by the compiler.
    //
    // This adds a small 'constant factor' to the running time of the algorithm
    // in STAGPy over C++ STAG.
    npy_intp length = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &length, NPY_INT64);
    memcpy(PyArray_DATA((PyArrayObject*) resultobj),
      (&result)->data(),
      sizeof(int64_t) * length);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_compute_eigensystem(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = (stag::Graph *) 0 ;
  stag::GraphMatrix arg2 ;
  StagInt arg3 ;
  stag::EigenSortRule arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  SwigValueWrapper< std::tuple< Eigen::VectorXd,Eigen::MatrixXd > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "compute_eigensystem", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "compute_eigensystem" "', argument " "1"" of type '" "stag::Graph *""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "compute_eigensystem" "', argument " "2"" of type '" "stag::GraphMatrix""'");
  } 
  arg2 = static_cast< stag::GraphMatrix >(val2);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[2])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg3 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[2]);
  }
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "compute_eigensystem" "', argument " "4"" of type '" "stag::EigenSortRule""'");
  } 
  arg4 = static_cast< stag::EigenSortRule >(val4);
  {
    try {
      result = stag::compute_eigensystem(arg1,arg2,SWIG_STD_MOVE(arg3),arg4);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new stag::EigenSystem(result)), SWIGTYPE_p_std__tupleT_Eigen__VectorXd_Eigen__MatrixXd_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_compute_eigenvectors(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = (stag::Graph *) 0 ;
  stag::GraphMatrix arg2 ;
  StagInt arg3 ;
  stag::EigenSortRule arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  Eigen::MatrixXd result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "compute_eigenvectors", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "compute_eigenvectors" "', argument " "1"" of type '" "stag::Graph *""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "compute_eigenvectors" "', argument " "2"" of type '" "stag::GraphMatrix""'");
  } 
  arg2 = static_cast< stag::GraphMatrix >(val2);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[2])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg3 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[2]);
  }
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "compute_eigenvectors" "', argument " "4"" of type '" "stag::EigenSortRule""'");
  } 
  arg4 = static_cast< stag::EigenSortRule >(val4);
  {
    try {
      result = stag::compute_eigenvectors(arg1,arg2,SWIG_STD_MOVE(arg3),arg4);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    int res = ConvertFromEigenToNumPyMatrix<Eigen::MatrixXd>(&resultobj, &result);
    if (res < 0) return NULL;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_compute_eigenvalues(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::Graph *arg1 = (stag::Graph *) 0 ;
  stag::GraphMatrix arg2 ;
  StagInt arg3 ;
  stag::EigenSortRule arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  Eigen::VectorXd result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "compute_eigenvalues", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "compute_eigenvalues" "', argument " "1"" of type '" "stag::Graph *""'"); 
  }
  arg1 = reinterpret_cast< stag::Graph * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "compute_eigenvalues" "', argument " "2"" of type '" "stag::GraphMatrix""'");
  } 
  arg2 = static_cast< stag::GraphMatrix >(val2);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[2])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg3 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[2]);
  }
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "compute_eigenvalues" "', argument " "4"" of type '" "stag::EigenSortRule""'");
  } 
  arg4 = static_cast< stag::EigenSortRule >(val4);
  {
    try {
      result = stag::compute_eigenvalues(arg1,arg2,SWIG_STD_MOVE(arg3),arg4);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    int res = ConvertFromEigenToNumPyMatrix<Eigen::VectorXd>(&resultobj, &result);
    if (res < 0) return NULL;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_power_method__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SprsMat *arg1 = (SprsMat *) 0 ;
  StagInt arg2 ;
  Eigen::VectorXd arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::VectorXd temp3 ;
  Eigen::VectorXd result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "power_method" "', argument " "1"" of type '" "SprsMat const *""'"); 
  }
  arg1 = reinterpret_cast< SprsMat * >(argp1);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg2 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[1]);
  }
  {
    int res = ConvertFromNumpyToEigenMatrix<Eigen::VectorXd>(&temp3, swig_obj[2]);
    if (res < 0) return NULL;
    arg3 = temp3;
  }
  {
    try {
      result = stag::power_method((Eigen::SparseMatrix< StagReal,Eigen::ColMajor,StagInt > const *)arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    int res = ConvertFromEigenToNumPyMatrix<Eigen::VectorXd>(&resultobj, &result);
    if (res < 0) return NULL;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_power_method__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SprsMat *arg1 = (SprsMat *) 0 ;
  StagInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::VectorXd result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "power_method" "', argument " "1"" of type '" "SprsMat const *""'"); 
  }
  arg1 = reinterpret_cast< SprsMat * >(argp1);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg2 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[1]);
  }
  {
    try {
      result = stag::power_method((Eigen::SparseMatrix< StagReal,Eigen::ColMajor,StagInt > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    int res = ConvertFromEigenToNumPyMatrix<Eigen::VectorXd>(&resultobj, &result);
    if (res < 0) return NULL;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_power_method__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SprsMat *arg1 = (SprsMat *) 0 ;
  Eigen::VectorXd arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::VectorXd temp2 ;
  Eigen::VectorXd result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "power_method" "', argument " "1"" of type '" "SprsMat const *""'"); 
  }
  arg1 = reinterpret_cast< SprsMat * >(argp1);
  {
    int res = ConvertFromNumpyToEigenMatrix<Eigen::VectorXd>(&temp2, swig_obj[1]);
    if (res < 0) return NULL;
    arg2 = temp2;
  }
  {
    try {
      result = stag::power_method((Eigen::SparseMatrix< StagReal,Eigen::ColMajor,StagInt > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    int res = ConvertFromEigenToNumPyMatrix<Eigen::VectorXd>(&resultobj, &result);
    if (res < 0) return NULL;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_power_method__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SprsMat *arg1 = (SprsMat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::VectorXd result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "power_method" "', argument " "1"" of type '" "SprsMat const *""'"); 
  }
  arg1 = reinterpret_cast< SprsMat * >(argp1);
  {
    try {
      result = stag::power_method((Eigen::SparseMatrix< StagReal,Eigen::ColMajor,StagInt > const *)arg1);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    int res = ConvertFromEigenToNumPyMatrix<Eigen::VectorXd>(&resultobj, &result);
    if (res < 0) return NULL;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_power_method(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "power_method", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_power_method__SWIG_3(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        // Typecheck for StagInt
        _v = PyLong_Check((PyObject*) argv[1]);
      }
      if (_v) {
        return _wrap_power_method__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array((PyObject *) argv[1]) ? 1 : 0;
      }
      if (_v) {
        return _wrap_power_method__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        // Typecheck for StagInt
        _v = PyLong_Check((PyObject*) argv[1]);
      }
      if (_v) {
        {
          _v = is_array((PyObject *) argv[2]) ? 1 : 0;
        }
        if (_v) {
          return _wrap_power_method__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'power_method'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    stag::power_method(SprsMat const *,StagInt,Eigen::VectorXd)\n"
    "    stag::power_method(SprsMat const *,StagInt)\n"
    "    stag::power_method(SprsMat const *,Eigen::VectorXd)\n"
    "    stag::power_method(SprsMat const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_rayleigh_quotient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SprsMat *arg1 = (SprsMat *) 0 ;
  Eigen::VectorXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::VectorXd temp2 ;
  PyObject *swig_obj[2] ;
  StagReal result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "rayleigh_quotient", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rayleigh_quotient" "', argument " "1"" of type '" "SprsMat const *""'"); 
  }
  arg1 = reinterpret_cast< SprsMat * >(argp1);
  {
    // In: non-const&
    int res = ConvertFromNumpyToEigenMatrix<Eigen::VectorXd>(&temp2, swig_obj[1]);
    if (res < 0) return NULL;
    arg2 = &temp2;
  }
  {
    try {
      result = (StagReal)stag::rayleigh_quotient((Eigen::SparseMatrix< StagReal,Eigen::ColMajor,StagInt > const *)arg1,*arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    // Argout: &
    CopyFromEigenToNumPyMatrix<Eigen::VectorXd>(swig_obj[1], arg2);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DataPoint__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  stag::DataPoint *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (stag::DataPoint *)new stag::DataPoint();
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stag__DataPoint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DataPoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::DataPoint *arg1 = (stag::DataPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__DataPoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DataPoint" "', argument " "1"" of type '" "stag::DataPoint *""'"); 
  }
  arg1 = reinterpret_cast< stag::DataPoint * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DataPoint__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  StagUInt arg1 ;
  StagReal *arg2 = (StagReal *) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  stag::DataPoint *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DataPoint" "', argument " "1"" of type '" "StagUInt""'");
  } 
  arg1 = static_cast< StagUInt >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_DataPoint" "', argument " "2"" of type '" "StagReal *""'"); 
  }
  arg2 = reinterpret_cast< StagReal * >(argp2);
  {
    try {
      result = (stag::DataPoint *)new stag::DataPoint(arg1,arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stag__DataPoint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DataPoint__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  DenseMat *arg1 = 0 ;
  StagInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  stag::DataPoint *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DataPoint" "', argument " "1"" of type '" "DenseMat &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DataPoint" "', argument " "1"" of type '" "DenseMat &""'"); 
  }
  arg1 = reinterpret_cast< DenseMat * >(argp1);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg2 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[1]);
  }
  {
    try {
      result = (stag::DataPoint *)new stag::DataPoint(*arg1,arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stag__DataPoint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DataPoint__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< StagReal > *arg1 = 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  std::vector< double > temp_vec1 ;
  stag::DataPoint *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    // Get the number of elements in the numpy array1
    npy_intp size[1] = {
      PyArray_DIMS((PyArrayObject*) swig_obj[0])[0] 
    };
    
    // Check that the dimensions of the array1 are correct
    array1 = obj_to_array_contiguous_allow_conversion(swig_obj[0],
      NPY_DOUBLE,
      &is_new_object1);
    if (!array1 || !require_dimensions(array1, 1) ||
      !require_size(array1, size, 1)) SWIG_fail;
    
    // Get a pointer to the data in the numpy array1
    double* data_ptr = (double*) array_data(array1);
    
    // Copy the numpy data into the new vector.
    temp_vec1.reserve(size[0]);
    for (int i = 0; i < size[0]; i++) {
      temp_vec1.push_back(data_ptr[i]);
    }
    arg1 = &temp_vec1;
  }
  {
    try {
      result = (stag::DataPoint *)new stag::DataPoint(*arg1);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stag__DataPoint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DataPoint(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_DataPoint", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_DataPoint__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = is_array((PyObject *) argv[0]) ? 1 : 0;
    }
    if (_v) {
      return _wrap_new_DataPoint__SWIG_3(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        // Typecheck for StagInt
        _v = PyLong_Check((PyObject*) argv[1]);
      }
      if (_v) {
        return _wrap_new_DataPoint__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_DataPoint__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_DataPoint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    stag::DataPoint::DataPoint()\n"
    "    stag::DataPoint::DataPoint(StagUInt,StagReal *)\n"
    "    stag::DataPoint::DataPoint(DenseMat &,StagInt)\n"
    "    stag::DataPoint::DataPoint(std::vector< StagReal > &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DataPoint_to_vector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::DataPoint *arg1 = (stag::DataPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< StagReal > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__DataPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPoint_to_vector" "', argument " "1"" of type '" "stag::DataPoint *""'"); 
  }
  arg1 = reinterpret_cast< stag::DataPoint * >(argp1);
  {
    try {
      result = (arg1)->to_vector();
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // For non-pointer output vectors, we just copy the data into a numpy array.
    // The copying at least happens still on the C++ side so will be relatively
    // fast and optimised by the compiler.
    //
    // This adds a small 'constant factor' to the running time of the algorithm
    // in STAGPy over C++ STAG.
    npy_intp length = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &length, NPY_DOUBLE);
    memcpy(PyArray_DATA((PyArrayObject*) resultobj),
      (&result)->data(),
      sizeof(double) * length);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPoint_dimension_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::DataPoint *arg1 = (stag::DataPoint *) 0 ;
  StagUInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DataPoint_dimension_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__DataPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPoint_dimension_set" "', argument " "1"" of type '" "stag::DataPoint *""'"); 
  }
  arg1 = reinterpret_cast< stag::DataPoint * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataPoint_dimension_set" "', argument " "2"" of type '" "StagUInt""'");
  } 
  arg2 = static_cast< StagUInt >(val2);
  if (arg1) (arg1)->dimension = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPoint_dimension_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::DataPoint *arg1 = (stag::DataPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  StagUInt result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__DataPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPoint_dimension_get" "', argument " "1"" of type '" "stag::DataPoint *""'"); 
  }
  arg1 = reinterpret_cast< stag::DataPoint * >(argp1);
  result =  ((arg1)->dimension);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPoint_coordinates_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::DataPoint *arg1 = (stag::DataPoint *) 0 ;
  StagReal *arg2 = (StagReal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DataPoint_coordinates_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__DataPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPoint_coordinates_set" "', argument " "1"" of type '" "stag::DataPoint *""'"); 
  }
  arg1 = reinterpret_cast< stag::DataPoint * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_double, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataPoint_coordinates_set" "', argument " "2"" of type '" "StagReal *""'"); 
  }
  arg2 = reinterpret_cast< StagReal * >(argp2);
  if (arg1) (arg1)->coordinates = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataPoint_coordinates_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::DataPoint *arg1 = (stag::DataPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  StagReal *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__DataPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataPoint_coordinates_get" "', argument " "1"" of type '" "stag::DataPoint *""'"); 
  }
  arg1 = reinterpret_cast< stag::DataPoint * >(argp1);
  result = (StagReal *) ((arg1)->coordinates);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DataPoint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_stag__DataPoint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DataPoint_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_load_matrix(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  DenseMat result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsPtr_std_string(swig_obj[0], &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "load_matrix" "', argument " "1"" of type '" "std::string &""'");
  }     
  if (!arg1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "load_matrix" "', argument " "1"" of type '" "std::string &""'");
  }
  res1 = SWIG_AddTmpMask(res1);
  {
    try {
      result = stag::load_matrix(*arg1);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new DenseMat(result)), SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_save_matrix(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DenseMat *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "save_matrix", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "save_matrix" "', argument " "1"" of type '" "DenseMat &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "save_matrix" "', argument " "1"" of type '" "DenseMat &""'"); 
  }
  arg1 = reinterpret_cast< DenseMat * >(argp1);
  res2 = SWIG_AsPtr_std_string(swig_obj[1], &arg2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "save_matrix" "', argument " "2"" of type '" "std::string &""'");
  }     
  if (!arg2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "save_matrix" "', argument " "2"" of type '" "std::string &""'");
  }
  res2 = SWIG_AddTmpMask(res2);
  {
    try {
      stag::save_matrix(*arg1,*arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_matrix_to_datapoints(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DenseMat *arg1 = (DenseMat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::vector< stag::DataPoint > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "matrix_to_datapoints" "', argument " "1"" of type '" "DenseMat *""'"); 
  }
  arg1 = reinterpret_cast< DenseMat * >(argp1);
  {
    try {
      result = stag::matrix_to_datapoints(arg1);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // Construct a python list of data point objects
    StagInt outer_length = (&result)->size();
    resultobj = PyList_New(outer_length);
    
    // Construct a new DataPoint for each inner object, and add to the list.
    for (StagInt i = 0; i < outer_length; i++) {
      PyObject* new_datapoint_object = SWIG_NewPointerObj(
        (new stag::DataPoint((&result)->at(i).dimension, (&result)->at(i).coordinates)),
        SWIGTYPE_p_stag__DataPoint, SWIG_POINTER_OWN |  0 );
      
      PyList_SET_ITEM(resultobj, i, new_datapoint_object);
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gaussian_kernel__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  StagReal arg1 ;
  stag::DataPoint *arg2 = 0 ;
  stag::DataPoint *arg3 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  StagReal result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "gaussian_kernel" "', argument " "1"" of type '" "StagReal""'");
  } 
  arg1 = static_cast< StagReal >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_stag__DataPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "gaussian_kernel" "', argument " "2"" of type '" "stag::DataPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gaussian_kernel" "', argument " "2"" of type '" "stag::DataPoint const &""'"); 
  }
  arg2 = reinterpret_cast< stag::DataPoint * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_stag__DataPoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "gaussian_kernel" "', argument " "3"" of type '" "stag::DataPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gaussian_kernel" "', argument " "3"" of type '" "stag::DataPoint const &""'"); 
  }
  arg3 = reinterpret_cast< stag::DataPoint * >(argp3);
  {
    try {
      result = (StagReal)stag::gaussian_kernel(arg1,(stag::DataPoint const &)*arg2,(stag::DataPoint const &)*arg3);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gaussian_kernel__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  StagReal arg1 ;
  StagReal arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  StagReal result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "gaussian_kernel" "', argument " "1"" of type '" "StagReal""'");
  } 
  arg1 = static_cast< StagReal >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gaussian_kernel" "', argument " "2"" of type '" "StagReal""'");
  } 
  arg2 = static_cast< StagReal >(val2);
  {
    try {
      result = (StagReal)stag::gaussian_kernel(arg1,arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gaussian_kernel(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "gaussian_kernel", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_gaussian_kernel__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_stag__DataPoint, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_stag__DataPoint, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_gaussian_kernel__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'gaussian_kernel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    stag::gaussian_kernel(StagReal,stag::DataPoint const &,stag::DataPoint const &)\n"
    "    stag::gaussian_kernel(StagReal,StagReal)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_CKNSGaussianKDEHashUnit(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  StagReal arg1 ;
  DenseMat *arg2 = (DenseMat *) 0 ;
  StagInt arg3 ;
  StagInt arg4 ;
  StagReal arg5 ;
  StagInt arg6 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[6] ;
  stag::CKNSGaussianKDEHashUnit *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_CKNSGaussianKDEHashUnit", 6, 6, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CKNSGaussianKDEHashUnit" "', argument " "1"" of type '" "StagReal""'");
  } 
  arg1 = static_cast< StagReal >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CKNSGaussianKDEHashUnit" "', argument " "2"" of type '" "DenseMat *""'"); 
  }
  arg2 = reinterpret_cast< DenseMat * >(argp2);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[2])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg3 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[2]);
  }
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[3])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg4 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[3]);
  }
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_CKNSGaussianKDEHashUnit" "', argument " "5"" of type '" "StagReal""'");
  } 
  arg5 = static_cast< StagReal >(val5);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[5])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg6 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[5]);
  }
  {
    try {
      result = (stag::CKNSGaussianKDEHashUnit *)new stag::CKNSGaussianKDEHashUnit(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stag__CKNSGaussianKDEHashUnit, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CKNSGaussianKDEHashUnit_query(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::CKNSGaussianKDEHashUnit *arg1 = (stag::CKNSGaussianKDEHashUnit *) 0 ;
  stag::DataPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  StagReal result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "CKNSGaussianKDEHashUnit_query", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__CKNSGaussianKDEHashUnit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CKNSGaussianKDEHashUnit_query" "', argument " "1"" of type '" "stag::CKNSGaussianKDEHashUnit *""'"); 
  }
  arg1 = reinterpret_cast< stag::CKNSGaussianKDEHashUnit * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_stag__DataPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CKNSGaussianKDEHashUnit_query" "', argument " "2"" of type '" "stag::DataPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CKNSGaussianKDEHashUnit_query" "', argument " "2"" of type '" "stag::DataPoint const &""'"); 
  }
  arg2 = reinterpret_cast< stag::DataPoint * >(argp2);
  {
    try {
      result = (StagReal)(arg1)->query((stag::DataPoint const &)*arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CKNSGaussianKDEHashUnit(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::CKNSGaussianKDEHashUnit *arg1 = (stag::CKNSGaussianKDEHashUnit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__CKNSGaussianKDEHashUnit, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CKNSGaussianKDEHashUnit" "', argument " "1"" of type '" "stag::CKNSGaussianKDEHashUnit *""'"); 
  }
  arg1 = reinterpret_cast< stag::CKNSGaussianKDEHashUnit * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CKNSGaussianKDEHashUnit_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_stag__CKNSGaussianKDEHashUnit, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *CKNSGaussianKDEHashUnit_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_CKNSGaussianKDE__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  stag::CKNSGaussianKDE *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (stag::CKNSGaussianKDE *)new stag::CKNSGaussianKDE();
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stag__CKNSGaussianKDE, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CKNSGaussianKDE__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  DenseMat *arg1 = (DenseMat *) 0 ;
  StagReal arg2 ;
  StagReal arg3 ;
  StagReal arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  stag::CKNSGaussianKDE *result = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CKNSGaussianKDE" "', argument " "1"" of type '" "DenseMat *""'"); 
  }
  arg1 = reinterpret_cast< DenseMat * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CKNSGaussianKDE" "', argument " "2"" of type '" "StagReal""'");
  } 
  arg2 = static_cast< StagReal >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_CKNSGaussianKDE" "', argument " "3"" of type '" "StagReal""'");
  } 
  arg3 = static_cast< StagReal >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_CKNSGaussianKDE" "', argument " "4"" of type '" "StagReal""'");
  } 
  arg4 = static_cast< StagReal >(val4);
  {
    try {
      result = (stag::CKNSGaussianKDE *)new stag::CKNSGaussianKDE(arg1,arg2,arg3,arg4);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stag__CKNSGaussianKDE, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CKNSGaussianKDE__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  DenseMat *arg1 = (DenseMat *) 0 ;
  StagReal arg2 ;
  StagReal arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  stag::CKNSGaussianKDE *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CKNSGaussianKDE" "', argument " "1"" of type '" "DenseMat *""'"); 
  }
  arg1 = reinterpret_cast< DenseMat * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CKNSGaussianKDE" "', argument " "2"" of type '" "StagReal""'");
  } 
  arg2 = static_cast< StagReal >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_CKNSGaussianKDE" "', argument " "3"" of type '" "StagReal""'");
  } 
  arg3 = static_cast< StagReal >(val3);
  {
    try {
      result = (stag::CKNSGaussianKDE *)new stag::CKNSGaussianKDE(arg1,arg2,arg3);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stag__CKNSGaussianKDE, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CKNSGaussianKDE__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  DenseMat *arg1 = (DenseMat *) 0 ;
  StagReal arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  stag::CKNSGaussianKDE *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CKNSGaussianKDE" "', argument " "1"" of type '" "DenseMat *""'"); 
  }
  arg1 = reinterpret_cast< DenseMat * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CKNSGaussianKDE" "', argument " "2"" of type '" "StagReal""'");
  } 
  arg2 = static_cast< StagReal >(val2);
  {
    try {
      result = (stag::CKNSGaussianKDE *)new stag::CKNSGaussianKDE(arg1,arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stag__CKNSGaussianKDE, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CKNSGaussianKDE__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  DenseMat *arg1 = (DenseMat *) 0 ;
  StagReal arg2 ;
  StagReal arg3 ;
  StagInt arg4 ;
  StagReal arg5 ;
  StagInt arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  stag::CKNSGaussianKDE *result = 0 ;
  
  (void)self;
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CKNSGaussianKDE" "', argument " "1"" of type '" "DenseMat *""'"); 
  }
  arg1 = reinterpret_cast< DenseMat * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CKNSGaussianKDE" "', argument " "2"" of type '" "StagReal""'");
  } 
  arg2 = static_cast< StagReal >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_CKNSGaussianKDE" "', argument " "3"" of type '" "StagReal""'");
  } 
  arg3 = static_cast< StagReal >(val3);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[3])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg4 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[3]);
  }
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_CKNSGaussianKDE" "', argument " "5"" of type '" "StagReal""'");
  } 
  arg5 = static_cast< StagReal >(val5);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[5])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg6 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[5]);
  }
  {
    try {
      result = (stag::CKNSGaussianKDE *)new stag::CKNSGaussianKDE(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stag__CKNSGaussianKDE, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CKNSGaussianKDE__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  DenseMat *arg1 = (DenseMat *) 0 ;
  StagReal arg2 ;
  StagReal arg3 ;
  StagInt arg4 ;
  StagReal arg5 ;
  StagInt arg6 ;
  StagInt arg7 ;
  StagInt arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  stag::CKNSGaussianKDE *result = 0 ;
  
  (void)self;
  if ((nobjs < 8) || (nobjs > 8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CKNSGaussianKDE" "', argument " "1"" of type '" "DenseMat *""'"); 
  }
  arg1 = reinterpret_cast< DenseMat * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CKNSGaussianKDE" "', argument " "2"" of type '" "StagReal""'");
  } 
  arg2 = static_cast< StagReal >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_CKNSGaussianKDE" "', argument " "3"" of type '" "StagReal""'");
  } 
  arg3 = static_cast< StagReal >(val3);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[3])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg4 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[3]);
  }
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_CKNSGaussianKDE" "', argument " "5"" of type '" "StagReal""'");
  } 
  arg5 = static_cast< StagReal >(val5);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[5])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg6 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[5]);
  }
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[6])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg7 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[6]);
  }
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[7])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg8 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[7]);
  }
  {
    try {
      result = (stag::CKNSGaussianKDE *)new stag::CKNSGaussianKDE(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stag__CKNSGaussianKDE, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CKNSGaussianKDE(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[9] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_CKNSGaussianKDE", 0, 8, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_CKNSGaussianKDE__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_CKNSGaussianKDE__SWIG_3(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_CKNSGaussianKDE__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_CKNSGaussianKDE__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            // Typecheck for StagInt
            _v = PyLong_Check((PyObject*) argv[3]);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                // Typecheck for StagInt
                _v = PyLong_Check((PyObject*) argv[5]);
              }
              if (_v) {
                return _wrap_new_CKNSGaussianKDE__SWIG_4(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            // Typecheck for StagInt
            _v = PyLong_Check((PyObject*) argv[3]);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                // Typecheck for StagInt
                _v = PyLong_Check((PyObject*) argv[5]);
              }
              if (_v) {
                {
                  // Typecheck for StagInt
                  _v = PyLong_Check((PyObject*) argv[6]);
                }
                if (_v) {
                  {
                    // Typecheck for StagInt
                    _v = PyLong_Check((PyObject*) argv[7]);
                  }
                  if (_v) {
                    return _wrap_new_CKNSGaussianKDE__SWIG_5(self, argc, argv);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_CKNSGaussianKDE'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    stag::CKNSGaussianKDE::CKNSGaussianKDE()\n"
    "    stag::CKNSGaussianKDE::CKNSGaussianKDE(DenseMat *,StagReal,StagReal,StagReal)\n"
    "    stag::CKNSGaussianKDE::CKNSGaussianKDE(DenseMat *,StagReal,StagReal)\n"
    "    stag::CKNSGaussianKDE::CKNSGaussianKDE(DenseMat *,StagReal)\n"
    "    stag::CKNSGaussianKDE::CKNSGaussianKDE(DenseMat *,StagReal,StagReal,StagInt,StagReal,StagInt)\n"
    "    stag::CKNSGaussianKDE::CKNSGaussianKDE(DenseMat *,StagReal,StagReal,StagInt,StagReal,StagInt,StagInt,StagInt)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CKNSGaussianKDE_query__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stag::CKNSGaussianKDE *arg1 = (stag::CKNSGaussianKDE *) 0 ;
  DenseMat *arg2 = (DenseMat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< StagReal > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__CKNSGaussianKDE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CKNSGaussianKDE_query" "', argument " "1"" of type '" "stag::CKNSGaussianKDE *""'"); 
  }
  arg1 = reinterpret_cast< stag::CKNSGaussianKDE * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CKNSGaussianKDE_query" "', argument " "2"" of type '" "DenseMat *""'"); 
  }
  arg2 = reinterpret_cast< DenseMat * >(argp2);
  {
    try {
      result = (arg1)->query(arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // For non-pointer output vectors, we just copy the data into a numpy array.
    // The copying at least happens still on the C++ side so will be relatively
    // fast and optimised by the compiler.
    //
    // This adds a small 'constant factor' to the running time of the algorithm
    // in STAGPy over C++ STAG.
    npy_intp length = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &length, NPY_DOUBLE);
    memcpy(PyArray_DATA((PyArrayObject*) resultobj),
      (&result)->data(),
      sizeof(double) * length);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CKNSGaussianKDE_query__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stag::CKNSGaussianKDE *arg1 = (stag::CKNSGaussianKDE *) 0 ;
  stag::DataPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  StagReal result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__CKNSGaussianKDE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CKNSGaussianKDE_query" "', argument " "1"" of type '" "stag::CKNSGaussianKDE *""'"); 
  }
  arg1 = reinterpret_cast< stag::CKNSGaussianKDE * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_stag__DataPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CKNSGaussianKDE_query" "', argument " "2"" of type '" "stag::DataPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CKNSGaussianKDE_query" "', argument " "2"" of type '" "stag::DataPoint const &""'"); 
  }
  arg2 = reinterpret_cast< stag::DataPoint * >(argp2);
  {
    try {
      result = (StagReal)(arg1)->query((stag::DataPoint const &)*arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CKNSGaussianKDE_query(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "CKNSGaussianKDE_query", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stag__CKNSGaussianKDE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CKNSGaussianKDE_query__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stag__CKNSGaussianKDE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_stag__DataPoint, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CKNSGaussianKDE_query__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CKNSGaussianKDE_query'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    stag::CKNSGaussianKDE::query(DenseMat *)\n"
    "    stag::CKNSGaussianKDE::query(stag::DataPoint const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_CKNSGaussianKDE(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::CKNSGaussianKDE *arg1 = (stag::CKNSGaussianKDE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__CKNSGaussianKDE, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CKNSGaussianKDE" "', argument " "1"" of type '" "stag::CKNSGaussianKDE *""'"); 
  }
  arg1 = reinterpret_cast< stag::CKNSGaussianKDE * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CKNSGaussianKDE_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_stag__CKNSGaussianKDE, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *CKNSGaussianKDE_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ExactGaussianKDE__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  stag::ExactGaussianKDE *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (stag::ExactGaussianKDE *)new stag::ExactGaussianKDE();
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stag__ExactGaussianKDE, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ExactGaussianKDE__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  DenseMat *arg1 = (DenseMat *) 0 ;
  StagReal arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  stag::ExactGaussianKDE *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ExactGaussianKDE" "', argument " "1"" of type '" "DenseMat *""'"); 
  }
  arg1 = reinterpret_cast< DenseMat * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ExactGaussianKDE" "', argument " "2"" of type '" "StagReal""'");
  } 
  arg2 = static_cast< StagReal >(val2);
  {
    try {
      result = (stag::ExactGaussianKDE *)new stag::ExactGaussianKDE(arg1,arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stag__ExactGaussianKDE, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ExactGaussianKDE__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  DenseMat *arg1 = (DenseMat *) 0 ;
  StagReal arg2 ;
  StagInt arg3 ;
  StagInt arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  stag::ExactGaussianKDE *result = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ExactGaussianKDE" "', argument " "1"" of type '" "DenseMat *""'"); 
  }
  arg1 = reinterpret_cast< DenseMat * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ExactGaussianKDE" "', argument " "2"" of type '" "StagReal""'");
  } 
  arg2 = static_cast< StagReal >(val2);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[2])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg3 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[2]);
  }
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[3])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg4 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[3]);
  }
  {
    try {
      result = (stag::ExactGaussianKDE *)new stag::ExactGaussianKDE(arg1,arg2,arg3,arg4);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stag__ExactGaussianKDE, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ExactGaussianKDE(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_ExactGaussianKDE", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_ExactGaussianKDE__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ExactGaussianKDE__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          // Typecheck for StagInt
          _v = PyLong_Check((PyObject*) argv[2]);
        }
        if (_v) {
          {
            // Typecheck for StagInt
            _v = PyLong_Check((PyObject*) argv[3]);
          }
          if (_v) {
            return _wrap_new_ExactGaussianKDE__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_ExactGaussianKDE'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    stag::ExactGaussianKDE::ExactGaussianKDE()\n"
    "    stag::ExactGaussianKDE::ExactGaussianKDE(DenseMat *,StagReal)\n"
    "    stag::ExactGaussianKDE::ExactGaussianKDE(DenseMat *,StagReal,StagInt,StagInt)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ExactGaussianKDE_query__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stag::ExactGaussianKDE *arg1 = (stag::ExactGaussianKDE *) 0 ;
  DenseMat *arg2 = (DenseMat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< StagReal > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__ExactGaussianKDE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExactGaussianKDE_query" "', argument " "1"" of type '" "stag::ExactGaussianKDE *""'"); 
  }
  arg1 = reinterpret_cast< stag::ExactGaussianKDE * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ExactGaussianKDE_query" "', argument " "2"" of type '" "DenseMat *""'"); 
  }
  arg2 = reinterpret_cast< DenseMat * >(argp2);
  {
    try {
      result = (arg1)->query(arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // For non-pointer output vectors, we just copy the data into a numpy array.
    // The copying at least happens still on the C++ side so will be relatively
    // fast and optimised by the compiler.
    //
    // This adds a small 'constant factor' to the running time of the algorithm
    // in STAGPy over C++ STAG.
    npy_intp length = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &length, NPY_DOUBLE);
    memcpy(PyArray_DATA((PyArrayObject*) resultobj),
      (&result)->data(),
      sizeof(double) * length);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExactGaussianKDE_query__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stag::ExactGaussianKDE *arg1 = (stag::ExactGaussianKDE *) 0 ;
  stag::DataPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  StagReal result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__ExactGaussianKDE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExactGaussianKDE_query" "', argument " "1"" of type '" "stag::ExactGaussianKDE *""'"); 
  }
  arg1 = reinterpret_cast< stag::ExactGaussianKDE * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_stag__DataPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ExactGaussianKDE_query" "', argument " "2"" of type '" "stag::DataPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExactGaussianKDE_query" "', argument " "2"" of type '" "stag::DataPoint const &""'"); 
  }
  arg2 = reinterpret_cast< stag::DataPoint * >(argp2);
  {
    try {
      result = (StagReal)(arg1)->query((stag::DataPoint const &)*arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExactGaussianKDE_query(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ExactGaussianKDE_query", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stag__ExactGaussianKDE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ExactGaussianKDE_query__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stag__ExactGaussianKDE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_stag__DataPoint, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ExactGaussianKDE_query__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ExactGaussianKDE_query'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    stag::ExactGaussianKDE::query(DenseMat *)\n"
    "    stag::ExactGaussianKDE::query(stag::DataPoint const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ExactGaussianKDE_sample_neighbors(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::ExactGaussianKDE *arg1 = (stag::ExactGaussianKDE *) 0 ;
  stag::DataPoint *arg2 = 0 ;
  StagReal arg3 ;
  std::vector< StagReal > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  std::vector< double > temp_vec4 ;
  PyObject *swig_obj[4] ;
  std::vector< StagInt > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ExactGaussianKDE_sample_neighbors", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__ExactGaussianKDE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExactGaussianKDE_sample_neighbors" "', argument " "1"" of type '" "stag::ExactGaussianKDE *""'"); 
  }
  arg1 = reinterpret_cast< stag::ExactGaussianKDE * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_stag__DataPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ExactGaussianKDE_sample_neighbors" "', argument " "2"" of type '" "stag::DataPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExactGaussianKDE_sample_neighbors" "', argument " "2"" of type '" "stag::DataPoint const &""'"); 
  }
  arg2 = reinterpret_cast< stag::DataPoint * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ExactGaussianKDE_sample_neighbors" "', argument " "3"" of type '" "StagReal""'");
  } 
  arg3 = static_cast< StagReal >(val3);
  {
    // Get the number of elements in the numpy array4
    npy_intp size[1] = {
      PyArray_DIMS((PyArrayObject*) swig_obj[3])[0] 
    };
    
    // Check that the dimensions of the array4 are correct
    array4 = obj_to_array_contiguous_allow_conversion(swig_obj[3],
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    
    // Get a pointer to the data in the numpy array4
    double* data_ptr = (double*) array_data(array4);
    
    // Copy the numpy data into the new vector.
    temp_vec4.reserve(size[0]);
    for (int i = 0; i < size[0]; i++) {
      temp_vec4.push_back(data_ptr[i]);
    }
    arg4 = temp_vec4;
  }
  {
    try {
      result = (arg1)->sample_neighbors((stag::DataPoint const &)*arg2,arg3,arg4);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // For non-pointer output vectors, we just copy the data into a numpy array.
    // The copying at least happens still on the C++ side so will be relatively
    // fast and optimised by the compiler.
    //
    // This adds a small 'constant factor' to the running time of the algorithm
    // in STAGPy over C++ STAG.
    npy_intp length = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &length, NPY_INT64);
    memcpy(PyArray_DATA((PyArrayObject*) resultobj),
      (&result)->data(),
      sizeof(int64_t) * length);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ExactGaussianKDE(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::ExactGaussianKDE *arg1 = (stag::ExactGaussianKDE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__ExactGaussianKDE, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ExactGaussianKDE" "', argument " "1"" of type '" "stag::ExactGaussianKDE *""'"); 
  }
  arg1 = reinterpret_cast< stag::ExactGaussianKDE * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ExactGaussianKDE_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_stag__ExactGaussianKDE, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ExactGaussianKDE_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_LSHFunction(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  StagUInt arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  stag::LSHFunction *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LSHFunction" "', argument " "1"" of type '" "StagUInt""'");
  } 
  arg1 = static_cast< StagUInt >(val1);
  {
    try {
      result = (stag::LSHFunction *)new stag::LSHFunction(arg1);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stag__LSHFunction, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LSHFunction_apply(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::LSHFunction *arg1 = (stag::LSHFunction *) 0 ;
  stag::DataPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  StagInt result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LSHFunction_apply", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__LSHFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LSHFunction_apply" "', argument " "1"" of type '" "stag::LSHFunction *""'"); 
  }
  arg1 = reinterpret_cast< stag::LSHFunction * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_stag__DataPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LSHFunction_apply" "', argument " "2"" of type '" "stag::DataPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LSHFunction_apply" "', argument " "2"" of type '" "stag::DataPoint const &""'"); 
  }
  arg2 = reinterpret_cast< stag::DataPoint * >(argp2);
  {
    try {
      result = (arg1)->apply((stag::DataPoint const &)*arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // StagInt typemap (out)
    resultobj = PyLong_FromLongLong((long long) result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LSHFunction_collision_probability(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  StagReal arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  StagReal result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "LSHFunction_collision_probability" "', argument " "1"" of type '" "StagReal""'");
  } 
  arg1 = static_cast< StagReal >(val1);
  {
    try {
      result = (StagReal)stag::LSHFunction::collision_probability(arg1);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LSHFunction(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::LSHFunction *arg1 = (stag::LSHFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__LSHFunction, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LSHFunction" "', argument " "1"" of type '" "stag::LSHFunction *""'"); 
  }
  arg1 = reinterpret_cast< stag::LSHFunction * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LSHFunction_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_stag__LSHFunction, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LSHFunction_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_MultiLSHFunction(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  StagInt arg1 ;
  StagInt arg2 ;
  PyObject *swig_obj[2] ;
  stag::MultiLSHFunction *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_MultiLSHFunction", 2, 2, swig_obj)) SWIG_fail;
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[0])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg1 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[0]);
  }
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg2 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[1]);
  }
  {
    try {
      result = (stag::MultiLSHFunction *)new stag::MultiLSHFunction(arg1,arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stag__MultiLSHFunction, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiLSHFunction_apply(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::MultiLSHFunction *arg1 = (stag::MultiLSHFunction *) 0 ;
  stag::DataPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  StagInt result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MultiLSHFunction_apply", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__MultiLSHFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiLSHFunction_apply" "', argument " "1"" of type '" "stag::MultiLSHFunction *""'"); 
  }
  arg1 = reinterpret_cast< stag::MultiLSHFunction * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_stag__DataPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MultiLSHFunction_apply" "', argument " "2"" of type '" "stag::DataPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultiLSHFunction_apply" "', argument " "2"" of type '" "stag::DataPoint const &""'"); 
  }
  arg2 = reinterpret_cast< stag::DataPoint * >(argp2);
  {
    try {
      result = (arg1)->apply((stag::DataPoint const &)*arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // StagInt typemap (out)
    resultobj = PyLong_FromLongLong((long long) result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MultiLSHFunction(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::MultiLSHFunction *arg1 = (stag::MultiLSHFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__MultiLSHFunction, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MultiLSHFunction" "', argument " "1"" of type '" "stag::MultiLSHFunction *""'"); 
  }
  arg1 = reinterpret_cast< stag::MultiLSHFunction * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MultiLSHFunction_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_stag__MultiLSHFunction, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MultiLSHFunction_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_E2LSH__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  stag::E2LSH *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (stag::E2LSH *)new stag::E2LSH();
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stag__E2LSH, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_E2LSH__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  StagUInt arg1 ;
  StagUInt arg2 ;
  std::vector< stag::DataPoint > *arg3 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  std::vector< stag::DataPoint > temp_vec3 ;
  stag::E2LSH *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_E2LSH" "', argument " "1"" of type '" "StagUInt""'");
  } 
  arg1 = static_cast< StagUInt >(val1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_E2LSH" "', argument " "2"" of type '" "StagUInt""'");
  } 
  arg2 = static_cast< StagUInt >(val2);
  {
    // Typemap (in) for std::vector<stag::DataPoint>&
    
    // Get the number of elements in the python list.
    StagInt list_size = PyList_Size((PyObject*) swig_obj[2]);
    temp_vec3.reserve(list_size);
    
    // Construct a new DataPoint for each list object, and add to the vector
    for (StagInt i = 0; i < list_size; i++) {
      PyObject* python_datapoint = PyList_GetItem((PyObject*) swig_obj[2], i);
      void* cpp_datapoint = 0;
      int res = SWIG_ConvertPtr(python_datapoint, &cpp_datapoint, SWIGTYPE_p_stag__DataPoint, 0 | 0);
      temp_vec3.push_back(*(reinterpret_cast<stag::DataPoint*>(cpp_datapoint)));
    }
    
    arg3 = &temp_vec3;
  }
  {
    try {
      result = (stag::E2LSH *)new stag::E2LSH(arg1,arg2,*arg3);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stag__E2LSH, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_E2LSH(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_E2LSH", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_E2LSH__SWIG_0(self, argc, argv);
  }
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          // Typecheck for std::vector<stag::DataPoint>&
          _v = 1;
        }
        if (_v) {
          return _wrap_new_E2LSH__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_E2LSH'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    stag::E2LSH::E2LSH()\n"
    "    stag::E2LSH::E2LSH(StagUInt,StagUInt,std::vector< stag::DataPoint > &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_E2LSH_get_near_neighbors(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::E2LSH *arg1 = (stag::E2LSH *) 0 ;
  stag::DataPoint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< std::vector< stag::DataPoint > > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "E2LSH_get_near_neighbors", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__E2LSH, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "E2LSH_get_near_neighbors" "', argument " "1"" of type '" "stag::E2LSH *""'"); 
  }
  arg1 = reinterpret_cast< stag::E2LSH * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_stag__DataPoint,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "E2LSH_get_near_neighbors" "', argument " "2"" of type '" "stag::DataPoint const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "E2LSH_get_near_neighbors" "', argument " "2"" of type '" "stag::DataPoint const &""'"); 
  }
  arg2 = reinterpret_cast< stag::DataPoint * >(argp2);
  {
    try {
      result = (arg1)->get_near_neighbors((stag::DataPoint const &)*arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // Construct a python list of data point objects
    StagInt outer_length = (&result)->size();
    resultobj = PyList_New(outer_length);
    
    // Construct a new DataPoint for each inner object, and add to the list.
    for (StagInt i = 0; i < outer_length; i++) {
      PyObject* new_datapoint_object = SWIG_NewPointerObj(
        (new stag::DataPoint((&result)->at(i).dimension, (&result)->at(i).coordinates)),
        SWIGTYPE_p_stag__DataPoint, SWIG_POINTER_OWN |  0 );
      
      PyList_SET_ITEM(resultobj, i, new_datapoint_object);
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_E2LSH_collision_probability__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stag::E2LSH *arg1 = (stag::E2LSH *) 0 ;
  StagReal arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  StagReal result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__E2LSH, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "E2LSH_collision_probability" "', argument " "1"" of type '" "stag::E2LSH *""'"); 
  }
  arg1 = reinterpret_cast< stag::E2LSH * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "E2LSH_collision_probability" "', argument " "2"" of type '" "StagReal""'");
  } 
  arg2 = static_cast< StagReal >(val2);
  {
    try {
      result = (StagReal)(arg1)->collision_probability(arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_E2LSH_collision_probability__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  StagUInt arg1 ;
  StagUInt arg2 ;
  StagReal arg3 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  StagReal result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "E2LSH_collision_probability" "', argument " "1"" of type '" "StagUInt""'");
  } 
  arg1 = static_cast< StagUInt >(val1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "E2LSH_collision_probability" "', argument " "2"" of type '" "StagUInt""'");
  } 
  arg2 = static_cast< StagUInt >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "E2LSH_collision_probability" "', argument " "3"" of type '" "StagReal""'");
  } 
  arg3 = static_cast< StagReal >(val3);
  {
    try {
      result = (StagReal)stag::E2LSH::collision_probability(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_E2LSH_collision_probability(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "E2LSH_collision_probability", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_stag__E2LSH, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_E2LSH_collision_probability__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_E2LSH_collision_probability__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'E2LSH_collision_probability'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    stag::E2LSH::collision_probability(StagReal)\n"
    "    stag::E2LSH::collision_probability(StagUInt,StagUInt,StagReal)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_E2LSH(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stag::E2LSH *arg1 = (stag::E2LSH *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_stag__E2LSH, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_E2LSH" "', argument " "1"" of type '" "stag::E2LSH *""'"); 
  }
  arg1 = reinterpret_cast< stag::E2LSH * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *E2LSH_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_stag__E2LSH, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *E2LSH_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_delete_DenseMat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DenseMat *arg1 = (DenseMat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DenseMat" "', argument " "1"" of type '" "DenseMat *""'"); 
  }
  arg1 = reinterpret_cast< DenseMat * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMat_get_rows(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DenseMat *arg1 = (DenseMat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  StagInt result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMat_get_rows" "', argument " "1"" of type '" "DenseMat *""'"); 
  }
  arg1 = reinterpret_cast< DenseMat * >(argp1);
  {
    try {
      result = DenseMat_get_rows(arg1);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // StagInt typemap (out)
    resultobj = PyLong_FromLongLong((long long) result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMat_get_cols(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DenseMat *arg1 = (DenseMat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  StagInt result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMat_get_cols" "', argument " "1"" of type '" "DenseMat *""'"); 
  }
  arg1 = reinterpret_cast< DenseMat * >(argp1);
  {
    try {
      result = DenseMat_get_cols(arg1);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // StagInt typemap (out)
    resultobj = PyLong_FromLongLong((long long) result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMat___add__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DenseMat *arg1 = (DenseMat *) 0 ;
  DenseMat *arg2 = (DenseMat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  DenseMat result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DenseMat___add__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMat___add__" "', argument " "1"" of type '" "DenseMat *""'"); 
  }
  arg1 = reinterpret_cast< DenseMat * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMat___add__" "', argument " "2"" of type '" "DenseMat *""'"); 
  }
  arg2 = reinterpret_cast< DenseMat * >(argp2);
  {
    try {
      result = DenseMat___add__(arg1,arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new DenseMat(result)), SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_DenseMat___sub__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DenseMat *arg1 = (DenseMat *) 0 ;
  DenseMat *arg2 = (DenseMat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  DenseMat result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DenseMat___sub__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMat___sub__" "', argument " "1"" of type '" "DenseMat *""'"); 
  }
  arg1 = reinterpret_cast< DenseMat * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMat___sub__" "', argument " "2"" of type '" "DenseMat *""'"); 
  }
  arg2 = reinterpret_cast< DenseMat * >(argp2);
  {
    try {
      result = DenseMat___sub__(arg1,arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new DenseMat(result)), SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_DenseMat___mul__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DenseMat *arg1 = (DenseMat *) 0 ;
  DenseMat *arg2 = (DenseMat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  DenseMat result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DenseMat___mul__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMat___mul__" "', argument " "1"" of type '" "DenseMat *""'"); 
  }
  arg1 = reinterpret_cast< DenseMat * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMat___mul__" "', argument " "2"" of type '" "DenseMat *""'"); 
  }
  arg2 = reinterpret_cast< DenseMat * >(argp2);
  {
    try {
      result = DenseMat___mul__(arg1,arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new DenseMat(result)), SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_DenseMat___mulfloat__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DenseMat *arg1 = (DenseMat *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  DenseMat result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DenseMat___mulfloat__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMat___mulfloat__" "', argument " "1"" of type '" "DenseMat *""'"); 
  }
  arg1 = reinterpret_cast< DenseMat * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DenseMat___mulfloat__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = DenseMat___mulfloat__(arg1,arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new DenseMat(result)), SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMat___mulint__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DenseMat *arg1 = (DenseMat *) 0 ;
  StagInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  DenseMat result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DenseMat___mulint__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMat___mulint__" "', argument " "1"" of type '" "DenseMat *""'"); 
  }
  arg1 = reinterpret_cast< DenseMat * >(argp1);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg2 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[1]);
  }
  {
    try {
      result = DenseMat___mulint__(arg1,SWIG_STD_MOVE(arg2));
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new DenseMat(result)), SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMat___neg__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DenseMat *arg1 = (DenseMat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  DenseMat result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMat___neg__" "', argument " "1"" of type '" "DenseMat *""'"); 
  }
  arg1 = reinterpret_cast< DenseMat * >(argp1);
  {
    try {
      result = DenseMat___neg__(arg1);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new DenseMat(result)), SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_DenseMat___eq__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DenseMat *arg1 = (DenseMat *) 0 ;
  DenseMat *arg2 = (DenseMat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DenseMat___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMat___eq__" "', argument " "1"" of type '" "DenseMat *""'"); 
  }
  arg1 = reinterpret_cast< DenseMat * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMat___eq__" "', argument " "2"" of type '" "DenseMat *""'"); 
  }
  arg2 = reinterpret_cast< DenseMat * >(argp2);
  {
    try {
      result = (bool)DenseMat___eq__(arg1,arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_DenseMat___truedivfloat__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DenseMat *arg1 = (DenseMat *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  DenseMat result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DenseMat___truedivfloat__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMat___truedivfloat__" "', argument " "1"" of type '" "DenseMat *""'"); 
  }
  arg1 = reinterpret_cast< DenseMat * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DenseMat___truedivfloat__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = DenseMat___truedivfloat__(arg1,arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new DenseMat(result)), SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMat___truedivint__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DenseMat *arg1 = (DenseMat *) 0 ;
  StagInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  DenseMat result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DenseMat___truedivint__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMat___truedivint__" "', argument " "1"" of type '" "DenseMat *""'"); 
  }
  arg1 = reinterpret_cast< DenseMat * >(argp1);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg2 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[1]);
  }
  {
    try {
      result = DenseMat___truedivint__(arg1,SWIG_STD_MOVE(arg2));
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new DenseMat(result)), SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMat___transpose__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DenseMat *arg1 = (DenseMat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  DenseMat result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMat___transpose__" "', argument " "1"" of type '" "DenseMat *""'"); 
  }
  arg1 = reinterpret_cast< DenseMat * >(argp1);
  {
    try {
      result = DenseMat___transpose__(arg1);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new DenseMat(result)), SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DenseMat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DenseMat *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_DenseMat", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (DenseMat *)new DenseMat();
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DenseMat_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DenseMat_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_delete_SprsMat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SprsMat *arg1 = (SprsMat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SprsMat" "', argument " "1"" of type '" "SprsMat *""'"); 
  }
  arg1 = reinterpret_cast< SprsMat * >(argp1);
  {
    try {
      delete arg1;
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SprsMat_get_rows(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SprsMat *arg1 = (SprsMat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  StagInt result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SprsMat_get_rows" "', argument " "1"" of type '" "SprsMat *""'"); 
  }
  arg1 = reinterpret_cast< SprsMat * >(argp1);
  {
    try {
      result = SprsMat_get_rows(arg1);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // StagInt typemap (out)
    resultobj = PyLong_FromLongLong((long long) result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SprsMat_get_cols(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SprsMat *arg1 = (SprsMat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  StagInt result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SprsMat_get_cols" "', argument " "1"" of type '" "SprsMat *""'"); 
  }
  arg1 = reinterpret_cast< SprsMat * >(argp1);
  {
    try {
      result = SprsMat_get_cols(arg1);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    // StagInt typemap (out)
    resultobj = PyLong_FromLongLong((long long) result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SprsMat___add__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SprsMat *arg1 = (SprsMat *) 0 ;
  SprsMat *arg2 = (SprsMat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  SprsMat result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SprsMat___add__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SprsMat___add__" "', argument " "1"" of type '" "SprsMat *""'"); 
  }
  arg1 = reinterpret_cast< SprsMat * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SprsMat___add__" "', argument " "2"" of type '" "SprsMat *""'"); 
  }
  arg2 = reinterpret_cast< SprsMat * >(argp2);
  {
    try {
      result = SprsMat___add__(arg1,arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new SprsMat(result)), SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SprsMat___sub__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SprsMat *arg1 = (SprsMat *) 0 ;
  SprsMat *arg2 = (SprsMat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  SprsMat result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SprsMat___sub__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SprsMat___sub__" "', argument " "1"" of type '" "SprsMat *""'"); 
  }
  arg1 = reinterpret_cast< SprsMat * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SprsMat___sub__" "', argument " "2"" of type '" "SprsMat *""'"); 
  }
  arg2 = reinterpret_cast< SprsMat * >(argp2);
  {
    try {
      result = SprsMat___sub__(arg1,arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new SprsMat(result)), SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SprsMat___mul__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SprsMat *arg1 = (SprsMat *) 0 ;
  SprsMat *arg2 = (SprsMat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  SprsMat result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SprsMat___mul__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SprsMat___mul__" "', argument " "1"" of type '" "SprsMat *""'"); 
  }
  arg1 = reinterpret_cast< SprsMat * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SprsMat___mul__" "', argument " "2"" of type '" "SprsMat *""'"); 
  }
  arg2 = reinterpret_cast< SprsMat * >(argp2);
  {
    try {
      result = SprsMat___mul__(arg1,arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new SprsMat(result)), SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SprsMat___mulfloat__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SprsMat *arg1 = (SprsMat *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  SprsMat result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SprsMat___mulfloat__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SprsMat___mulfloat__" "', argument " "1"" of type '" "SprsMat *""'"); 
  }
  arg1 = reinterpret_cast< SprsMat * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SprsMat___mulfloat__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = SprsMat___mulfloat__(arg1,arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new SprsMat(result)), SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SprsMat___mulint__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SprsMat *arg1 = (SprsMat *) 0 ;
  StagInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  SprsMat result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SprsMat___mulint__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SprsMat___mulint__" "', argument " "1"" of type '" "SprsMat *""'"); 
  }
  arg1 = reinterpret_cast< SprsMat * >(argp1);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg2 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[1]);
  }
  {
    try {
      result = SprsMat___mulint__(arg1,SWIG_STD_MOVE(arg2));
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new SprsMat(result)), SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SprsMat___neg__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SprsMat *arg1 = (SprsMat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SprsMat result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SprsMat___neg__" "', argument " "1"" of type '" "SprsMat *""'"); 
  }
  arg1 = reinterpret_cast< SprsMat * >(argp1);
  {
    try {
      result = SprsMat___neg__(arg1);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new SprsMat(result)), SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SprsMat___truedivfloat__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SprsMat *arg1 = (SprsMat *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  SprsMat result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SprsMat___truedivfloat__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SprsMat___truedivfloat__" "', argument " "1"" of type '" "SprsMat *""'"); 
  }
  arg1 = reinterpret_cast< SprsMat * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SprsMat___truedivfloat__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = SprsMat___truedivfloat__(arg1,arg2);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new SprsMat(result)), SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SprsMat___truedivint__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SprsMat *arg1 = (SprsMat *) 0 ;
  StagInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  SprsMat result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SprsMat___truedivint__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SprsMat___truedivint__" "', argument " "1"" of type '" "SprsMat *""'"); 
  }
  arg1 = reinterpret_cast< SprsMat * >(argp1);
  {
    // StagInt typemap (in)
    if (!PyLong_Check((PyObject *) swig_obj[1])) {
      PyErr_SetString(PyExc_TypeError, "Expected an integer.");
      return NULL;
    }
    arg2 = (StagInt) PyLong_AsLong((PyObject*) swig_obj[1]);
  }
  {
    try {
      result = SprsMat___truedivint__(arg1,SWIG_STD_MOVE(arg2));
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new SprsMat(result)), SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SprsMat___transpose__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SprsMat *arg1 = (SprsMat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SprsMat result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SprsMat___transpose__" "', argument " "1"" of type '" "SprsMat *""'"); 
  }
  arg1 = reinterpret_cast< SprsMat * >(argp1);
  {
    try {
      result = SprsMat___transpose__(arg1);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new SprsMat(result)), SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SprsMat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SprsMat *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_SprsMat", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (SprsMat *)new SprsMat();
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SprsMat_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SprsMat_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_sprsMatFromVectorsDims(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long arg2 ;
  std::vector< StagInt > *arg3 = 0 ;
  std::vector< StagInt > *arg4 = 0 ;
  std::vector< double > *arg5 = 0 ;
  long val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  std::vector< int64_t > temp_vec3 ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  std::vector< int64_t > temp_vec4 ;
  PyArrayObject *array5 = NULL ;
  int is_new_object5 = 0 ;
  std::vector< double > temp_vec5 ;
  PyObject *swig_obj[5] ;
  SprsMat result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "sprsMatFromVectorsDims", 5, 5, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "sprsMatFromVectorsDims" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  ecode2 = SWIG_AsVal_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sprsMatFromVectorsDims" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    // Get the number of elements in the numpy array3
    npy_intp size[1] = {
      PyArray_DIMS((PyArrayObject*) swig_obj[2])[0] 
    };
    
    // Check that the dimensions of the array3 are correct
    array3 = obj_to_array_contiguous_allow_conversion(swig_obj[2],
      NPY_INT64,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    
    // Get a pointer to the data in the numpy array3
    int64_t* data_ptr = (int64_t*) array_data(array3);
    
    // Copy the numpy data into the new vector.
    temp_vec3.reserve(size[0]);
    for (int i = 0; i < size[0]; i++) {
      temp_vec3.push_back(data_ptr[i]);
    }
    arg3 = &temp_vec3;
  }
  {
    // Get the number of elements in the numpy array4
    npy_intp size[1] = {
      PyArray_DIMS((PyArrayObject*) swig_obj[3])[0] 
    };
    
    // Check that the dimensions of the array4 are correct
    array4 = obj_to_array_contiguous_allow_conversion(swig_obj[3],
      NPY_INT64,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    
    // Get a pointer to the data in the numpy array4
    int64_t* data_ptr = (int64_t*) array_data(array4);
    
    // Copy the numpy data into the new vector.
    temp_vec4.reserve(size[0]);
    for (int i = 0; i < size[0]; i++) {
      temp_vec4.push_back(data_ptr[i]);
    }
    arg4 = &temp_vec4;
  }
  {
    // Get the number of elements in the numpy array5
    npy_intp size[1] = {
      PyArray_DIMS((PyArrayObject*) swig_obj[4])[0] 
    };
    
    // Check that the dimensions of the array5 are correct
    array5 = obj_to_array_contiguous_allow_conversion(swig_obj[4],
      NPY_DOUBLE,
      &is_new_object5);
    if (!array5 || !require_dimensions(array5, 1) ||
      !require_size(array5, size, 1)) SWIG_fail;
    
    // Get a pointer to the data in the numpy array5
    double* data_ptr = (double*) array_data(array5);
    
    // Copy the numpy data into the new vector.
    temp_vec5.reserve(size[0]);
    for (int i = 0; i < size[0]; i++) {
      temp_vec5.push_back(data_ptr[i]);
    }
    arg5 = &temp_vec5;
  }
  {
    try {
      result = sprsMatFromVectorsDims(arg1,arg2,*arg3,*arg4,*arg5);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new SprsMat(result)), SWIGTYPE_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_denseMatFromNdarray(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Eigen::MatrixXd *arg1 = 0 ;
  Eigen::MatrixXd temp1 ;
  PyObject *swig_obj[1] ;
  DenseMat result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // In: const&
    int res = ConvertFromNumpyToEigenMatrix<Eigen::MatrixXd>(&temp1, swig_obj[0]);
    if (res < 0) return NULL;
    arg1 = &temp1;
  }
  {
    try {
      result = denseMatFromNdarray((Eigen::MatrixXd const &)*arg1);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new DenseMat(result)), SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, SWIG_POINTER_OWN |  0 );
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ndArrayFromDenseMat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DenseMat *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Eigen::MatrixXd result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ndArrayFromDenseMat" "', argument " "1"" of type '" "DenseMat const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ndArrayFromDenseMat" "', argument " "1"" of type '" "DenseMat const &""'"); 
  }
  arg1 = reinterpret_cast< DenseMat * >(argp1);
  {
    try {
      result = ndArrayFromDenseMat((Eigen::Matrix< StagReal,Eigen::Dynamic,Eigen::Dynamic,Eigen::RowMajor > const &)*arg1);
    } catch (std::invalid_argument &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::runtime_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    } catch (std::domain_error &e) {
      PyErr_SetString(PyExc_AttributeError, const_cast<char*>(e.what()));
      return NULL;
    }
  }
  {
    int res = ConvertFromEigenToNumPyMatrix<Eigen::MatrixXd>(&resultobj, &result);
    if (res < 0) return NULL;
  }
  return resultobj;
fail:
  return NULL;
}


static PyMethodDef SwigMethods[] = {
	 { "new_TupleMM", _wrap_new_TupleMM, METH_VARARGS, NULL},
	 { "TupleMM_get0", _wrap_TupleMM_get0, METH_O, NULL},
	 { "TupleMM_get1", _wrap_TupleMM_get1, METH_O, NULL},
	 { "TupleMM_set0", _wrap_TupleMM_set0, METH_VARARGS, NULL},
	 { "TupleMM_set1", _wrap_TupleMM_set1, METH_VARARGS, NULL},
	 { "TupleMM___len__", _wrap_TupleMM___len__, METH_O, NULL},
	 { "delete_TupleMM", _wrap_delete_TupleMM, METH_O, NULL},
	 { "TupleMM_swigregister", TupleMM_swigregister, METH_O, NULL},
	 { "TupleMM_swiginit", TupleMM_swiginit, METH_VARARGS, NULL},
	 { "new_Tupleii", _wrap_new_Tupleii, METH_VARARGS, NULL},
	 { "Tupleii_get0", _wrap_Tupleii_get0, METH_O, NULL},
	 { "Tupleii_get1", _wrap_Tupleii_get1, METH_O, NULL},
	 { "Tupleii_set0", _wrap_Tupleii_set0, METH_VARARGS, NULL},
	 { "Tupleii_set1", _wrap_Tupleii_set1, METH_VARARGS, NULL},
	 { "Tupleii___len__", _wrap_Tupleii___len__, METH_O, NULL},
	 { "delete_Tupleii", _wrap_delete_Tupleii, METH_O, NULL},
	 { "Tupleii_swigregister", Tupleii_swigregister, METH_O, NULL},
	 { "Tupleii_swiginit", Tupleii_swiginit, METH_VARARGS, NULL},
	 { "new_TupleEigensystem", _wrap_new_TupleEigensystem, METH_VARARGS, NULL},
	 { "TupleEigensystem_get0", _wrap_TupleEigensystem_get0, METH_O, NULL},
	 { "TupleEigensystem_get1", _wrap_TupleEigensystem_get1, METH_O, NULL},
	 { "TupleEigensystem_set0", _wrap_TupleEigensystem_set0, METH_VARARGS, NULL},
	 { "TupleEigensystem_set1", _wrap_TupleEigensystem_set1, METH_VARARGS, NULL},
	 { "TupleEigensystem___len__", _wrap_TupleEigensystem___len__, METH_O, NULL},
	 { "delete_TupleEigensystem", _wrap_delete_TupleEigensystem, METH_O, NULL},
	 { "TupleEigensystem_swigregister", TupleEigensystem_swigregister, METH_O, NULL},
	 { "TupleEigensystem_swiginit", TupleEigensystem_swiginit, METH_VARARGS, NULL},
	 { "edge_v1_set", _wrap_edge_v1_set, METH_VARARGS, NULL},
	 { "edge_v1_get", _wrap_edge_v1_get, METH_O, NULL},
	 { "edge_v2_set", _wrap_edge_v2_set, METH_VARARGS, NULL},
	 { "edge_v2_get", _wrap_edge_v2_get, METH_O, NULL},
	 { "edge_weight_set", _wrap_edge_weight_set, METH_VARARGS, NULL},
	 { "edge_weight_get", _wrap_edge_weight_get, METH_O, NULL},
	 { "new_edge", _wrap_new_edge, METH_NOARGS, NULL},
	 { "delete_edge", _wrap_delete_edge, METH_O, NULL},
	 { "edge_swigregister", edge_swigregister, METH_O, NULL},
	 { "edge_swiginit", edge_swiginit, METH_VARARGS, NULL},
	 { "LocalGraph_degree", _wrap_LocalGraph_degree, METH_VARARGS, NULL},
	 { "LocalGraph_degree_unweighted", _wrap_LocalGraph_degree_unweighted, METH_VARARGS, NULL},
	 { "LocalGraph_neighbors", _wrap_LocalGraph_neighbors, METH_VARARGS, NULL},
	 { "LocalGraph_neighbors_unweighted", _wrap_LocalGraph_neighbors_unweighted, METH_VARARGS, NULL},
	 { "LocalGraph_degrees", _wrap_LocalGraph_degrees, METH_VARARGS, NULL},
	 { "LocalGraph_degrees_unweighted", _wrap_LocalGraph_degrees_unweighted, METH_VARARGS, NULL},
	 { "LocalGraph_vertex_exists", _wrap_LocalGraph_vertex_exists, METH_VARARGS, NULL},
	 { "delete_LocalGraph", _wrap_delete_LocalGraph, METH_O, NULL},
	 { "new_LocalGraph", _wrap_new_LocalGraph, METH_O, NULL},
	 { "disown_LocalGraph", _wrap_disown_LocalGraph, METH_O, NULL},
	 { "LocalGraph_swigregister", LocalGraph_swigregister, METH_O, NULL},
	 { "LocalGraph_swiginit", LocalGraph_swiginit, METH_VARARGS, NULL},
	 { "new_Graph", _wrap_new_Graph, METH_VARARGS, NULL},
	 { "Graph_adjacency", _wrap_Graph_adjacency, METH_O, NULL},
	 { "Graph_laplacian", _wrap_Graph_laplacian, METH_O, NULL},
	 { "Graph_normalised_laplacian", _wrap_Graph_normalised_laplacian, METH_O, NULL},
	 { "Graph_signless_laplacian", _wrap_Graph_signless_laplacian, METH_O, NULL},
	 { "Graph_normalised_signless_laplacian", _wrap_Graph_normalised_signless_laplacian, METH_O, NULL},
	 { "Graph_degree_matrix", _wrap_Graph_degree_matrix, METH_O, NULL},
	 { "Graph_inverse_degree_matrix", _wrap_Graph_inverse_degree_matrix, METH_O, NULL},
	 { "Graph_lazy_random_walk_matrix", _wrap_Graph_lazy_random_walk_matrix, METH_O, NULL},
	 { "Graph_total_volume", _wrap_Graph_total_volume, METH_O, NULL},
	 { "Graph_average_degree", _wrap_Graph_average_degree, METH_O, NULL},
	 { "Graph_number_of_vertices", _wrap_Graph_number_of_vertices, METH_O, NULL},
	 { "Graph_number_of_edges", _wrap_Graph_number_of_edges, METH_O, NULL},
	 { "Graph_add_edge", _wrap_Graph_add_edge, METH_VARARGS, NULL},
	 { "Graph_remove_edge", _wrap_Graph_remove_edge, METH_VARARGS, NULL},
	 { "Graph_has_self_loops", _wrap_Graph_has_self_loops, METH_O, NULL},
	 { "Graph_is_connected", _wrap_Graph_is_connected, METH_O, NULL},
	 { "Graph_subgraph", _wrap_Graph_subgraph, METH_VARARGS, NULL},
	 { "Graph_disjoint_union", _wrap_Graph_disjoint_union, METH_VARARGS, NULL},
	 { "Graph_degree", _wrap_Graph_degree, METH_VARARGS, NULL},
	 { "Graph_degree_unweighted", _wrap_Graph_degree_unweighted, METH_VARARGS, NULL},
	 { "Graph_neighbors", _wrap_Graph_neighbors, METH_VARARGS, NULL},
	 { "Graph_neighbors_unweighted", _wrap_Graph_neighbors_unweighted, METH_VARARGS, NULL},
	 { "Graph_degrees", _wrap_Graph_degrees, METH_VARARGS, NULL},
	 { "Graph_degrees_unweighted", _wrap_Graph_degrees_unweighted, METH_VARARGS, NULL},
	 { "Graph_vertex_exists", _wrap_Graph_vertex_exists, METH_VARARGS, NULL},
	 { "delete_Graph", _wrap_delete_Graph, METH_O, NULL},
	 { "Graph___eq__", _wrap_Graph___eq__, METH_VARARGS, NULL},
	 { "Graph_swigregister", Graph_swigregister, METH_O, NULL},
	 { "Graph_swiginit", Graph_swiginit, METH_VARARGS, NULL},
	 { "new_AdjacencyListLocalGraph", _wrap_new_AdjacencyListLocalGraph, METH_O, NULL},
	 { "AdjacencyListLocalGraph_degree", _wrap_AdjacencyListLocalGraph_degree, METH_VARARGS, NULL},
	 { "AdjacencyListLocalGraph_degree_unweighted", _wrap_AdjacencyListLocalGraph_degree_unweighted, METH_VARARGS, NULL},
	 { "AdjacencyListLocalGraph_neighbors", _wrap_AdjacencyListLocalGraph_neighbors, METH_VARARGS, NULL},
	 { "AdjacencyListLocalGraph_neighbors_unweighted", _wrap_AdjacencyListLocalGraph_neighbors_unweighted, METH_VARARGS, NULL},
	 { "AdjacencyListLocalGraph_degrees", _wrap_AdjacencyListLocalGraph_degrees, METH_VARARGS, NULL},
	 { "AdjacencyListLocalGraph_degrees_unweighted", _wrap_AdjacencyListLocalGraph_degrees_unweighted, METH_VARARGS, NULL},
	 { "AdjacencyListLocalGraph_vertex_exists", _wrap_AdjacencyListLocalGraph_vertex_exists, METH_VARARGS, NULL},
	 { "delete_AdjacencyListLocalGraph", _wrap_delete_AdjacencyListLocalGraph, METH_O, NULL},
	 { "AdjacencyListLocalGraph_swigregister", AdjacencyListLocalGraph_swigregister, METH_O, NULL},
	 { "AdjacencyListLocalGraph_swiginit", AdjacencyListLocalGraph_swiginit, METH_VARARGS, NULL},
	 { "cycle_graph", _wrap_cycle_graph, METH_O, NULL},
	 { "complete_graph", _wrap_complete_graph, METH_O, NULL},
	 { "barbell_graph", _wrap_barbell_graph, METH_O, NULL},
	 { "star_graph", _wrap_star_graph, METH_O, NULL},
	 { "identity_graph", _wrap_identity_graph, METH_O, NULL},
	 { "__eq__", _wrap___eq__, METH_VARARGS, NULL},
	 { "__ne__", _wrap___ne__, METH_VARARGS, NULL},
	 { "__add__", _wrap___add__, METH_VARARGS, NULL},
	 { "sprsMatValues", _wrap_sprsMatValues, METH_O, NULL},
	 { "sprsMatInnerIndices", _wrap_sprsMatInnerIndices, METH_O, NULL},
	 { "sprsMatOuterStarts", _wrap_sprsMatOuterStarts, METH_O, NULL},
	 { "sprsMatToVec", _wrap_sprsMatToVec, METH_VARARGS, NULL},
	 { "sprsMatFromVectors", _wrap_sprsMatFromVectors, METH_VARARGS, NULL},
	 { "isSymmetric", _wrap_isSymmetric, METH_O, NULL},
	 { "safeGetline", _wrap_safeGetline, METH_VARARGS, NULL},
	 { "getTempFilename", _wrap_getTempFilename, METH_NOARGS, NULL},
	 { "openTempFile", _wrap_openTempFile, METH_O, NULL},
	 { "spectral_cluster", _wrap_spectral_cluster, METH_VARARGS, NULL},
	 { "cheeger_cut", _wrap_cheeger_cut, METH_O, NULL},
	 { "local_cluster", _wrap_local_cluster, METH_VARARGS, NULL},
	 { "local_cluster_acl", _wrap_local_cluster_acl, METH_VARARGS, NULL},
	 { "approximate_pagerank", _wrap_approximate_pagerank, METH_VARARGS, NULL},
	 { "sweep_set_conductance", _wrap_sweep_set_conductance, METH_VARARGS, NULL},
	 { "connected_component", _wrap_connected_component, METH_VARARGS, NULL},
	 { "connected_components", _wrap_connected_components, METH_O, NULL},
	 { "adjusted_rand_index", _wrap_adjusted_rand_index, METH_VARARGS, NULL},
	 { "mutual_information", _wrap_mutual_information, METH_VARARGS, NULL},
	 { "normalised_mutual_information", _wrap_normalised_mutual_information, METH_VARARGS, NULL},
	 { "conductance", _wrap_conductance, METH_VARARGS, NULL},
	 { "symmetric_difference", _wrap_symmetric_difference, METH_VARARGS, NULL},
	 { "approximate_similarity_graph", _wrap_approximate_similarity_graph, METH_VARARGS, NULL},
	 { "similarity_graph", _wrap_similarity_graph, METH_VARARGS, NULL},
	 { "load_edgelist", _wrap_load_edgelist, METH_O, NULL},
	 { "save_edgelist", _wrap_save_edgelist, METH_VARARGS, NULL},
	 { "parse_adjacencylist_content_line", _wrap_parse_adjacencylist_content_line, METH_O, NULL},
	 { "sort_edgelist", _wrap_sort_edgelist, METH_O, NULL},
	 { "copy_edgelist_duplicate_edges", _wrap_copy_edgelist_duplicate_edges, METH_VARARGS, NULL},
	 { "load_adjacencylist", _wrap_load_adjacencylist, METH_O, NULL},
	 { "save_adjacencylist", _wrap_save_adjacencylist, METH_VARARGS, NULL},
	 { "edgelist_to_adjacencylist", _wrap_edgelist_to_adjacencylist, METH_VARARGS, NULL},
	 { "adjacencylist_to_edgelist", _wrap_adjacencylist_to_edgelist, METH_VARARGS, NULL},
	 { "get_global_rng", _wrap_get_global_rng, METH_NOARGS, NULL},
	 { "create_rng", _wrap_create_rng, METH_NOARGS, NULL},
	 { "sbm", _wrap_sbm, METH_VARARGS, NULL},
	 { "general_sbm", _wrap_general_sbm, METH_VARARGS, NULL},
	 { "general_sbm_edgelist", _wrap_general_sbm_edgelist, METH_VARARGS, NULL},
	 { "erdos_renyi", _wrap_erdos_renyi, METH_VARARGS, NULL},
	 { "sbm_gt_labels", _wrap_sbm_gt_labels, METH_VARARGS, NULL},
	 { "general_sbm_gt_labels", _wrap_general_sbm_gt_labels, METH_O, NULL},
	 { "compute_eigensystem", _wrap_compute_eigensystem, METH_VARARGS, NULL},
	 { "compute_eigenvectors", _wrap_compute_eigenvectors, METH_VARARGS, NULL},
	 { "compute_eigenvalues", _wrap_compute_eigenvalues, METH_VARARGS, NULL},
	 { "power_method", _wrap_power_method, METH_VARARGS, NULL},
	 { "rayleigh_quotient", _wrap_rayleigh_quotient, METH_VARARGS, NULL},
	 { "delete_DataPoint", _wrap_delete_DataPoint, METH_O, NULL},
	 { "new_DataPoint", _wrap_new_DataPoint, METH_VARARGS, NULL},
	 { "DataPoint_to_vector", _wrap_DataPoint_to_vector, METH_O, NULL},
	 { "DataPoint_dimension_set", _wrap_DataPoint_dimension_set, METH_VARARGS, NULL},
	 { "DataPoint_dimension_get", _wrap_DataPoint_dimension_get, METH_O, NULL},
	 { "DataPoint_coordinates_set", _wrap_DataPoint_coordinates_set, METH_VARARGS, NULL},
	 { "DataPoint_coordinates_get", _wrap_DataPoint_coordinates_get, METH_O, NULL},
	 { "DataPoint_swigregister", DataPoint_swigregister, METH_O, NULL},
	 { "DataPoint_swiginit", DataPoint_swiginit, METH_VARARGS, NULL},
	 { "load_matrix", _wrap_load_matrix, METH_O, NULL},
	 { "save_matrix", _wrap_save_matrix, METH_VARARGS, NULL},
	 { "matrix_to_datapoints", _wrap_matrix_to_datapoints, METH_O, NULL},
	 { "gaussian_kernel", _wrap_gaussian_kernel, METH_VARARGS, NULL},
	 { "new_CKNSGaussianKDEHashUnit", _wrap_new_CKNSGaussianKDEHashUnit, METH_VARARGS, NULL},
	 { "CKNSGaussianKDEHashUnit_query", _wrap_CKNSGaussianKDEHashUnit_query, METH_VARARGS, NULL},
	 { "delete_CKNSGaussianKDEHashUnit", _wrap_delete_CKNSGaussianKDEHashUnit, METH_O, NULL},
	 { "CKNSGaussianKDEHashUnit_swigregister", CKNSGaussianKDEHashUnit_swigregister, METH_O, NULL},
	 { "CKNSGaussianKDEHashUnit_swiginit", CKNSGaussianKDEHashUnit_swiginit, METH_VARARGS, NULL},
	 { "new_CKNSGaussianKDE", _wrap_new_CKNSGaussianKDE, METH_VARARGS, NULL},
	 { "CKNSGaussianKDE_query", _wrap_CKNSGaussianKDE_query, METH_VARARGS, NULL},
	 { "delete_CKNSGaussianKDE", _wrap_delete_CKNSGaussianKDE, METH_O, NULL},
	 { "CKNSGaussianKDE_swigregister", CKNSGaussianKDE_swigregister, METH_O, NULL},
	 { "CKNSGaussianKDE_swiginit", CKNSGaussianKDE_swiginit, METH_VARARGS, NULL},
	 { "new_ExactGaussianKDE", _wrap_new_ExactGaussianKDE, METH_VARARGS, NULL},
	 { "ExactGaussianKDE_query", _wrap_ExactGaussianKDE_query, METH_VARARGS, NULL},
	 { "ExactGaussianKDE_sample_neighbors", _wrap_ExactGaussianKDE_sample_neighbors, METH_VARARGS, NULL},
	 { "delete_ExactGaussianKDE", _wrap_delete_ExactGaussianKDE, METH_O, NULL},
	 { "ExactGaussianKDE_swigregister", ExactGaussianKDE_swigregister, METH_O, NULL},
	 { "ExactGaussianKDE_swiginit", ExactGaussianKDE_swiginit, METH_VARARGS, NULL},
	 { "new_LSHFunction", _wrap_new_LSHFunction, METH_O, NULL},
	 { "LSHFunction_apply", _wrap_LSHFunction_apply, METH_VARARGS, NULL},
	 { "LSHFunction_collision_probability", _wrap_LSHFunction_collision_probability, METH_O, NULL},
	 { "delete_LSHFunction", _wrap_delete_LSHFunction, METH_O, NULL},
	 { "LSHFunction_swigregister", LSHFunction_swigregister, METH_O, NULL},
	 { "LSHFunction_swiginit", LSHFunction_swiginit, METH_VARARGS, NULL},
	 { "new_MultiLSHFunction", _wrap_new_MultiLSHFunction, METH_VARARGS, NULL},
	 { "MultiLSHFunction_apply", _wrap_MultiLSHFunction_apply, METH_VARARGS, NULL},
	 { "delete_MultiLSHFunction", _wrap_delete_MultiLSHFunction, METH_O, NULL},
	 { "MultiLSHFunction_swigregister", MultiLSHFunction_swigregister, METH_O, NULL},
	 { "MultiLSHFunction_swiginit", MultiLSHFunction_swiginit, METH_VARARGS, NULL},
	 { "new_E2LSH", _wrap_new_E2LSH, METH_VARARGS, NULL},
	 { "E2LSH_get_near_neighbors", _wrap_E2LSH_get_near_neighbors, METH_VARARGS, NULL},
	 { "E2LSH_collision_probability", _wrap_E2LSH_collision_probability, METH_VARARGS, NULL},
	 { "delete_E2LSH", _wrap_delete_E2LSH, METH_O, NULL},
	 { "E2LSH_swigregister", E2LSH_swigregister, METH_O, NULL},
	 { "E2LSH_swiginit", E2LSH_swiginit, METH_VARARGS, NULL},
	 { "delete_DenseMat", _wrap_delete_DenseMat, METH_O, NULL},
	 { "DenseMat_get_rows", _wrap_DenseMat_get_rows, METH_O, NULL},
	 { "DenseMat_get_cols", _wrap_DenseMat_get_cols, METH_O, NULL},
	 { "DenseMat___add__", _wrap_DenseMat___add__, METH_VARARGS, NULL},
	 { "DenseMat___sub__", _wrap_DenseMat___sub__, METH_VARARGS, NULL},
	 { "DenseMat___mul__", _wrap_DenseMat___mul__, METH_VARARGS, NULL},
	 { "DenseMat___mulfloat__", _wrap_DenseMat___mulfloat__, METH_VARARGS, NULL},
	 { "DenseMat___mulint__", _wrap_DenseMat___mulint__, METH_VARARGS, NULL},
	 { "DenseMat___neg__", _wrap_DenseMat___neg__, METH_O, NULL},
	 { "DenseMat___eq__", _wrap_DenseMat___eq__, METH_VARARGS, NULL},
	 { "DenseMat___truedivfloat__", _wrap_DenseMat___truedivfloat__, METH_VARARGS, NULL},
	 { "DenseMat___truedivint__", _wrap_DenseMat___truedivint__, METH_VARARGS, NULL},
	 { "DenseMat___transpose__", _wrap_DenseMat___transpose__, METH_O, NULL},
	 { "new_DenseMat", _wrap_new_DenseMat, METH_NOARGS, NULL},
	 { "DenseMat_swigregister", DenseMat_swigregister, METH_O, NULL},
	 { "DenseMat_swiginit", DenseMat_swiginit, METH_VARARGS, NULL},
	 { "delete_SprsMat", _wrap_delete_SprsMat, METH_O, NULL},
	 { "SprsMat_get_rows", _wrap_SprsMat_get_rows, METH_O, NULL},
	 { "SprsMat_get_cols", _wrap_SprsMat_get_cols, METH_O, NULL},
	 { "SprsMat___add__", _wrap_SprsMat___add__, METH_VARARGS, NULL},
	 { "SprsMat___sub__", _wrap_SprsMat___sub__, METH_VARARGS, NULL},
	 { "SprsMat___mul__", _wrap_SprsMat___mul__, METH_VARARGS, NULL},
	 { "SprsMat___mulfloat__", _wrap_SprsMat___mulfloat__, METH_VARARGS, NULL},
	 { "SprsMat___mulint__", _wrap_SprsMat___mulint__, METH_VARARGS, NULL},
	 { "SprsMat___neg__", _wrap_SprsMat___neg__, METH_O, NULL},
	 { "SprsMat___truedivfloat__", _wrap_SprsMat___truedivfloat__, METH_VARARGS, NULL},
	 { "SprsMat___truedivint__", _wrap_SprsMat___truedivint__, METH_VARARGS, NULL},
	 { "SprsMat___transpose__", _wrap_SprsMat___transpose__, METH_O, NULL},
	 { "new_SprsMat", _wrap_new_SprsMat, METH_NOARGS, NULL},
	 { "SprsMat_swigregister", SprsMat_swigregister, METH_O, NULL},
	 { "SprsMat_swiginit", SprsMat_swiginit, METH_VARARGS, NULL},
	 { "sprsMatFromVectorsDims", _wrap_sprsMatFromVectorsDims, METH_VARARGS, NULL},
	 { "denseMatFromNdarray", _wrap_denseMatFromNdarray, METH_O, NULL},
	 { "ndArrayFromDenseMat", _wrap_ndArrayFromDenseMat, METH_O, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_stag__AdjacencyListLocalGraphTo_p_stag__LocalGraph(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stag::LocalGraph *)  ((stag::AdjacencyListLocalGraph *) x));
}
static void *_p_stag__GraphTo_p_stag__LocalGraph(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stag::LocalGraph *)  ((stag::Graph *) x));
}
static swig_type_info _swigt__p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t = {"_p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t", "DenseMat *|Eigen::Matrix< StagReal,Eigen::Dynamic,Eigen::Dynamic,Eigen::RowMajor > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t = {"_p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t", "SprsMat *|Eigen::SparseMatrix< StagReal,Eigen::ColMajor,StagInt > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__TripletT_StagReal_StagInt_t = {"_p_Eigen__TripletT_StagReal_StagInt_t", "EdgeTriplet *|Eigen::Triplet< StagReal,StagInt > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Spectra__SparseSymMatProdT_StagReal_Eigen__Upper_Eigen__ColMajor_StagInt_t = {"_p_Spectra__SparseSymMatProdT_StagReal_Eigen__Upper_Eigen__ColMajor_StagInt_t", "stag::SprsMatProdOp *|Spectra::SparseSymMatProd< StagReal,Eigen::Upper,Eigen::ColMajor,StagInt > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Spectra__SparseSymShiftSolveT_StagReal_Eigen__Upper_Eigen__ColMajor_StagInt_t = {"_p_Spectra__SparseSymShiftSolveT_StagReal_Eigen__Upper_Eigen__ColMajor_StagInt_t", "stag::SprsMatShiftSolveOp *|Spectra::SparseSymShiftSolve< StagReal,Eigen::Upper,Eigen::ColMajor,StagInt > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "StagReal *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int64_t = {"_p_int64_t", "StagInt *|int64_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "StagUInt *|size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_stag__AdjacencyListLocalGraph = {"_p_stag__AdjacencyListLocalGraph", "stag::AdjacencyListLocalGraph *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_stag__CKNSGaussianKDE = {"_p_stag__CKNSGaussianKDE", "stag::CKNSGaussianKDE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_stag__CKNSGaussianKDEHashUnit = {"_p_stag__CKNSGaussianKDEHashUnit", "stag::CKNSGaussianKDEHashUnit *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_stag__DataPoint = {"_p_stag__DataPoint", "stag::DataPoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_stag__E2LSH = {"_p_stag__E2LSH", "stag::E2LSH *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_stag__ExactGaussianKDE = {"_p_stag__ExactGaussianKDE", "stag::ExactGaussianKDE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_stag__Graph = {"_p_stag__Graph", "stag::Graph *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_stag__LSHFunction = {"_p_stag__LSHFunction", "stag::LSHFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_stag__LocalGraph = {"_p_stag__LocalGraph", "stag::LocalGraph *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_stag__MultiLSHFunction = {"_p_stag__MultiLSHFunction", "stag::MultiLSHFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_stag__edge = {"_p_stag__edge", "stag::edge *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__istream = {"_p_std__istream", "std::istream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mt19937_64 = {"_p_std__mt19937_64", "std::mt19937_64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ofstream = {"_p_std__ofstream", "std::ofstream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__tupleT_Eigen__VectorXd_Eigen__MatrixXd_t = {"_p_std__tupleT_Eigen__VectorXd_Eigen__MatrixXd_t", "stag::EigenSystem *|std::tuple< Eigen::VectorXd,Eigen::MatrixXd > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__tupleT_SprsMat_SprsMat_t = {"_p_std__tupleT_SprsMat_SprsMat_t", "std::tuple< SprsMat,SprsMat > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__tupleT_StagInt_StagInt_t = {"_p_std__tupleT_StagInt_StagInt_t", "std::tuple< StagInt,StagInt > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_t = {"_p_std__vectorT_double_t", "std::vector< StagReal > *|std::vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int64_t_t = {"_p_std__vectorT_int64_t_t", "std::vector< StagInt > *|std::vector< int64_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_stag__edge_t = {"_p_std__vectorT_stag__edge_t", "std::vector< stag::edge > *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t,
  &_swigt__p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t,
  &_swigt__p_Eigen__TripletT_StagReal_StagInt_t,
  &_swigt__p_Spectra__SparseSymMatProdT_StagReal_Eigen__Upper_Eigen__ColMajor_StagInt_t,
  &_swigt__p_Spectra__SparseSymShiftSolveT_StagReal_Eigen__Upper_Eigen__ColMajor_StagInt_t,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_int64_t,
  &_swigt__p_size_t,
  &_swigt__p_stag__AdjacencyListLocalGraph,
  &_swigt__p_stag__CKNSGaussianKDE,
  &_swigt__p_stag__CKNSGaussianKDEHashUnit,
  &_swigt__p_stag__DataPoint,
  &_swigt__p_stag__E2LSH,
  &_swigt__p_stag__ExactGaussianKDE,
  &_swigt__p_stag__Graph,
  &_swigt__p_stag__LSHFunction,
  &_swigt__p_stag__LocalGraph,
  &_swigt__p_stag__MultiLSHFunction,
  &_swigt__p_stag__edge,
  &_swigt__p_std__istream,
  &_swigt__p_std__mt19937_64,
  &_swigt__p_std__ofstream,
  &_swigt__p_std__string,
  &_swigt__p_std__tupleT_Eigen__VectorXd_Eigen__MatrixXd_t,
  &_swigt__p_std__tupleT_SprsMat_SprsMat_t,
  &_swigt__p_std__tupleT_StagInt_StagInt_t,
  &_swigt__p_std__vectorT_double_t,
  &_swigt__p_std__vectorT_int64_t_t,
  &_swigt__p_std__vectorT_stag__edge_t,
};

static swig_cast_info _swigc__p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t[] = {  {&_swigt__p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t[] = {  {&_swigt__p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__TripletT_StagReal_StagInt_t[] = {  {&_swigt__p_Eigen__TripletT_StagReal_StagInt_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Spectra__SparseSymMatProdT_StagReal_Eigen__Upper_Eigen__ColMajor_StagInt_t[] = {  {&_swigt__p_Spectra__SparseSymMatProdT_StagReal_Eigen__Upper_Eigen__ColMajor_StagInt_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Spectra__SparseSymShiftSolveT_StagReal_Eigen__Upper_Eigen__ColMajor_StagInt_t[] = {  {&_swigt__p_Spectra__SparseSymShiftSolveT_StagReal_Eigen__Upper_Eigen__ColMajor_StagInt_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int64_t[] = {  {&_swigt__p_int64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stag__AdjacencyListLocalGraph[] = {  {&_swigt__p_stag__AdjacencyListLocalGraph, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stag__CKNSGaussianKDE[] = {  {&_swigt__p_stag__CKNSGaussianKDE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stag__CKNSGaussianKDEHashUnit[] = {  {&_swigt__p_stag__CKNSGaussianKDEHashUnit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stag__DataPoint[] = {  {&_swigt__p_stag__DataPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stag__E2LSH[] = {  {&_swigt__p_stag__E2LSH, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stag__ExactGaussianKDE[] = {  {&_swigt__p_stag__ExactGaussianKDE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stag__Graph[] = {  {&_swigt__p_stag__Graph, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stag__LSHFunction[] = {  {&_swigt__p_stag__LSHFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stag__LocalGraph[] = {  {&_swigt__p_stag__LocalGraph, 0, 0, 0},  {&_swigt__p_stag__AdjacencyListLocalGraph, _p_stag__AdjacencyListLocalGraphTo_p_stag__LocalGraph, 0, 0},  {&_swigt__p_stag__Graph, _p_stag__GraphTo_p_stag__LocalGraph, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stag__MultiLSHFunction[] = {  {&_swigt__p_stag__MultiLSHFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stag__edge[] = {  {&_swigt__p_stag__edge, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__istream[] = {  {&_swigt__p_std__istream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mt19937_64[] = {  {&_swigt__p_std__mt19937_64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ofstream[] = {  {&_swigt__p_std__ofstream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__tupleT_Eigen__VectorXd_Eigen__MatrixXd_t[] = {  {&_swigt__p_std__tupleT_Eigen__VectorXd_Eigen__MatrixXd_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__tupleT_SprsMat_SprsMat_t[] = {  {&_swigt__p_std__tupleT_SprsMat_SprsMat_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__tupleT_StagInt_StagInt_t[] = {  {&_swigt__p_std__tupleT_StagInt_StagInt_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_t[] = {  {&_swigt__p_std__vectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int64_t_t[] = {  {&_swigt__p_std__vectorT_int64_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_stag__edge_t[] = {  {&_swigt__p_std__vectorT_stag__edge_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Eigen__MatrixT_StagReal_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t,
  _swigc__p_Eigen__SparseMatrixT_StagReal_Eigen__ColMajor_StagInt_t,
  _swigc__p_Eigen__TripletT_StagReal_StagInt_t,
  _swigc__p_Spectra__SparseSymMatProdT_StagReal_Eigen__Upper_Eigen__ColMajor_StagInt_t,
  _swigc__p_Spectra__SparseSymShiftSolveT_StagReal_Eigen__Upper_Eigen__ColMajor_StagInt_t,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_int64_t,
  _swigc__p_size_t,
  _swigc__p_stag__AdjacencyListLocalGraph,
  _swigc__p_stag__CKNSGaussianKDE,
  _swigc__p_stag__CKNSGaussianKDEHashUnit,
  _swigc__p_stag__DataPoint,
  _swigc__p_stag__E2LSH,
  _swigc__p_stag__ExactGaussianKDE,
  _swigc__p_stag__Graph,
  _swigc__p_stag__LSHFunction,
  _swigc__p_stag__LocalGraph,
  _swigc__p_stag__MultiLSHFunction,
  _swigc__p_stag__edge,
  _swigc__p_std__istream,
  _swigc__p_std__mt19937_64,
  _swigc__p_std__ofstream,
  _swigc__p_std__string,
  _swigc__p_std__tupleT_Eigen__VectorXd_Eigen__MatrixXd_t,
  _swigc__p_std__tupleT_SprsMat_SprsMat_t,
  _swigc__p_std__tupleT_StagInt_StagInt_t,
  _swigc__p_std__vectorT_double_t,
  _swigc__p_std__vectorT_int64_t_t,
  _swigc__p_std__vectorT_stag__edge_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------
   * Patch %callback methods' docstrings to hold the callback ptrs
   * -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods, const swig_const_info *const_table, swig_type_info **types, swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        const swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              memcpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              memcpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif




/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md, *globals;
  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    SwigPyObject_own,
    SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  (void)globals;
  
  /* Create singletons now to avoid potential deadlocks with multi-threaded usage after module initialization */
  SWIG_This();
  SWIG_Python_TypeCache();
  SwigPyPacked_type();
#ifndef SWIGPYTHON_BUILTIN
  SwigPyObject_type();
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule(SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  
  import_array();
  
  
  import_array();
  
  globals = SWIG_globals();
  if (!globals) {
    PyErr_SetString(PyExc_TypeError, "Failure to create SWIG globals.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  PyDict_SetItemString(md, "cvar", globals);
  SWIG_addvarlink(globals, "VERSION_MAJOR", Swig_var_VERSION_MAJOR_get, Swig_var_VERSION_MAJOR_set);
  SWIG_addvarlink(globals, "VERSION_MINOR", Swig_var_VERSION_MINOR_get, Swig_var_VERSION_MINOR_set);
  SWIG_addvarlink(globals, "VERSION_PATCH", Swig_var_VERSION_PATCH_get, Swig_var_VERSION_PATCH_set);
  SWIG_Python_SetConstant(d, "Largest",SWIG_From_int(static_cast< int >(stag::Largest)));
  SWIG_Python_SetConstant(d, "Smallest",SWIG_From_int(static_cast< int >(stag::Smallest)));
  SWIG_Python_SetConstant(d, "Adjacency",SWIG_From_int(static_cast< int >(stag::Adjacency)));
  SWIG_Python_SetConstant(d, "Laplacian",SWIG_From_int(static_cast< int >(stag::Laplacian)));
  SWIG_Python_SetConstant(d, "NormalisedLaplacian",SWIG_From_int(static_cast< int >(stag::NormalisedLaplacian)));
  SWIG_Python_SetConstant(d, "LSH_PARAMETER_W",SWIG_From_double(static_cast< double >(4.0)));
  SWIG_Python_SetConstant(d, "EPSILON",SWIG_From_double(static_cast< double >(0.0000000001)));
  SWIG_Python_SetConstant(d, "VERSION",SWIG_FromCharPtr("2.0.2"));
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

